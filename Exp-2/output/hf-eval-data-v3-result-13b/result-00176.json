{"path": "output/hf-eval-data-v3-valid/f00706_convert_text_to_speech.py", "content": "# function_import --------------------\n\nimport os\nimport soundfile\nfrom espnet2.bin.tts_inference import Text2Speech\n\n# function_code --------------------\n\ndef convert_text_to_speech(lesson_text: str, output_file: str) -> None:\n    '''\n    Convert the given text into speech using a pre-trained Chinese Text-to-Speech model.\n\n    Args:\n        lesson_text (str): The text content of the lesson.\n        output_file (str): The path to the output audio file.\n\n    Returns:\n        None\n\n    Raises:\n        ModuleNotFoundError: If the required modules are not installed.\n    '''\n    text2speech = Text2Speech.from_pretrained('espnet/kan-bayashi_csmsc_tts_train_tacotron2_raw_phn_pypinyin_g2p_phone_train.loss.best')\n    speech = text2speech(lesson_text)['wav']\n    soundfile.write(output_file, speech.numpy(), text2speech.fs, 'PCM_16')\n\n# test_function_code --------------------\n\ndef test_convert_text_to_speech():\n    '''\n    Test the convert_text_to_speech function.\n    '''\n    convert_text_to_speech('\u6c49\u8bed\u5f88\u6709\u8da3', 'lesson_audio_example.wav')\n    assert os.path.exists('lesson_audio_example.wav'), 'The audio file does not exist.'\n    os.remove('lesson_audio_example.wav')\n    assert not os.path.exists('lesson_audio_example.wav'), 'The audio file was not deleted.'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_convert_text_to_speech()", "function_import": "# function_import --------------------\n\nimport os\nimport soundfile\nfrom espnet2.bin.tts_inference import Text2Speech\n\n", "function_code": "# function_code --------------------\n\ndef convert_text_to_speech(lesson_text: str, output_file: str) -> None:\n    '''\n    Convert the given text into speech using a pre-trained Chinese Text-to-Speech model.\n\n    Args:\n        lesson_text (str): The text content of the lesson.\n        output_file (str): The path to the output audio file.\n\n    Returns:\n        None\n\n    Raises:\n        ModuleNotFoundError: If the required modules are not installed.\n    '''\n    text2speech = Text2Speech.from_pretrained('espnet/kan-bayashi_csmsc_tts_train_tacotron2_raw_phn_pypinyin_g2p_phone_train.loss.best')\n    speech = text2speech(lesson_text)['wav']\n    soundfile.write(output_file, speech.numpy(), text2speech.fs, 'PCM_16')\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_convert_text_to_speech():\n    '''\n    Test the convert_text_to_speech function.\n    '''\n    convert_text_to_speech('\u6c49\u8bed\u5f88\u6709\u8da3', 'lesson_audio_example.wav')\n    assert os.path.exists('lesson_audio_example.wav'), 'The audio file does not exist.'\n    os.remove('lesson_audio_example.wav')\n    assert not os.path.exists('lesson_audio_example.wav'), 'The audio file was not deleted.'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_convert_text_to_speech()", "instruct": "# function_import --------------------\n\nimport os\nimport soundfile\nfrom espnet2.bin.tts_inference import Text2Speech\n\n# function_code --------------------\n\ndef convert_text_to_speech(lesson_text: str, output_file: str) -> None:\n    '''\n    Convert the given text into speech using a pre-trained Chinese Text-to-Speech model.\n\n    Args:\n        lesson_text (str): The text content of the lesson.\n        output_file (str): The path to the output audio file.\n\n    Returns:\n        None\n\n    Raises:\n        ModuleNotFoundError: If the required modules are not installed.\n    '''", "answer": "\n    text2speech = Text2Speech.from_pretrained('espnet/kan-bayashi_csmsc_tts_train_tacotron2_raw_phn_pypinyin_g2p_phone_train.loss.best')\n    speech = text2speech(lesson_text)['wav']\n    soundfile.write(output_file, speech.numpy(), text2speech.fs, 'PCM_16')\n\n", "prediction": "\n    \n    if 'TTS_MODEL' in os.environ == False:\n        raise ModuleNotFoundError('Please set environment variable for the TTS model.')\n\n    tts = Text2Speech.from_pretrained(os.environ['TTS_MODEL'])\n    speech, sampling_rate = tts(lesson_text)\n    \n    soundfile.write(output_file, speech[0].numpy().astype('int16'), sampling_rate)"}