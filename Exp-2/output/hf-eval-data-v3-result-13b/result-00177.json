{"path": "output/hf-eval-data-v3-valid/f00721_predict_wine_quality.py", "content": "# function_import --------------------\n\nfrom huggingface_hub import hf_hub_url, cached_download\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n# function_code --------------------\n\ndef predict_wine_quality():\n    '''\n    This function is used to predict the quality of wine based on its chemical properties.\n    It uses a pre-trained model hosted on Hugging Face hub.\n    \n    Returns:\n        tuple: A tuple containing the predicted labels and the model's score.\n    \n    Raises:\n        Exception: If there is an error in loading the model or the data.\n    '''\n    REPO_ID = 'julien-c/wine-quality'\n    FILENAME = 'sklearn_model.joblib'\n    data_filename = 'winequality-red.csv'\n\n    try:\n        model = joblib.load(cached_download(hf_hub_url(REPO_ID, FILENAME)))\n        data_file = cached_download(hf_hub_url(REPO_ID, data_filename))\n    except Exception as e:\n        raise Exception('Error in loading model or data: ' + str(e))\n\n    wine_df = pd.read_csv(data_file, sep=';')\n    X = wine_df.drop(['quality'], axis=1)\n    Y = wine_df['quality']\n\n    labels = model.predict(X)\n    model_score = model.score(X, Y)\n\n    return labels, model_score\n\n# test_function_code --------------------\n\ndef test_predict_wine_quality():\n    '''\n    This function is used to test the predict_wine_quality function.\n    It checks if the function returns the correct output type and if the model score is within an acceptable range.\n    '''\n    labels, score = predict_wine_quality()\n    assert isinstance(labels, np.ndarray), 'The predicted labels should be a numpy array.'\n    assert isinstance(score, float), 'The model score should be a float.'\n    assert 0 <= score <= 1, 'The model score should be between 0 and 1.'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_predict_wine_quality()", "function_import": "# function_import --------------------\n\nfrom huggingface_hub import hf_hub_url, cached_download\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n", "function_code": "# function_code --------------------\n\ndef predict_wine_quality():\n    '''\n    This function is used to predict the quality of wine based on its chemical properties.\n    It uses a pre-trained model hosted on Hugging Face hub.\n    \n    Returns:\n        tuple: A tuple containing the predicted labels and the model's score.\n    \n    Raises:\n        Exception: If there is an error in loading the model or the data.\n    '''\n    REPO_ID = 'julien-c/wine-quality'\n    FILENAME = 'sklearn_model.joblib'\n    data_filename = 'winequality-red.csv'\n\n    try:\n        model = joblib.load(cached_download(hf_hub_url(REPO_ID, FILENAME)))\n        data_file = cached_download(hf_hub_url(REPO_ID, data_filename))\n    except Exception as e:\n        raise Exception('Error in loading model or data: ' + str(e))\n\n    wine_df = pd.read_csv(data_file, sep=';')\n    X = wine_df.drop(['quality'], axis=1)\n    Y = wine_df['quality']\n\n    labels = model.predict(X)\n    model_score = model.score(X, Y)\n\n    return labels, model_score\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_predict_wine_quality():\n    '''\n    This function is used to test the predict_wine_quality function.\n    It checks if the function returns the correct output type and if the model score is within an acceptable range.\n    '''\n    labels, score = predict_wine_quality()\n    assert isinstance(labels, np.ndarray), 'The predicted labels should be a numpy array.'\n    assert isinstance(score, float), 'The model score should be a float.'\n    assert 0 <= score <= 1, 'The model score should be between 0 and 1.'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_predict_wine_quality()", "instruct": "# function_import --------------------\n\nfrom huggingface_hub import hf_hub_url, cached_download\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n# function_code --------------------\n\ndef predict_wine_quality():\n    '''\n    This function is used to predict the quality of wine based on its chemical properties.\n    It uses a pre-trained model hosted on Hugging Face hub.\n    \n    Returns:\n        tuple: A tuple containing the predicted labels and the model's score.\n    \n    Raises:\n        Exception: If there is an error in loading the model or the data.\n    '''", "answer": "\n    REPO_ID = 'julien-c/wine-quality'\n    FILENAME = 'sklearn_model.joblib'\n    data_filename = 'winequality-red.csv'\n\n    try:\n        model = joblib.load(cached_download(hf_hub_url(REPO_ID, FILENAME)))\n        data_file = cached_download(hf_hub_url(REPO_ID, data_filename))\n    except Exception as e:\n        raise Exception('Error in loading model or data: ' + str(e))\n\n    wine_df = pd.read_csv(data_file, sep=';')\n    X = wine_df.drop(['quality'], axis=1)\n    Y = wine_df['quality']\n\n    labels = model.predict(X)\n    model_score = model.score(X, Y)\n\n    return labels, model_score\n\n", "prediction": "\n    # Get the data from user input\n    try:\n        # get data from request object \n        alcohol = float(request.form['alcohol'])\n        volatile_acidity = float(request.form['volatile acidity'])\n        sulphates = float(request.form['sulphates'])\n        total_soluble_solids = float(request.form['total soluble solids'])\n    except:\n        # get data from url parameters \n        alcohol = request.args.get('alcohol')\n        volatile_acidity = request.args.get('volatile acidity')\n        sulphates = request.args.get('sulphates')\n        total_soluble_solids = request.args.get('total soluble solids')\n    alcohol = np.array(alcohol).reshape(-1, 1)\n    volatile_acidity = np.array(volatile_acidity).reshape(-1, 1)\n    sulphates = np.array(sulphates).reshape(-1, 1)\n    total_soluble_solids = np.array(total_soluble_solids).reshape(-1, 1)\n    \n    # Load the model from Hugging Face hub.\n    model_url=hf_hub_url(repo_id=\"nishantkr97/wine-quality\", filename=\"wine_model.joblib\")\n    model = joblib.load(cached_download(model_url))\n    \n    # Create dataframe from the inputs\n    data = pd.DataFrame([alcohol, volatile_acidity, sulphates, total_soluble_solids])\n    print('Dataframe: ',data)\n    \n    # Get the prediction score and label using the model\n    score = model.predict(data)[0]\n    if score < 5:\n        label=\"Bad\"\n    elif score > 5:\n        label=\"Good\"\n        \n    return (label, score)"}