{"path": "output/hf-eval-data-v3-valid/f00188_classify_image.py", "content": "# function_import --------------------\n\nfrom transformers import AutoFeatureExtractor, RegNetForImageClassification\nimport torch\nfrom PIL import Image\nimport requests\nfrom io import BytesIO\n\n# function_code --------------------\n\ndef classify_image(image_url: str) -> str:\n    \"\"\"\n    Classify an image using the pretrained RegNetForImageClassification model.\n\n    Args:\n        image_url (str): The URL of the image to be classified.\n\n    Returns:\n        str: The predicted label of the image.\n\n    Raises:\n        OSError: If the model identifier is not found in the Hugging Face model hub.\n    \"\"\"\n    model = RegNetForImageClassification.from_pretrained('facebook/regnet-y-008')\n    feature_extractor = AutoFeatureExtractor.from_pretrained('facebook/regnet-y-008')\n\n    response = requests.get(image_url)\n    image = Image.open(BytesIO(response.content))\n\n    inputs = feature_extractor(images=image, return_tensors='pt')\n    with torch.no_grad():\n        logits = model(**inputs).logits\n    predicted_label = logits.argmax(-1).item()\n\n    return model.config.id2label[predicted_label]\n\n# test_function_code --------------------\n\ndef test_classify_image():\n    \"\"\"\n    Test the classify_image function with different test cases.\n    \"\"\"\n    test_image_url_1 = 'https://placekitten.com/200/300'\n    test_image_url_2 = 'https://placekitten.com/400/600'\n    test_image_url_3 = 'https://placekitten.com/800/1200'\n\n    assert isinstance(classify_image(test_image_url_1), str)\n    assert isinstance(classify_image(test_image_url_2), str)\n    assert isinstance(classify_image(test_image_url_3), str)\n\n    print('All Tests Passed')\n\n# call_test_function_code --------------------\n\nif __name__ == '__main__':\n    test_classify_image()", "function_import": "# function_import --------------------\n\nfrom transformers import AutoFeatureExtractor, RegNetForImageClassification\nimport torch\nfrom PIL import Image\nimport requests\nfrom io import BytesIO\n\n", "function_code": "# function_code --------------------\n\ndef classify_image(image_url: str) -> str:\n    \"\"\"\n    Classify an image using the pretrained RegNetForImageClassification model.\n\n    Args:\n        image_url (str): The URL of the image to be classified.\n\n    Returns:\n        str: The predicted label of the image.\n\n    Raises:\n        OSError: If the model identifier is not found in the Hugging Face model hub.\n    \"\"\"\n    model = RegNetForImageClassification.from_pretrained('facebook/regnet-y-008')\n    feature_extractor = AutoFeatureExtractor.from_pretrained('facebook/regnet-y-008')\n\n    response = requests.get(image_url)\n    image = Image.open(BytesIO(response.content))\n\n    inputs = feature_extractor(images=image, return_tensors='pt')\n    with torch.no_grad():\n        logits = model(**inputs).logits\n    predicted_label = logits.argmax(-1).item()\n\n    return model.config.id2label[predicted_label]\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_classify_image():\n    \"\"\"\n    Test the classify_image function with different test cases.\n    \"\"\"\n    test_image_url_1 = 'https://placekitten.com/200/300'\n    test_image_url_2 = 'https://placekitten.com/400/600'\n    test_image_url_3 = 'https://placekitten.com/800/1200'\n\n    assert isinstance(classify_image(test_image_url_1), str)\n    assert isinstance(classify_image(test_image_url_2), str)\n    assert isinstance(classify_image(test_image_url_3), str)\n\n    print('All Tests Passed')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\nif __name__ == '__main__':\n    test_classify_image()", "instruct": "# function_import --------------------\n\nfrom transformers import AutoFeatureExtractor, RegNetForImageClassification\nimport torch\nfrom PIL import Image\nimport requests\nfrom io import BytesIO\n\n# function_code --------------------\n\ndef classify_image(image_url: str) -> str:\n    \"\"\"\n    Classify an image using the pretrained RegNetForImageClassification model.\n\n    Args:\n        image_url (str): The URL of the image to be classified.\n\n    Returns:\n        str: The predicted label of the image.\n\n    Raises:\n        OSError: If the model identifier is not found in the Hugging Face model hub.\n    \"\"\"", "answer": "\n    model = RegNetForImageClassification.from_pretrained('facebook/regnet-y-008')\n    feature_extractor = AutoFeatureExtractor.from_pretrained('facebook/regnet-y-008')\n\n    response = requests.get(image_url)\n    image = Image.open(BytesIO(response.content))\n\n    inputs = feature_extractor(images=image, return_tensors='pt')\n    with torch.no_grad():\n        logits = model(**inputs).logits\n    predicted_label = logits.argmax(-1).item()\n\n    return model.config.id2label[predicted_label]\n\n", "prediction": "\n    \n    model_identifier = \"facebook/regnet-y-400mf\"\n    \n    try: \n        \n        # load feature extractor and model\n        feature_extractor = AutoFeatureExtractor.from_pretrained(model_identifier)\n        model = RegNetForImageClassification.from_pretrained(model_identifier).eval()\n            \n        # download image\n        response = requests.get(image_url, stream=True)\n        \n        if not response.ok:\n            raise RuntimeError(\"HTTP Error {}\".format(response.status_code)) \n        \n        img = Image.open(BytesIO(response.content)).convert('RGB')\n    \n    except OSError as err:\n        print(err)\n        return \"Model not found\"\n    \n    # resize image and extract features\n    inputs = feature_extractor(images=img, return_tensors='pt')[\"pixel_values\"]\n    outputs = model(inputs).logits\n\n    # get predicted label\n    predictions = torch.nn.functional.softmax(outputs, dim=-1)\n    top5_predicted_labels = torch.topk(predictions.flatten(), 5).indices.tolist()\n    \n    return feature_extractor.decode([str(index) for index in top5_predicted_labels])\n"}