{"path": "output/hf-eval-data-v3-valid/f00542_predict_carbon_emissions.py", "content": "# function_import --------------------\n\nimport json\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n# function_code --------------------\n\ndef predict_carbon_emissions(data_file):\n    \"\"\"\n    This function predicts the carbon emissions based on the given dataset.\n\n    Args:\n        data_file (str): The path to the input data file in CSV format.\n\n    Returns:\n        numpy.ndarray: The predicted carbon emissions.\n\n    Raises:\n        FileNotFoundError: If the model or configuration file does not exist.\n    \"\"\"\n    model = joblib.load('model.joblib')\n    config = json.load(open('config.json'))\n    features = config['features']\n\n    data = pd.read_csv(data_file)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n\n    predictions = model.predict(data)\n    return predictions\n\n# test_function_code --------------------\n\ndef test_predict_carbon_emissions():\n    \"\"\"\n    This function tests the predict_carbon_emissions function.\n    \"\"\"\n    # Test with a sample data file\n    try:\n        predictions = predict_carbon_emissions('sample_data.csv')\n        assert isinstance(predictions, np.ndarray), 'The result is not a numpy array.'\n        print('Test passed.')\n    except FileNotFoundError:\n        print('Test skipped due to missing file.')\n    except Exception as e:\n        print(f'Test failed due to: {e}')\n\n# call_test_function_code --------------------\n\ntest_predict_carbon_emissions()", "function_import": "# function_import --------------------\n\nimport json\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n", "function_code": "# function_code --------------------\n\ndef predict_carbon_emissions(data_file):\n    \"\"\"\n    This function predicts the carbon emissions based on the given dataset.\n\n    Args:\n        data_file (str): The path to the input data file in CSV format.\n\n    Returns:\n        numpy.ndarray: The predicted carbon emissions.\n\n    Raises:\n        FileNotFoundError: If the model or configuration file does not exist.\n    \"\"\"\n    model = joblib.load('model.joblib')\n    config = json.load(open('config.json'))\n    features = config['features']\n\n    data = pd.read_csv(data_file)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n\n    predictions = model.predict(data)\n    return predictions\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_predict_carbon_emissions():\n    \"\"\"\n    This function tests the predict_carbon_emissions function.\n    \"\"\"\n    # Test with a sample data file\n    try:\n        predictions = predict_carbon_emissions('sample_data.csv')\n        assert isinstance(predictions, np.ndarray), 'The result is not a numpy array.'\n        print('Test passed.')\n    except FileNotFoundError:\n        print('Test skipped due to missing file.')\n    except Exception as e:\n        print(f'Test failed due to: {e}')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_predict_carbon_emissions()", "instruct": "# function_import --------------------\n\nimport json\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n# function_code --------------------\n\ndef predict_carbon_emissions(data_file):\n    \"\"\"\n    This function predicts the carbon emissions based on the given dataset.\n\n    Args:\n        data_file (str): The path to the input data file in CSV format.\n\n    Returns:\n        numpy.ndarray: The predicted carbon emissions.\n\n    Raises:\n        FileNotFoundError: If the model or configuration file does not exist.\n    \"\"\"", "answer": "\n    model = joblib.load('model.joblib')\n    config = json.load(open('config.json'))\n    features = config['features']\n\n    data = pd.read_csv(data_file)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n\n    predictions = model.predict(data)\n    return predictions\n\n", "prediction": "\n\n    # Load the dataset\n    df = pd.read_csv(data_file)\n\n    # Load the model and configuration file\n    model = joblib.load('model/model')\n    config = json.loads(open(\"model/config.json\", \"r\").read())\n\n    # Extract the features from the dataset to create a numpy array\n    X = df[config[\"features\"]]\n\n    # Make predictions using the model and return them as NumPy array\n    return model.predict(X)\n"}