{"path": "output/hf-eval-data-v3-valid/f00112_image_segmentation.py", "content": "# function_import --------------------\n\nfrom transformers import SegformerFeatureExtractor, SegformerForSemanticSegmentation\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef image_segmentation(image_url):\n    \"\"\"\n    This function segments an image using the SegformerForSemanticSegmentation model from Hugging Face Transformers.\n\n    Args:\n        image_url (str): The URL of the image to be segmented.\n\n    Returns:\n        logits (torch.Tensor): The output logits from the segmentation model.\n    \"\"\"\n    feature_extractor = SegformerFeatureExtractor.from_pretrained('nvidia/segformer-b5-finetuned-ade-640-640')\n    model = SegformerForSemanticSegmentation.from_pretrained('nvidia/segformer-b5-finetuned-ade-640-640')\n    image = Image.open(requests.get(image_url, stream=True).raw)\n    inputs = feature_extractor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    logits = outputs.logits\n    return logits\n\n# test_function_code --------------------\n\ndef test_image_segmentation():\n    \"\"\"\n    This function tests the image_segmentation function with different test cases.\n    \"\"\"\n    test_case_1 = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    assert image_segmentation(test_case_1) is not None\n    test_case_2 = 'https://placekitten.com/200/300'\n    assert image_segmentation(test_case_2) is not None\n    test_case_3 = 'https://placekitten.com/500/700'\n    assert image_segmentation(test_case_3) is not None\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_image_segmentation()", "function_import": "# function_import --------------------\n\nfrom transformers import SegformerFeatureExtractor, SegformerForSemanticSegmentation\nfrom PIL import Image\nimport requests\n\n", "function_code": "# function_code --------------------\n\ndef image_segmentation(image_url):\n    \"\"\"\n    This function segments an image using the SegformerForSemanticSegmentation model from Hugging Face Transformers.\n\n    Args:\n        image_url (str): The URL of the image to be segmented.\n\n    Returns:\n        logits (torch.Tensor): The output logits from the segmentation model.\n    \"\"\"\n    feature_extractor = SegformerFeatureExtractor.from_pretrained('nvidia/segformer-b5-finetuned-ade-640-640')\n    model = SegformerForSemanticSegmentation.from_pretrained('nvidia/segformer-b5-finetuned-ade-640-640')\n    image = Image.open(requests.get(image_url, stream=True).raw)\n    inputs = feature_extractor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    logits = outputs.logits\n    return logits\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_image_segmentation():\n    \"\"\"\n    This function tests the image_segmentation function with different test cases.\n    \"\"\"\n    test_case_1 = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    assert image_segmentation(test_case_1) is not None\n    test_case_2 = 'https://placekitten.com/200/300'\n    assert image_segmentation(test_case_2) is not None\n    test_case_3 = 'https://placekitten.com/500/700'\n    assert image_segmentation(test_case_3) is not None\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_image_segmentation()", "instruct": "# function_import --------------------\n\nfrom transformers import SegformerFeatureExtractor, SegformerForSemanticSegmentation\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef image_segmentation(image_url):\n    \"\"\"\n    This function segments an image using the SegformerForSemanticSegmentation model from Hugging Face Transformers.\n\n    Args:\n        image_url (str): The URL of the image to be segmented.\n\n    Returns:\n        logits (torch.Tensor): The output logits from the segmentation model.\n    \"\"\"", "answer": "\n    feature_extractor = SegformerFeatureExtractor.from_pretrained('nvidia/segformer-b5-finetuned-ade-640-640')\n    model = SegformerForSemanticSegmentation.from_pretrained('nvidia/segformer-b5-finetuned-ade-640-640')\n    image = Image.open(requests.get(image_url, stream=True).raw)\n    inputs = feature_extractor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    logits = outputs.logits\n    return logits\n\n", "prediction": "\n    \n    url_image = requests.get(image_url)\n    img = Image.open(BytesIO(url_image.content))\n\n    feature_extractor = SegformerFeatureExtractor.from_pretrained(\"nvidia/segformer-b0-finetuned-ade-512-512\")\n    model = SegformerForSemanticSegmentation.from_pretrained(\"nvidia/segformer-b0-finetuned-ade-512-512\").to(\"cuda\")\n    \n    inputs = feature_extractor(img, return_tensors=\"pt\")\n    outputs = model(**inputs)\n        \n    logits = outputs.logits[0]\n\n    return logits"}