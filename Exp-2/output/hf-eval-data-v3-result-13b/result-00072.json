{"path": "output/hf-eval-data-v3-valid/f00297_classify_spanish_article.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef classify_spanish_article(spanish_article: str, candidate_labels: list, hypothesis_template: str = 'Este ejemplo es {}.') -> dict:\n    '''\n    Classify a Spanish article into different sections using a pre-trained model.\n\n    Args:\n        spanish_article (str): The Spanish article to be classified.\n        candidate_labels (list): The list of potential sections the article can be classified into.\n        hypothesis_template (str, optional): The template for the classification hypothesis. Defaults to 'Este ejemplo es {}.'.\n\n    Returns:\n        dict: The classification results with probabilities for each candidate label.\n    '''\n    classifier = pipeline('zero-shot-classification', model='Recognai/bert-base-spanish-wwm-cased-xnli')\n    predictions = classifier(spanish_article, candidate_labels, hypothesis_template=hypothesis_template)\n    return predictions\n\n# test_function_code --------------------\n\ndef test_classify_spanish_article():\n    '''\n    Test the classify_spanish_article function.\n    '''\n    spanish_article = 'El autor se perfila, a los 50 a\u00f1os de su muerte, como uno de los grandes de su siglo'\n    candidate_labels = ['cultura', 'sociedad', 'economia', 'salud', 'deportes']\n    predictions = classify_spanish_article(spanish_article, candidate_labels)\n    assert isinstance(predictions, dict), 'The result should be a dictionary.'\n    assert 'labels' in predictions, 'The result should contain labels.'\n    assert 'scores' in predictions, 'The result should contain scores.'\n    assert len(predictions['labels']) == len(candidate_labels), 'The number of labels should be equal to the number of candidate labels.'\n    assert len(predictions['scores']) == len(candidate_labels), 'The number of scores should be equal to the number of candidate labels.'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_classify_spanish_article()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef classify_spanish_article(spanish_article: str, candidate_labels: list, hypothesis_template: str = 'Este ejemplo es {}.') -> dict:\n    '''\n    Classify a Spanish article into different sections using a pre-trained model.\n\n    Args:\n        spanish_article (str): The Spanish article to be classified.\n        candidate_labels (list): The list of potential sections the article can be classified into.\n        hypothesis_template (str, optional): The template for the classification hypothesis. Defaults to 'Este ejemplo es {}.'.\n\n    Returns:\n        dict: The classification results with probabilities for each candidate label.\n    '''\n    classifier = pipeline('zero-shot-classification', model='Recognai/bert-base-spanish-wwm-cased-xnli')\n    predictions = classifier(spanish_article, candidate_labels, hypothesis_template=hypothesis_template)\n    return predictions\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_classify_spanish_article():\n    '''\n    Test the classify_spanish_article function.\n    '''\n    spanish_article = 'El autor se perfila, a los 50 a\u00f1os de su muerte, como uno de los grandes de su siglo'\n    candidate_labels = ['cultura', 'sociedad', 'economia', 'salud', 'deportes']\n    predictions = classify_spanish_article(spanish_article, candidate_labels)\n    assert isinstance(predictions, dict), 'The result should be a dictionary.'\n    assert 'labels' in predictions, 'The result should contain labels.'\n    assert 'scores' in predictions, 'The result should contain scores.'\n    assert len(predictions['labels']) == len(candidate_labels), 'The number of labels should be equal to the number of candidate labels.'\n    assert len(predictions['scores']) == len(candidate_labels), 'The number of scores should be equal to the number of candidate labels.'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_classify_spanish_article()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef classify_spanish_article(spanish_article: str, candidate_labels: list, hypothesis_template: str = 'Este ejemplo es {}.') -> dict:\n    '''\n    Classify a Spanish article into different sections using a pre-trained model.\n\n    Args:\n        spanish_article (str): The Spanish article to be classified.\n        candidate_labels (list): The list of potential sections the article can be classified into.\n        hypothesis_template (str, optional): The template for the classification hypothesis. Defaults to 'Este ejemplo es {}.'.\n\n    Returns:\n        dict: The classification results with probabilities for each candidate label.\n    '''", "answer": "\n    classifier = pipeline('zero-shot-classification', model='Recognai/bert-base-spanish-wwm-cased-xnli')\n    predictions = classifier(spanish_article, candidate_labels, hypothesis_template=hypothesis_template)\n    return predictions\n\n", "prediction": "\n\n    # load the model from huggingface hub\n    classifier = pipeline(task='text-classification', model='mrm8488/sec-spanish-bert-cased', tokenizer='mrm8488/sec-spanish-bert-cased')\n\n    # generate the hypotheses\n    hypothesis_list = [hypothesis_template.format(label) for label in candidate_labels]\n    \n    # classify the spanish article into one of the candidate labels using the model\n    classification_results = classifier(spanish_article, hypothesis_list)[0]\n    \n    return {candidate: classification_results['score'] for candidate in candidate_labels}"}