{"path": "output/hf-eval-data-v3-valid/f00443_predict_carbon_emissions.py", "content": "# function_import --------------------\n\nimport joblib\nimport pandas as pd\n\n# function_code --------------------\n\ndef predict_carbon_emissions(model_path: str, data_path: str) -> pd.DataFrame:\n    \"\"\"\n    Predicts future carbon emissions based on historical data using a trained model.\n\n    Args:\n        model_path (str): The path to the trained model.\n        data_path (str): The path to the historical data.\n\n    Returns:\n        pd.DataFrame: The predicted carbon emissions.\n\n    Raises:\n        FileNotFoundError: If the model or data file does not exist.\n    \"\"\"\n    # Load the trained model\n    model = joblib.load(model_path)\n\n    # Load historical data into a DataFrame\n    data = pd.read_csv(data_path)\n\n    # Predict future carbon emissions\n    predictions = model.predict(data)\n\n    return predictions\n\n# test_function_code --------------------\n\ndef test_predict_carbon_emissions():\n    \"\"\"\n    Tests the predict_carbon_emissions function.\n    \"\"\"\n    # Test with valid model and data paths\n    try:\n        predictions = predict_carbon_emissions('model.joblib', 'historical_data.csv')\n        assert isinstance(predictions, pd.DataFrame), 'The result is not a DataFrame.'\n    except FileNotFoundError:\n        print('Model or data file not found.')\n\n    # Test with invalid model path\n    try:\n        predictions = predict_carbon_emissions('invalid_model_path.joblib', 'historical_data.csv')\n    except FileNotFoundError:\n        print('Model file not found.')\n\n    # Test with invalid data path\n    try:\n        predictions = predict_carbon_emissions('model.joblib', 'invalid_data_path.csv')\n    except FileNotFoundError:\n        print('Data file not found.')\n\n    print('All Tests Passed')\n\n# call_test_function_code --------------------\n\ntest_predict_carbon_emissions()", "function_import": "# function_import --------------------\n\nimport joblib\nimport pandas as pd\n\n", "function_code": "# function_code --------------------\n\ndef predict_carbon_emissions(model_path: str, data_path: str) -> pd.DataFrame:\n    \"\"\"\n    Predicts future carbon emissions based on historical data using a trained model.\n\n    Args:\n        model_path (str): The path to the trained model.\n        data_path (str): The path to the historical data.\n\n    Returns:\n        pd.DataFrame: The predicted carbon emissions.\n\n    Raises:\n        FileNotFoundError: If the model or data file does not exist.\n    \"\"\"\n    # Load the trained model\n    model = joblib.load(model_path)\n\n    # Load historical data into a DataFrame\n    data = pd.read_csv(data_path)\n\n    # Predict future carbon emissions\n    predictions = model.predict(data)\n\n    return predictions\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_predict_carbon_emissions():\n    \"\"\"\n    Tests the predict_carbon_emissions function.\n    \"\"\"\n    # Test with valid model and data paths\n    try:\n        predictions = predict_carbon_emissions('model.joblib', 'historical_data.csv')\n        assert isinstance(predictions, pd.DataFrame), 'The result is not a DataFrame.'\n    except FileNotFoundError:\n        print('Model or data file not found.')\n\n    # Test with invalid model path\n    try:\n        predictions = predict_carbon_emissions('invalid_model_path.joblib', 'historical_data.csv')\n    except FileNotFoundError:\n        print('Model file not found.')\n\n    # Test with invalid data path\n    try:\n        predictions = predict_carbon_emissions('model.joblib', 'invalid_data_path.csv')\n    except FileNotFoundError:\n        print('Data file not found.')\n\n    print('All Tests Passed')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_predict_carbon_emissions()", "instruct": "# function_import --------------------\n\nimport joblib\nimport pandas as pd\n\n# function_code --------------------\n\ndef predict_carbon_emissions(model_path: str, data_path: str) -> pd.DataFrame:\n    \"\"\"\n    Predicts future carbon emissions based on historical data using a trained model.\n\n    Args:\n        model_path (str): The path to the trained model.\n        data_path (str): The path to the historical data.\n\n    Returns:\n        pd.DataFrame: The predicted carbon emissions.\n\n    Raises:\n        FileNotFoundError: If the model or data file does not exist.\n    \"\"\"", "answer": "\n    # Load the trained model\n    model = joblib.load(model_path)\n\n    # Load historical data into a DataFrame\n    data = pd.read_csv(data_path)\n\n    # Predict future carbon emissions\n    predictions = model.predict(data)\n\n    return predictions\n\n", "prediction": "\n    \n    # Load model and data.\n    if (not os.path.exists(model_path)) or (not os.path.isfile(model_path)):\n        raise FileNotFoundError(\"The model path is either invalid or doesn't point to a file.\")\n    else:\n        with open(model_path, \"rb\") as f:\n            rf = joblib.load(f)\n    \n    if (not os.path.exists(data_path)) or (not os.path.isfile(data_path)):\n        raise FileNotFoundError(\"The data path is either invalid or doesn't point to a file.\")\n    else:\n        df = pd.read_csv(data_path)\n    \n    # Drop columns that aren't needed for prediction.\n    X = df.loc[:, ~df.columns.str.match(\"Unnamed\")]\n    X = X.drop(['Year', 'Country'], axis=1)\n    X.rename({'GDP': 'gdp'}, axis='columns')\n    \n    # Predict the future values of carbon emissions.\n    predictions = pd.DataFrame(rf.predict(X), columns=['carbon_emissions'])\n    \n    return predictions"}