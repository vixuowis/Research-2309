{"path": "output/hf-eval-data-v3-valid/f00546_extract_features.py", "content": "# function_import --------------------\n\nimport torch\nfrom transformers import AutoTokenizer, AutoModel\n\n# function_code --------------------\n\ndef extract_features(entity_names):\n    \"\"\"\n    Extract features from a set of entity names using the SapBERT model.\n\n    Args:\n        entity_names (str): A string of biomedical entity names.\n\n    Returns:\n        torch.Tensor: The [CLS] embedding from the model output, which represents the aggregated features for the input biomedical entity names.\n    \"\"\"\n    tokenizer = AutoTokenizer.from_pretrained('cambridgeltl/SapBERT-from-PubMedBERT-fulltext')\n    model = AutoModel.from_pretrained('cambridgeltl/SapBERT-from-PubMedBERT-fulltext')\n\n    inputs = tokenizer(entity_names, return_tensors='pt')\n    outputs = model(**inputs)\n    cls_embedding = outputs.last_hidden_state[:, 0, :]\n\n    return cls_embedding\n\n# test_function_code --------------------\n\ndef test_extract_features():\n    \"\"\"\n    Test the extract_features function.\n    \"\"\"\n    entity_names = 'covid infection'\n    cls_embedding = extract_features(entity_names)\n\n    assert cls_embedding.shape[0] == 1\n    assert cls_embedding.shape[1] == 768\n\n    entity_names = 'cancer cell'\n    cls_embedding = extract_features(entity_names)\n\n    assert cls_embedding.shape[0] == 1\n    assert cls_embedding.shape[1] == 768\n\n    entity_names = 'heart disease'\n    cls_embedding = extract_features(entity_names)\n\n    assert cls_embedding.shape[0] == 1\n    assert cls_embedding.shape[1] == 768\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_extract_features()", "function_import": "# function_import --------------------\n\nimport torch\nfrom transformers import AutoTokenizer, AutoModel\n\n", "function_code": "# function_code --------------------\n\ndef extract_features(entity_names):\n    \"\"\"\n    Extract features from a set of entity names using the SapBERT model.\n\n    Args:\n        entity_names (str): A string of biomedical entity names.\n\n    Returns:\n        torch.Tensor: The [CLS] embedding from the model output, which represents the aggregated features for the input biomedical entity names.\n    \"\"\"\n    tokenizer = AutoTokenizer.from_pretrained('cambridgeltl/SapBERT-from-PubMedBERT-fulltext')\n    model = AutoModel.from_pretrained('cambridgeltl/SapBERT-from-PubMedBERT-fulltext')\n\n    inputs = tokenizer(entity_names, return_tensors='pt')\n    outputs = model(**inputs)\n    cls_embedding = outputs.last_hidden_state[:, 0, :]\n\n    return cls_embedding\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_extract_features():\n    \"\"\"\n    Test the extract_features function.\n    \"\"\"\n    entity_names = 'covid infection'\n    cls_embedding = extract_features(entity_names)\n\n    assert cls_embedding.shape[0] == 1\n    assert cls_embedding.shape[1] == 768\n\n    entity_names = 'cancer cell'\n    cls_embedding = extract_features(entity_names)\n\n    assert cls_embedding.shape[0] == 1\n    assert cls_embedding.shape[1] == 768\n\n    entity_names = 'heart disease'\n    cls_embedding = extract_features(entity_names)\n\n    assert cls_embedding.shape[0] == 1\n    assert cls_embedding.shape[1] == 768\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_extract_features()", "instruct": "# function_import --------------------\n\nimport torch\nfrom transformers import AutoTokenizer, AutoModel\n\n# function_code --------------------\n\ndef extract_features(entity_names):\n    \"\"\"\n    Extract features from a set of entity names using the SapBERT model.\n\n    Args:\n        entity_names (str): A string of biomedical entity names.\n\n    Returns:\n        torch.Tensor: The [CLS] embedding from the model output, which represents the aggregated features for the input biomedical entity names.\n    \"\"\"", "answer": "\n    tokenizer = AutoTokenizer.from_pretrained('cambridgeltl/SapBERT-from-PubMedBERT-fulltext')\n    model = AutoModel.from_pretrained('cambridgeltl/SapBERT-from-PubMedBERT-fulltext')\n\n    inputs = tokenizer(entity_names, return_tensors='pt')\n    outputs = model(**inputs)\n    cls_embedding = outputs.last_hidden_state[:, 0, :]\n\n    return cls_embedding\n\n", "prediction": "    \n\n    # Load SapBERT model and tokenizer\n    device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n    model = AutoModel.from_pretrained(\"dmis-lab/biobert-v1.1\").to(device)\n    tokenizer = AutoTokenizer.from_pretrained(\"dmis-lab/biobert-v1.1\")\n    \n    # Create input tensor\n    inputs = tokenizer.batch_encode_plus([entity_names], return_tensors=\"pt\", padding=True, truncation=True)\n    for key in inputs:\n        inputs[key] = inputs[key].to(device)\n        \n    with torch.no_grad():\n        # Extract [CLS] embedding from the model output\n        out = model(**inputs)[\"last_hidden_state\"][:, 0, :]\n    \n    return out"}