{"path": "output/hf-eval-data-v3-valid/f00593_classify_text.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef classify_text(text_message: str, candidate_labels: list) -> dict:\n    \"\"\"\n    Classify a given text message into one of the provided categories.\n\n    Args:\n        text_message (str): The text message to be classified.\n        candidate_labels (list): A list of potential categories for the text message.\n\n    Returns:\n        dict: A dictionary containing the classification results.\n\n    Raises:\n        OSError: If there is a problem with the model loading due to disk quota exceeded.\n    \"\"\"\n    classifier = pipeline('zero-shot-classification', model='typeform/distilbert-base-uncased-mnli')\n    classification_result = classifier(text_message, candidate_labels)\n    return classification_result\n\n# test_function_code --------------------\n\ndef test_classify_text():\n    \"\"\"\n    Test the classify_text function with some example text messages and candidate labels.\n    \"\"\"\n    text_message1 = 'Your monthly bank statement is now available.'\n    candidate_labels1 = ['finances', 'health', 'entertainment']\n    assert isinstance(classify_text(text_message1, candidate_labels1), dict)\n\n    text_message2 = 'Remember to take your vitamins.'\n    candidate_labels2 = ['health', 'finances', 'entertainment']\n    assert isinstance(classify_text(text_message2, candidate_labels2), dict)\n\n    text_message3 = 'The new movie is out in theaters.'\n    candidate_labels3 = ['entertainment', 'finances', 'health']\n    assert isinstance(classify_text(text_message3, candidate_labels3), dict)\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_classify_text()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef classify_text(text_message: str, candidate_labels: list) -> dict:\n    \"\"\"\n    Classify a given text message into one of the provided categories.\n\n    Args:\n        text_message (str): The text message to be classified.\n        candidate_labels (list): A list of potential categories for the text message.\n\n    Returns:\n        dict: A dictionary containing the classification results.\n\n    Raises:\n        OSError: If there is a problem with the model loading due to disk quota exceeded.\n    \"\"\"\n    classifier = pipeline('zero-shot-classification', model='typeform/distilbert-base-uncased-mnli')\n    classification_result = classifier(text_message, candidate_labels)\n    return classification_result\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_classify_text():\n    \"\"\"\n    Test the classify_text function with some example text messages and candidate labels.\n    \"\"\"\n    text_message1 = 'Your monthly bank statement is now available.'\n    candidate_labels1 = ['finances', 'health', 'entertainment']\n    assert isinstance(classify_text(text_message1, candidate_labels1), dict)\n\n    text_message2 = 'Remember to take your vitamins.'\n    candidate_labels2 = ['health', 'finances', 'entertainment']\n    assert isinstance(classify_text(text_message2, candidate_labels2), dict)\n\n    text_message3 = 'The new movie is out in theaters.'\n    candidate_labels3 = ['entertainment', 'finances', 'health']\n    assert isinstance(classify_text(text_message3, candidate_labels3), dict)\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_classify_text()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef classify_text(text_message: str, candidate_labels: list) -> dict:\n    \"\"\"\n    Classify a given text message into one of the provided categories.\n\n    Args:\n        text_message (str): The text message to be classified.\n        candidate_labels (list): A list of potential categories for the text message.\n\n    Returns:\n        dict: A dictionary containing the classification results.\n\n    Raises:\n        OSError: If there is a problem with the model loading due to disk quota exceeded.\n    \"\"\"", "answer": "\n    classifier = pipeline('zero-shot-classification', model='typeform/distilbert-base-uncased-mnli')\n    classification_result = classifier(text_message, candidate_labels)\n    return classification_result\n\n", "prediction": "    \n    try:\n      # load classifier from pipeline \n      classifier = pipeline(\"zero-shot-classification\", device=0)\n      \n      classification_result = classifier(text_message, candidate_labels, multi_label=False)\n    except OSError as e:\n        raise OSError(\"Classification failed!\") from e\n    \n    return classification_result"}