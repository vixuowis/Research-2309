{"path": "output/hf-eval-data-v3-valid/f00290_identify_street_location.py", "content": "# function_import --------------------\n\nfrom transformers import CLIPModel, CLIPProcessor\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef identify_street_location(image_url: str, choices: list):\n    \"\"\"\n    Identify the location of a street-level image using the Hugging Face Transformers' CLIPModel.\n\n    Args:\n        image_url (str): The URL of the street-level image.\n        choices (list): A list of possible locations.\n\n    Returns:\n        str: The location with the highest probability.\n    \"\"\"\n    model = CLIPModel.from_pretrained('geolocal/StreetCLIP')\n    processor = CLIPProcessor.from_pretrained('geolocal/StreetCLIP')\n\n    image = Image.open(requests.get(image_url, stream=True).raw)\n\n    inputs = processor(text=choices, images=image, return_tensors='pt', padding=True)\n\n    outputs = model(**inputs)\n    logits_per_image = outputs.logits_per_image\n    probs = logits_per_image.softmax(dim=1)\n\n    max_prob_index = probs.argmax().item()\n    return choices[max_prob_index]\n\n# test_function_code --------------------\n\ndef test_identify_street_location():\n    \"\"\"\n    Test the identify_street_location function.\n    \"\"\"\n    image_url = 'https://placekitten.com/200/300'\n    choices = ['San Jose', 'San Diego', 'Los Angeles', 'Las Vegas', 'San Francisco']\n\n    location = identify_street_location(image_url, choices)\n    assert location in choices\n\n    image_url = 'https://placekitten.com/200/300'\n    choices = ['New York', 'Chicago', 'Boston', 'Seattle', 'Austin']\n\n    location = identify_street_location(image_url, choices)\n    assert location in choices\n\n    image_url = 'https://placekitten.com/200/300'\n    choices = ['London', 'Paris', 'Berlin', 'Rome', 'Madrid']\n\n    location = identify_street_location(image_url, choices)\n    assert location in choices\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_identify_street_location()", "function_import": "# function_import --------------------\n\nfrom transformers import CLIPModel, CLIPProcessor\nfrom PIL import Image\nimport requests\n\n", "function_code": "# function_code --------------------\n\ndef identify_street_location(image_url: str, choices: list):\n    \"\"\"\n    Identify the location of a street-level image using the Hugging Face Transformers' CLIPModel.\n\n    Args:\n        image_url (str): The URL of the street-level image.\n        choices (list): A list of possible locations.\n\n    Returns:\n        str: The location with the highest probability.\n    \"\"\"\n    model = CLIPModel.from_pretrained('geolocal/StreetCLIP')\n    processor = CLIPProcessor.from_pretrained('geolocal/StreetCLIP')\n\n    image = Image.open(requests.get(image_url, stream=True).raw)\n\n    inputs = processor(text=choices, images=image, return_tensors='pt', padding=True)\n\n    outputs = model(**inputs)\n    logits_per_image = outputs.logits_per_image\n    probs = logits_per_image.softmax(dim=1)\n\n    max_prob_index = probs.argmax().item()\n    return choices[max_prob_index]\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_identify_street_location():\n    \"\"\"\n    Test the identify_street_location function.\n    \"\"\"\n    image_url = 'https://placekitten.com/200/300'\n    choices = ['San Jose', 'San Diego', 'Los Angeles', 'Las Vegas', 'San Francisco']\n\n    location = identify_street_location(image_url, choices)\n    assert location in choices\n\n    image_url = 'https://placekitten.com/200/300'\n    choices = ['New York', 'Chicago', 'Boston', 'Seattle', 'Austin']\n\n    location = identify_street_location(image_url, choices)\n    assert location in choices\n\n    image_url = 'https://placekitten.com/200/300'\n    choices = ['London', 'Paris', 'Berlin', 'Rome', 'Madrid']\n\n    location = identify_street_location(image_url, choices)\n    assert location in choices\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_identify_street_location()", "instruct": "# function_import --------------------\n\nfrom transformers import CLIPModel, CLIPProcessor\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef identify_street_location(image_url: str, choices: list):\n    \"\"\"\n    Identify the location of a street-level image using the Hugging Face Transformers' CLIPModel.\n\n    Args:\n        image_url (str): The URL of the street-level image.\n        choices (list): A list of possible locations.\n\n    Returns:\n        str: The location with the highest probability.\n    \"\"\"", "answer": "\n    model = CLIPModel.from_pretrained('geolocal/StreetCLIP')\n    processor = CLIPProcessor.from_pretrained('geolocal/StreetCLIP')\n\n    image = Image.open(requests.get(image_url, stream=True).raw)\n\n    inputs = processor(text=choices, images=image, return_tensors='pt', padding=True)\n\n    outputs = model(**inputs)\n    logits_per_image = outputs.logits_per_image\n    probs = logits_per_image.softmax(dim=1)\n\n    max_prob_index = probs.argmax().item()\n    return choices[max_prob_index]\n\n", "prediction": "\n\n    model = CLIPModel.from_pretrained(\"openai/clip-vit-base-patch32\")\n    processor = CLIPProcessor.from_pretrained(\"openai/clip-vit-base-patch32\")\n    \n    image = Image.open(requests.get(image_url, stream=True).raw)\n    inputs = processor(text=choices, images=image, return_tensors='pt', padding=\"max_length\", max_length=70, truncation=True)\n    outputs = model(**inputs)\n\n    similarity = outputs.logits_per_text[0]\n    probabilities = []\n    for i in range(len(choices)):\n        probabilities.append([i, similarity[i].item()])\n    \n    return max(probabilities)[1], choices[max(probabilities)[0]]"}