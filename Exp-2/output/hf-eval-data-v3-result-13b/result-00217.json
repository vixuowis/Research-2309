{"path": "output/hf-eval-data-v3-valid/f00827_generate_image.py", "content": "# function_import --------------------\n\nimport torch\nfrom diffusers import StableDiffusionPipeline\nimport os\n\n# function_code --------------------\n\ndef generate_image(prompt: str, model_id: str = 'CompVis/stable-diffusion-v1-4', device: str = 'cuda', save_path: str = 'generated_image.png'):\n    '''\n    Generate an image based on the provided text prompt using the StableDiffusionPipeline.\n\n    Args:\n        prompt (str): The text description of the image to be generated.\n        model_id (str, optional): The model to be used for image generation. Defaults to 'CompVis/stable-diffusion-v1-4'.\n        device (str, optional): The device to be used for image generation. Defaults to 'cuda'.\n        save_path (str, optional): The path where the generated image will be saved. Defaults to 'generated_image.png'.\n\n    Returns:\n        None\n    '''\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe = pipe.to(device)\n    image = pipe(prompt).images[0]\n    image.save(save_path)\n\n# test_function_code --------------------\n\ndef test_generate_image():\n    '''\n    Test the generate_image function.\n    '''\n    generate_image('a futuristic 3D printed car', save_path='3D_printed_car.png')\n    assert os.path.exists('3D_printed_car.png'), 'Test Failed: Image not generated!'\n    os.remove('3D_printed_car.png')\n    generate_image('an astronaut riding a horse on mars', save_path='astronaut_rides_horse.png')\n    assert os.path.exists('astronaut_rides_horse.png'), 'Test Failed: Image not generated!'\n    os.remove('astronaut_rides_horse.png')\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_generate_image()", "function_import": "# function_import --------------------\n\nimport torch\nfrom diffusers import StableDiffusionPipeline\nimport os\n\n", "function_code": "# function_code --------------------\n\ndef generate_image(prompt: str, model_id: str = 'CompVis/stable-diffusion-v1-4', device: str = 'cuda', save_path: str = 'generated_image.png'):\n    '''\n    Generate an image based on the provided text prompt using the StableDiffusionPipeline.\n\n    Args:\n        prompt (str): The text description of the image to be generated.\n        model_id (str, optional): The model to be used for image generation. Defaults to 'CompVis/stable-diffusion-v1-4'.\n        device (str, optional): The device to be used for image generation. Defaults to 'cuda'.\n        save_path (str, optional): The path where the generated image will be saved. Defaults to 'generated_image.png'.\n\n    Returns:\n        None\n    '''\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe = pipe.to(device)\n    image = pipe(prompt).images[0]\n    image.save(save_path)\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_image():\n    '''\n    Test the generate_image function.\n    '''\n    generate_image('a futuristic 3D printed car', save_path='3D_printed_car.png')\n    assert os.path.exists('3D_printed_car.png'), 'Test Failed: Image not generated!'\n    os.remove('3D_printed_car.png')\n    generate_image('an astronaut riding a horse on mars', save_path='astronaut_rides_horse.png')\n    assert os.path.exists('astronaut_rides_horse.png'), 'Test Failed: Image not generated!'\n    os.remove('astronaut_rides_horse.png')\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_generate_image()", "instruct": "# function_import --------------------\n\nimport torch\nfrom diffusers import StableDiffusionPipeline\nimport os\n\n# function_code --------------------\n\ndef generate_image(prompt: str, model_id: str = 'CompVis/stable-diffusion-v1-4', device: str = 'cuda', save_path: str = 'generated_image.png'):\n    '''\n    Generate an image based on the provided text prompt using the StableDiffusionPipeline.\n\n    Args:\n        prompt (str): The text description of the image to be generated.\n        model_id (str, optional): The model to be used for image generation. Defaults to 'CompVis/stable-diffusion-v1-4'.\n        device (str, optional): The device to be used for image generation. Defaults to 'cuda'.\n        save_path (str, optional): The path where the generated image will be saved. Defaults to 'generated_image.png'.\n\n    Returns:\n        None\n    '''", "answer": "\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe = pipe.to(device)\n    image = pipe(prompt).images[0]\n    image.save(save_path)\n\n", "prediction": "    \n    if torch.cuda.is_available() == False and device.lower() == 'cuda':\n        print('Warning! No GPU found. Please input \\'cpu\\' for the device argument or check your CUDA installation.')\n        return \n        \n    model = StableDiffusionPipeline(model_id, prompt)    \n    model.set_device(device)\n    \n    image = model.image(prompt=prompt)\n    \n    if os.path.exists(save_path):\n        print('Warning! The save path already exists. Please change to a new location or delete the old file.')\n        \n    else:\n        image.save(save_path, quality = 100)"}