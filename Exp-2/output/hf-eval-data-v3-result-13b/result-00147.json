{"path": "output/hf-eval-data-v3-valid/f00596_classify_synopsis.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef classify_synopsis(sequence: str, candidate_labels: list, hypothesis_template: str = 'In deisem geht es um {}') -> dict:\n    '''\n    Classify a movie synopsis into categories: crime, tragedy, and theft.\n\n    Args:\n        sequence (str): The movie synopsis in German.\n        candidate_labels (list): A list of candidate labels.\n        hypothesis_template (str, optional): A German hypothesis template. Defaults to 'In deisem geht es um {}'.\n\n    Returns:\n        dict: The classification result.\n    '''\n    classifier = pipeline('zero-shot-classification', model='Sahajtomar/German_Zeroshot')\n    result = classifier(sequence, candidate_labels, hypothesis_template=hypothesis_template)\n    return result\n\n# test_function_code --------------------\n\ndef test_classify_synopsis():\n    sequence = 'Letzte Woche gab es einen Selbstmord in einer nahe gelegenen kolonie'\n    candidate_labels = ['Verbrechen', 'Trag\u00f6die', 'Stehlen']\n    hypothesis_template = 'In deisem geht es um {}'\n    result = classify_synopsis(sequence, candidate_labels, hypothesis_template)\n    assert isinstance(result, dict)\n    assert 'labels' in result\n    assert 'scores' in result\n    assert len(result['labels']) == len(candidate_labels)\n    assert len(result['scores']) == len(candidate_labels)\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_classify_synopsis()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef classify_synopsis(sequence: str, candidate_labels: list, hypothesis_template: str = 'In deisem geht es um {}') -> dict:\n    '''\n    Classify a movie synopsis into categories: crime, tragedy, and theft.\n\n    Args:\n        sequence (str): The movie synopsis in German.\n        candidate_labels (list): A list of candidate labels.\n        hypothesis_template (str, optional): A German hypothesis template. Defaults to 'In deisem geht es um {}'.\n\n    Returns:\n        dict: The classification result.\n    '''\n    classifier = pipeline('zero-shot-classification', model='Sahajtomar/German_Zeroshot')\n    result = classifier(sequence, candidate_labels, hypothesis_template=hypothesis_template)\n    return result\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_classify_synopsis():\n    sequence = 'Letzte Woche gab es einen Selbstmord in einer nahe gelegenen kolonie'\n    candidate_labels = ['Verbrechen', 'Trag\u00f6die', 'Stehlen']\n    hypothesis_template = 'In deisem geht es um {}'\n    result = classify_synopsis(sequence, candidate_labels, hypothesis_template)\n    assert isinstance(result, dict)\n    assert 'labels' in result\n    assert 'scores' in result\n    assert len(result['labels']) == len(candidate_labels)\n    assert len(result['scores']) == len(candidate_labels)\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_classify_synopsis()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef classify_synopsis(sequence: str, candidate_labels: list, hypothesis_template: str = 'In deisem geht es um {}') -> dict:\n    '''\n    Classify a movie synopsis into categories: crime, tragedy, and theft.\n\n    Args:\n        sequence (str): The movie synopsis in German.\n        candidate_labels (list): A list of candidate labels.\n        hypothesis_template (str, optional): A German hypothesis template. Defaults to 'In deisem geht es um {}'.\n\n    Returns:\n        dict: The classification result.\n    '''", "answer": "\n    classifier = pipeline('zero-shot-classification', model='Sahajtomar/German_Zeroshot')\n    result = classifier(sequence, candidate_labels, hypothesis_template=hypothesis_template)\n    return result\n\n", "prediction": "\n    \n    # Initialize the classifier.\n    # The default model is fine for this use case and can be loaded in under two minutes.\n    classifier = pipeline('sentiment-analysis')\n\n    # Compute the hypotheses.\n    hypothesis_list = [hypothesis_template.format(label) for label in candidate_labels]\n    \n    # Classify each hypothesis.\n    classification_result = {label: score['label'] for (label, score) in zip(candidate_labels, classifier(hypothesis_list))}\n    \n    # Compute the average confidence score over candidate hypotheses. \n    # Note that this is NOT a standard sentiment score! It ranges from -1 to +1, where positive scores mean 'confidently in favor of the label'. Negative scores indicate 'confidently against it'.\n    avg_classification_score = sum([classification_result[label] for label in candidate_labels]) / len(candidate_labels)\n    \n    # Compute a sentiment score. This ranges from -1 to +1, where positive scores mean 'positive sentiment' and negative scores indicate 'negative sentiment'.\n    sentiment_score = (avg_classification_score - 0.5) * 2\n    \n    return {'sequence': sequence, 'sentiment_score': sentiment_score}"}