{"path": "output/hf-eval-data-v3-valid/f00686_classify_review.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef classify_review(review_text: str, categories: list) -> dict:\n    \"\"\"\n    Classify a review into one of the given categories using a zero-shot classification model.\n\n    Args:\n        review_text (str): The text of the review to classify.\n        categories (list): A list of categories to classify the review into.\n\n    Returns:\n        dict: A dictionary containing the classification results.\n\n    Raises:\n        OSError: If there is a problem loading the model or classifying the review.\n    \"\"\"\n    try:\n        classifier = pipeline('zero-shot-classification', model='vicgalle/xlm-roberta-large-xnli-anli')\n        result = classifier(review_text, categories)\n        return result\n    except OSError as e:\n        print(f'Error: {e}')\n\n# test_function_code --------------------\n\ndef test_classify_review():\n    \"\"\"\n    Test the classify_review function with some example reviews and categories.\n    \"\"\"\n    review_text1 = 'Alg\u00fan d\u00eda ir\u00e9 a ver el mundo'\n    categories1 = ['viaje', 'cocina', 'danza']\n    result1 = classify_review(review_text1, categories1)\n    assert isinstance(result1, dict), 'The result should be a dictionary.'\n\n    review_text2 = 'Me encanta cocinar paella'\n    categories2 = ['viaje', 'cocina', 'danza']\n    result2 = classify_review(review_text2, categories2)\n    assert isinstance(result2, dict), 'The result should be a dictionary.'\n\n    review_text3 = 'Bailar es mi pasi\u00f3n'\n    categories3 = ['viaje', 'cocina', 'danza']\n    result3 = classify_review(review_text3, categories3)\n    assert isinstance(result3, dict), 'The result should be a dictionary.'\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_classify_review()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef classify_review(review_text: str, categories: list) -> dict:\n    \"\"\"\n    Classify a review into one of the given categories using a zero-shot classification model.\n\n    Args:\n        review_text (str): The text of the review to classify.\n        categories (list): A list of categories to classify the review into.\n\n    Returns:\n        dict: A dictionary containing the classification results.\n\n    Raises:\n        OSError: If there is a problem loading the model or classifying the review.\n    \"\"\"\n    try:\n        classifier = pipeline('zero-shot-classification', model='vicgalle/xlm-roberta-large-xnli-anli')\n        result = classifier(review_text, categories)\n        return result\n    except OSError as e:\n        print(f'Error: {e}')\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_classify_review():\n    \"\"\"\n    Test the classify_review function with some example reviews and categories.\n    \"\"\"\n    review_text1 = 'Alg\u00fan d\u00eda ir\u00e9 a ver el mundo'\n    categories1 = ['viaje', 'cocina', 'danza']\n    result1 = classify_review(review_text1, categories1)\n    assert isinstance(result1, dict), 'The result should be a dictionary.'\n\n    review_text2 = 'Me encanta cocinar paella'\n    categories2 = ['viaje', 'cocina', 'danza']\n    result2 = classify_review(review_text2, categories2)\n    assert isinstance(result2, dict), 'The result should be a dictionary.'\n\n    review_text3 = 'Bailar es mi pasi\u00f3n'\n    categories3 = ['viaje', 'cocina', 'danza']\n    result3 = classify_review(review_text3, categories3)\n    assert isinstance(result3, dict), 'The result should be a dictionary.'\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_classify_review()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef classify_review(review_text: str, categories: list) -> dict:\n    \"\"\"\n    Classify a review into one of the given categories using a zero-shot classification model.\n\n    Args:\n        review_text (str): The text of the review to classify.\n        categories (list): A list of categories to classify the review into.\n\n    Returns:\n        dict: A dictionary containing the classification results.\n\n    Raises:\n        OSError: If there is a problem loading the model or classifying the review.\n    \"\"\"", "answer": "\n    try:\n        classifier = pipeline('zero-shot-classification', model='vicgalle/xlm-roberta-large-xnli-anli')\n        result = classifier(review_text, categories)\n        return result\n    except OSError as e:\n        print(f'Error: {e}')\n\n", "prediction": "\n    # Load the zero-shot classification pipeline.\n    try:\n        pipe = pipeline(\"zero-shot-classification\")\n    except OSError as error:\n        raise OSError(f\"There was a problem loading the zero-shot classification model - check that it is installed correctly.\") from error\n\n    # Classify the review using the selected categories.\n    try:\n        class_results = pipe(review_text, candidate_labels=categories)\n    except OSError as error:\n        raise OSError(\"There was a problem classifying the review text - check that it is not blank.\") from error\n\n    # Create a results dictionary containing only the fields required for this function.\n    return {\n        \"text\": review_text,\n        \"categories\": categories,\n        \"scores\": dict(zip(class_results[\"labels\"], class_results[\"scores\"]))\n    }\n"}