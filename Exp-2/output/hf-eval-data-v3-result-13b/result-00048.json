{"path": "output/hf-eval-data-v3-valid/f00198_generate_minecraft_skin.py", "content": "# function_import --------------------\n\nfrom diffusers import DDPMPipeline\nfrom PIL import Image\n\n# function_code --------------------\n\ndef generate_minecraft_skin():\n    \"\"\"\n    This function generates a Minecraft skin image using a pre-trained model from Hugging Face Transformers.\n\n    Returns:\n        PIL.Image.Image: The generated Minecraft skin image in RGBA format.\n    \"\"\"\n    pipeline = DDPMPipeline.from_pretrained('WiNE-iNEFF/Minecraft-Skin-Diffusion-V2')\n    image = pipeline().images[0].convert('RGBA')\n    return image\n\n# test_function_code --------------------\n\ndef test_generate_minecraft_skin():\n    \"\"\"\n    This function tests the generate_minecraft_skin function by checking the type and mode of the returned image.\n    \"\"\"\n    image = generate_minecraft_skin()\n    assert isinstance(image, Image.Image), 'The returned object is not a PIL image.'\n    assert image.mode == 'RGBA', 'The image is not in RGBA format.'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_generate_minecraft_skin()", "function_import": "# function_import --------------------\n\nfrom diffusers import DDPMPipeline\nfrom PIL import Image\n\n", "function_code": "# function_code --------------------\n\ndef generate_minecraft_skin():\n    \"\"\"\n    This function generates a Minecraft skin image using a pre-trained model from Hugging Face Transformers.\n\n    Returns:\n        PIL.Image.Image: The generated Minecraft skin image in RGBA format.\n    \"\"\"\n    pipeline = DDPMPipeline.from_pretrained('WiNE-iNEFF/Minecraft-Skin-Diffusion-V2')\n    image = pipeline().images[0].convert('RGBA')\n    return image\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_minecraft_skin():\n    \"\"\"\n    This function tests the generate_minecraft_skin function by checking the type and mode of the returned image.\n    \"\"\"\n    image = generate_minecraft_skin()\n    assert isinstance(image, Image.Image), 'The returned object is not a PIL image.'\n    assert image.mode == 'RGBA', 'The image is not in RGBA format.'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_generate_minecraft_skin()", "instruct": "# function_import --------------------\n\nfrom diffusers import DDPMPipeline\nfrom PIL import Image\n\n# function_code --------------------\n\ndef generate_minecraft_skin():\n    \"\"\"\n    This function generates a Minecraft skin image using a pre-trained model from Hugging Face Transformers.\n\n    Returns:\n        PIL.Image.Image: The generated Minecraft skin image in RGBA format.\n    \"\"\"", "answer": "\n    pipeline = DDPMPipeline.from_pretrained('WiNE-iNEFF/Minecraft-Skin-Diffusion-V2')\n    image = pipeline().images[0].convert('RGBA')\n    return image\n\n", "prediction": "\n    # Load a pretrained pytorch lightning module that is compatible with diffusers\n    ddpm_model = DDPMPipeline.load_from_checkpoint(path=\"https://github.com/huggingface/transformers-custom-apis/raw/ddpmpipelining/examples/tutorials/diffusion%20models/assets/ddpm-minecraft-128x128.ckpt\")\n    \n    # Generate the image\n    generated_image = ddpm_model.generate_images(inputs=None, num_imgs=1, batch_size=1)\n    print(\"Generated Image Shape: \",generated_image[0].shape)\n\n    # Convert it into a PIL Image\n    pil_image = Image.fromarray(generated_image[0])\n    return pil_image\n"}