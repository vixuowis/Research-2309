{"path": "output/hf-eval-data-v3-valid/f00083_classify_wine_quality.py", "content": "# function_import --------------------\n\nfrom huggingface_hub import hf_hub_url, cached_download\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n# function_code --------------------\n\ndef classify_wine_quality(X):\n    '''\n    Classify the quality of wine based on given features.\n    \n    Args:\n        X (pandas.DataFrame): The features of the wine samples.\n    \n    Returns:\n        numpy.ndarray: The predicted labels of the wine samples.\n    \n    Raises:\n        ValueError: If the input is not a pandas DataFrame.\n    '''\n    if not isinstance(X, pd.DataFrame):\n        raise ValueError('Input X should be a pandas DataFrame.')\n    \n    REPO_ID = 'julien-c/wine-quality'\n    FILENAME = 'sklearn_model.joblib'\n    \n    model = joblib.load(cached_download(hf_hub_url(REPO_ID, FILENAME)))\n    \n    labels = model.predict(X)\n    \n    return labels\n\n# test_function_code --------------------\n\ndef test_classify_wine_quality():\n    '''\n    Test the function classify_wine_quality.\n    '''\n    data_file = cached_download(hf_hub_url('julien-c/wine-quality', 'winequality-red.csv'))\n    winedf = pd.read_csv(data_file, sep=';')\n    \n    X = winedf.drop(['quality'], axis=1)\n    \n    predicted_labels = classify_wine_quality(X[:3])\n    \n    assert isinstance(predicted_labels, np.ndarray), 'The type of predictions is not correct.'\n    assert len(predicted_labels) == 3, 'The number of predictions is not correct.'\n    \n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_classify_wine_quality()", "function_import": "# function_import --------------------\n\nfrom huggingface_hub import hf_hub_url, cached_download\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n", "function_code": "# function_code --------------------\n\ndef classify_wine_quality(X):\n    '''\n    Classify the quality of wine based on given features.\n    \n    Args:\n        X (pandas.DataFrame): The features of the wine samples.\n    \n    Returns:\n        numpy.ndarray: The predicted labels of the wine samples.\n    \n    Raises:\n        ValueError: If the input is not a pandas DataFrame.\n    '''\n    if not isinstance(X, pd.DataFrame):\n        raise ValueError('Input X should be a pandas DataFrame.')\n    \n    REPO_ID = 'julien-c/wine-quality'\n    FILENAME = 'sklearn_model.joblib'\n    \n    model = joblib.load(cached_download(hf_hub_url(REPO_ID, FILENAME)))\n    \n    labels = model.predict(X)\n    \n    return labels\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_classify_wine_quality():\n    '''\n    Test the function classify_wine_quality.\n    '''\n    data_file = cached_download(hf_hub_url('julien-c/wine-quality', 'winequality-red.csv'))\n    winedf = pd.read_csv(data_file, sep=';')\n    \n    X = winedf.drop(['quality'], axis=1)\n    \n    predicted_labels = classify_wine_quality(X[:3])\n    \n    assert isinstance(predicted_labels, np.ndarray), 'The type of predictions is not correct.'\n    assert len(predicted_labels) == 3, 'The number of predictions is not correct.'\n    \n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_classify_wine_quality()", "instruct": "# function_import --------------------\n\nfrom huggingface_hub import hf_hub_url, cached_download\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n# function_code --------------------\n\ndef classify_wine_quality(X):\n    '''\n    Classify the quality of wine based on given features.\n    \n    Args:\n        X (pandas.DataFrame): The features of the wine samples.\n    \n    Returns:\n        numpy.ndarray: The predicted labels of the wine samples.\n    \n    Raises:\n        ValueError: If the input is not a pandas DataFrame.\n    '''", "answer": "\n    if not isinstance(X, pd.DataFrame):\n        raise ValueError('Input X should be a pandas DataFrame.')\n    \n    REPO_ID = 'julien-c/wine-quality'\n    FILENAME = 'sklearn_model.joblib'\n    \n    model = joblib.load(cached_download(hf_hub_url(REPO_ID, FILENAME)))\n    \n    labels = model.predict(X)\n    \n    return labels\n\n", "prediction": "\n    \n    if not isinstance(X, pd.DataFrame): raise ValueError('Input data must be in a pandas DataFrame')\n    \n    # load model\n    model_url = hf_hub_url(\"datalens-ai\", \"function_import/function_code/model\")\n    model_path = cached_download(model_url)\n    model = joblib.load(model_path) \n    \n    # predict\n    y = model.predict(X)\n    \n    return np.where(y > 5, 'good', 'bad')"}