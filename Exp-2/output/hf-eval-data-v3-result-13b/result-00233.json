{"path": "output/hf-eval-data-v3-valid/f00876_analyze_review.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef analyze_review(review_text: str) -> dict:\n    \"\"\"\n    Analyze the sentiment of a movie review using zero-shot classification.\n\n    Args:\n        review_text (str): The text of the movie review.\n\n    Returns:\n        dict: The result of the zero-shot classification, including the labels and scores.\n    \"\"\"\n    nlp = pipeline('zero-shot-classification', model='valhalla/distilbart-mnli-12-6')\n    result = nlp(review_text, ['positive', 'negative'])\n    return result\n\n# test_function_code --------------------\n\ndef test_analyze_review():\n    \"\"\"\n    Test the analyze_review function.\n    \"\"\"\n    review_positive = 'The movie was great!'\n    review_negative = 'The movie was terrible!'\n    result_positive = analyze_review(review_positive)\n    result_negative = analyze_review(review_negative)\n    assert result_positive['labels'][0] == 'positive', 'Test Case 1 Failed'\n    assert result_negative['labels'][0] == 'negative', 'Test Case 2 Failed'\n    print('All Tests Passed')\n\n# call_test_function_code --------------------\n\ntest_analyze_review()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef analyze_review(review_text: str) -> dict:\n    \"\"\"\n    Analyze the sentiment of a movie review using zero-shot classification.\n\n    Args:\n        review_text (str): The text of the movie review.\n\n    Returns:\n        dict: The result of the zero-shot classification, including the labels and scores.\n    \"\"\"\n    nlp = pipeline('zero-shot-classification', model='valhalla/distilbart-mnli-12-6')\n    result = nlp(review_text, ['positive', 'negative'])\n    return result\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_analyze_review():\n    \"\"\"\n    Test the analyze_review function.\n    \"\"\"\n    review_positive = 'The movie was great!'\n    review_negative = 'The movie was terrible!'\n    result_positive = analyze_review(review_positive)\n    result_negative = analyze_review(review_negative)\n    assert result_positive['labels'][0] == 'positive', 'Test Case 1 Failed'\n    assert result_negative['labels'][0] == 'negative', 'Test Case 2 Failed'\n    print('All Tests Passed')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_analyze_review()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef analyze_review(review_text: str) -> dict:\n    \"\"\"\n    Analyze the sentiment of a movie review using zero-shot classification.\n\n    Args:\n        review_text (str): The text of the movie review.\n\n    Returns:\n        dict: The result of the zero-shot classification, including the labels and scores.\n    \"\"\"", "answer": "\n    nlp = pipeline('zero-shot-classification', model='valhalla/distilbart-mnli-12-6')\n    result = nlp(review_text, ['positive', 'negative'])\n    return result\n\n", "prediction": "\n\n    # Create the pipeline to perform the zero-shot classification.\n    sentiment_classifier = pipeline(\"zero-shot-classification\")\n    \n    # Perform the zero-shot classification using the review text and candidate classes.\n    return sentiment_classifier(review_text, candidate_labels=['negative', 'positive'])\n"}