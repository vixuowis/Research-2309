{"path": "output/hf-eval-data-v3-valid/f00559_extract_invoice_info.py", "content": "# function_import --------------------\n\nfrom transformers import AutoModelForDocumentQuestionAnswering\n\n# function_code --------------------\n\ndef extract_invoice_info(image_path):\n    \"\"\"\n    Extracts specific information from an invoice image using a pre-trained model.\n\n    Args:\n        image_path (str): The path to the invoice image.\n\n    Returns:\n        list: A list of answers to the questions about the total amount due, invoice number, and due date.\n\n    Raises:\n        OSError: If the model is not found in the Hugging Face model hub.\n    \"\"\"\n    model = AutoModelForDocumentQuestionAnswering.from_pretrained('L-oenai/LayoutLMX_pt_question_answer_ocrazure_correct_V15_30_03_2023')\n    inputs, layout = preprocess_image(image_path)\n    questions = ['What is the total amount due?', 'What is the invoice number?', 'What is the due date?']\n    answers = []\n    for question in questions:\n        answer = model(inputs, layout, question)\n        answers.append(answer)\n    return answers\n\n# test_function_code --------------------\n\ndef test_extract_invoice_info():\n    \"\"\"\n    Tests the function extract_invoice_info.\n    \"\"\"\n    image_path = 'test_invoice.jpg'\n    try:\n        answers = extract_invoice_info(image_path)\n        assert isinstance(answers, list), 'The return type should be a list.'\n        assert len(answers) == 3, 'The length of the list should be 3.'\n    except OSError as e:\n        print('The model is not found in the Hugging Face model hub.')\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_extract_invoice_info()", "function_import": "# function_import --------------------\n\nfrom transformers import AutoModelForDocumentQuestionAnswering\n\n", "function_code": "# function_code --------------------\n\ndef extract_invoice_info(image_path):\n    \"\"\"\n    Extracts specific information from an invoice image using a pre-trained model.\n\n    Args:\n        image_path (str): The path to the invoice image.\n\n    Returns:\n        list: A list of answers to the questions about the total amount due, invoice number, and due date.\n\n    Raises:\n        OSError: If the model is not found in the Hugging Face model hub.\n    \"\"\"\n    model = AutoModelForDocumentQuestionAnswering.from_pretrained('L-oenai/LayoutLMX_pt_question_answer_ocrazure_correct_V15_30_03_2023')\n    inputs, layout = preprocess_image(image_path)\n    questions = ['What is the total amount due?', 'What is the invoice number?', 'What is the due date?']\n    answers = []\n    for question in questions:\n        answer = model(inputs, layout, question)\n        answers.append(answer)\n    return answers\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_extract_invoice_info():\n    \"\"\"\n    Tests the function extract_invoice_info.\n    \"\"\"\n    image_path = 'test_invoice.jpg'\n    try:\n        answers = extract_invoice_info(image_path)\n        assert isinstance(answers, list), 'The return type should be a list.'\n        assert len(answers) == 3, 'The length of the list should be 3.'\n    except OSError as e:\n        print('The model is not found in the Hugging Face model hub.')\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_extract_invoice_info()", "instruct": "# function_import --------------------\n\nfrom transformers import AutoModelForDocumentQuestionAnswering\n\n# function_code --------------------\n\ndef extract_invoice_info(image_path):\n    \"\"\"\n    Extracts specific information from an invoice image using a pre-trained model.\n\n    Args:\n        image_path (str): The path to the invoice image.\n\n    Returns:\n        list: A list of answers to the questions about the total amount due, invoice number, and due date.\n\n    Raises:\n        OSError: If the model is not found in the Hugging Face model hub.\n    \"\"\"", "answer": "\n    model = AutoModelForDocumentQuestionAnswering.from_pretrained('L-oenai/LayoutLMX_pt_question_answer_ocrazure_correct_V15_30_03_2023')\n    inputs, layout = preprocess_image(image_path)\n    questions = ['What is the total amount due?', 'What is the invoice number?', 'What is the due date?']\n    answers = []\n    for question in questions:\n        answer = model(inputs, layout, question)\n        answers.append(answer)\n    return answers\n\n", "prediction": "\n    # Load pre-trained model from HF Model Hub.\n    try:\n        model = AutoModelForDocumentQuestionAnswering.from_pretrained(\n            \"mrm8488/bert-span-finetuned-pos\", revision=\"v1\"\n        )\n    except OSError as err:\n        raise type(err)(f\"Make sure you have run 'huggingface-cli login' and are in the same directory \\\n                          as your credentials.json file.\")\n\n    # Load pre-trained tokenizer from HF Model Hub.\n    try:\n        model = AutoModelForDocumentQuestionAnswering.from_pretrained(\n            \"mrm8488/bert-span-finetuned-pos\", revision=\"v1\"\n        )\n    except OSError as err:\n        raise type(err)(f\"Make sure you have run 'huggingface-cli login' and are in the same directory \\\n                          as your credentials.json file.\")\n"}