{"path": "output/hf-eval-data-v3-valid/f00178_text_to_video.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef text_to_video(scene_description: str) -> None:\n    \"\"\"\n    Convert a scene description from a script into a video.\n\n    Args:\n        scene_description (str): The scene description from the script.\n\n    Returns:\n        None\n\n    Raises:\n        Exception: If the model fails to generate a video.\n    \"\"\"\n    try:\n        text_to_video = pipeline('text-to-video', model='ImRma/Brucelee')\n        video_result = text_to_video(scene_description)\n    except Exception as e:\n        print(f'Failed to generate video: {e}')\n\n# test_function_code --------------------\n\ndef test_text_to_video():\n    \"\"\"\n    Test the text_to_video function.\n    \"\"\"\n    scene_description = 'Scene description from the script...'\n    try:\n        text_to_video(scene_description)\n        print('Test passed')\n    except Exception as e:\n        print(f'Test failed: {e}')\n\n# call_test_function_code --------------------\n\ntest_text_to_video()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef text_to_video(scene_description: str) -> None:\n    \"\"\"\n    Convert a scene description from a script into a video.\n\n    Args:\n        scene_description (str): The scene description from the script.\n\n    Returns:\n        None\n\n    Raises:\n        Exception: If the model fails to generate a video.\n    \"\"\"\n    try:\n        text_to_video = pipeline('text-to-video', model='ImRma/Brucelee')\n        video_result = text_to_video(scene_description)\n    except Exception as e:\n        print(f'Failed to generate video: {e}')\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_text_to_video():\n    \"\"\"\n    Test the text_to_video function.\n    \"\"\"\n    scene_description = 'Scene description from the script...'\n    try:\n        text_to_video(scene_description)\n        print('Test passed')\n    except Exception as e:\n        print(f'Test failed: {e}')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_text_to_video()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef text_to_video(scene_description: str) -> None:\n    \"\"\"\n    Convert a scene description from a script into a video.\n\n    Args:\n        scene_description (str): The scene description from the script.\n\n    Returns:\n        None\n\n    Raises:\n        Exception: If the model fails to generate a video.\n    \"\"\"", "answer": "\n    try:\n        text_to_video = pipeline('text-to-video', model='ImRma/Brucelee')\n        video_result = text_to_video(scene_description)\n    except Exception as e:\n        print(f'Failed to generate video: {e}')\n\n", "prediction": "\n    \n    # function_header --------------------\n\n    print(\"::group::Text-to-Video\")\n    print(\"Converting scene description into text-to-video...\\n\")\n\n    try:\n        text2vid = pipeline(\"text-to-image\", model=\"gagan3012/VQGAN-CLIP.1-512x48\") # load the model\n        text2vid(scene_description)\n        print(\"\\nVideo created successfully!\")\n    except Exception as e:\n        print(\"An unexpected error occured while generating video...\\n\" + str(e))\n    \n    print(\"::endgroup::\")\n\n# function_import --------------------"}