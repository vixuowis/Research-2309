{"path": "output/hf-eval-data-v3-valid/f00906_measure_noise_levels.py", "content": "# function_import --------------------\n\nfrom pyannote.audio import Model, Inference\n\n# function_code --------------------\n\ndef measure_noise_levels(audio_file_path: str, access_token: str):\n    \"\"\"\n    Measures noise levels in the environment using a pre-trained model from Hugging Face Transformers.\n\n    Args:\n        audio_file_path (str): The path to the audio file.\n        access_token (str): The access token for Hugging Face Transformers.\n\n    Returns:\n        None. Prints the voice activity detection (VAD), speech-to-noise ratio (SNR), and the C50 room acoustics estimation for each frame in the audio file.\n\n    Raises:\n        FileNotFoundError: If the audio file does not exist.\n        Exception: If there is an error loading the model or processing the audio file.\n    \"\"\"\n    try:\n        model = Model.from_pretrained('pyannote/brouhaha', use_auth_token=access_token)\n        inference = Inference(model)\n        output = inference(audio_file_path)\n        for frame, (vad, snr, c50) in output:\n            t = frame.middle\n            print(f'{t:8.3f} vad={100*vad:.0f}% snr={snr:.0f} c50={c50:.0f}')\n    except FileNotFoundError as fnf_error:\n        print(f'Error: {fnf_error}')\n    except Exception as e:\n        print(f'Error: {e}')\n\n# test_function_code --------------------\n\ndef test_measure_noise_levels():\n    \"\"\"\n    Tests the measure_noise_levels function.\n    \"\"\"\n    # Test with a valid audio file and access token\n    try:\n        measure_noise_levels('valid_audio_file.wav', 'valid_access_token')\n    except Exception as e:\n        print(f'Error: {e}')\n\n    # Test with an invalid audio file\n    try:\n        measure_noise_levels('invalid_audio_file.wav', 'valid_access_token')\n    except FileNotFoundError as fnf_error:\n        assert str(fnf_error) == \"[Errno 2] No such file or directory: 'invalid_audio_file.wav'\", 'Test Failed'\n\n    # Test with an invalid access token\n    try:\n        measure_noise_levels('valid_audio_file.wav', 'invalid_access_token')\n    except Exception as e:\n        assert str(e) == 'Invalid access token', 'Test Failed'\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\nprint(test_measure_noise_levels())", "function_import": "# function_import --------------------\n\nfrom pyannote.audio import Model, Inference\n\n", "function_code": "# function_code --------------------\n\ndef measure_noise_levels(audio_file_path: str, access_token: str):\n    \"\"\"\n    Measures noise levels in the environment using a pre-trained model from Hugging Face Transformers.\n\n    Args:\n        audio_file_path (str): The path to the audio file.\n        access_token (str): The access token for Hugging Face Transformers.\n\n    Returns:\n        None. Prints the voice activity detection (VAD), speech-to-noise ratio (SNR), and the C50 room acoustics estimation for each frame in the audio file.\n\n    Raises:\n        FileNotFoundError: If the audio file does not exist.\n        Exception: If there is an error loading the model or processing the audio file.\n    \"\"\"\n    try:\n        model = Model.from_pretrained('pyannote/brouhaha', use_auth_token=access_token)\n        inference = Inference(model)\n        output = inference(audio_file_path)\n        for frame, (vad, snr, c50) in output:\n            t = frame.middle\n            print(f'{t:8.3f} vad={100*vad:.0f}% snr={snr:.0f} c50={c50:.0f}')\n    except FileNotFoundError as fnf_error:\n        print(f'Error: {fnf_error}')\n    except Exception as e:\n        print(f'Error: {e}')\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_measure_noise_levels():\n    \"\"\"\n    Tests the measure_noise_levels function.\n    \"\"\"\n    # Test with a valid audio file and access token\n    try:\n        measure_noise_levels('valid_audio_file.wav', 'valid_access_token')\n    except Exception as e:\n        print(f'Error: {e}')\n\n    # Test with an invalid audio file\n    try:\n        measure_noise_levels('invalid_audio_file.wav', 'valid_access_token')\n    except FileNotFoundError as fnf_error:\n        assert str(fnf_error) == \"[Errno 2] No such file or directory: 'invalid_audio_file.wav'\", 'Test Failed'\n\n    # Test with an invalid access token\n    try:\n        measure_noise_levels('valid_audio_file.wav', 'invalid_access_token')\n    except Exception as e:\n        assert str(e) == 'Invalid access token', 'Test Failed'\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\nprint(test_measure_noise_levels())", "instruct": "# function_import --------------------\n\nfrom pyannote.audio import Model, Inference\n\n# function_code --------------------\n\ndef measure_noise_levels(audio_file_path: str, access_token: str):\n    \"\"\"\n    Measures noise levels in the environment using a pre-trained model from Hugging Face Transformers.\n\n    Args:\n        audio_file_path (str): The path to the audio file.\n        access_token (str): The access token for Hugging Face Transformers.\n\n    Returns:\n        None. Prints the voice activity detection (VAD), speech-to-noise ratio (SNR), and the C50 room acoustics estimation for each frame in the audio file.\n\n    Raises:\n        FileNotFoundError: If the audio file does not exist.\n        Exception: If there is an error loading the model or processing the audio file.\n    \"\"\"", "answer": "\n    try:\n        model = Model.from_pretrained('pyannote/brouhaha', use_auth_token=access_token)\n        inference = Inference(model)\n        output = inference(audio_file_path)\n        for frame, (vad, snr, c50) in output:\n            t = frame.middle\n            print(f'{t:8.3f} vad={100*vad:.0f}% snr={snr:.0f} c50={c50:.0f}')\n    except FileNotFoundError as fnf_error:\n        print(f'Error: {fnf_error}')\n    except Exception as e:\n        print(f'Error: {e}')\n\n", "prediction": "\n\n    # function_code --------------------\n    \n    from pyannote.audio import Model, Inference\n    import soundfile as sf\n    import matplotlib.pyplot as plt\n    import numpy as np\n    from pathlib import Path\n    \n    try: \n        model = Model.from_pretrained(\"pyannote/voice-activity-detection\", \n                                      access_token=access_token)  \n        \n    except Exception as e:\n        raise Exception(f\"Loading the pre-trained 'Voice activity detection' model from Hugging Face Transformers failed: {e}\")\n    \n    try:\n        data, sampleRate = sf.read(audio_file_path)\n        \n    except FileNotFoundError as e:\n        raise FileNotFoundError(\"Audio file not found.\")\n    \n    try: \n        inference: Inference = model(data)\n        \n    except Exception as e:\n        raise Exception(f\"Processing audio file failed with error {e}\")\n        \n    # function_code --------------------\n    \n    print(\"Time\", \"\\t\\t\\t\", \"Voice activity (%)\", \"\\t\\t\\t\", \n          \"Speech-to-noise ratio (SNR)\", \"\\t\", \"C50 room acoustics estimation\")    \n        \n    # function_code --------------------\n        \n    for time, vad in zip(inference.helper['timeline'], inference):    \n        print(f\"{time:06.2f}\", \"\\t\\t\", f\"{vad[1]*100:5.1f}\", \n              \"\\t\\t\\t\", np.round(vad[0], decimals=2), \n              \"\\t\\t\", vad[2])"}