{"path": "output/hf-eval-data-v3-valid/f00310_generate_query.py", "content": "# function_import --------------------\n\nfrom transformers import T5Tokenizer, T5ForConditionalGeneration\n\n# function_code --------------------\n\ndef generate_query(document):\n    \"\"\"\n    Generate a query from a given document using a pre-trained T5 model.\n\n    Args:\n        document (str): The document from which to generate the query.\n\n    Returns:\n        str: The generated query.\n\n    Raises:\n        ValueError: If the document is not a string or is empty.\n    \"\"\"\n    if not isinstance(document, str) or not document:\n        raise ValueError('Document must be a non-empty string.')\n\n    tokenizer = T5Tokenizer.from_pretrained('castorini/doc2query-t5-base-msmarco')\n    model = T5ForConditionalGeneration.from_pretrained('castorini/doc2query-t5-base-msmarco')\n\n    inputs = tokenizer.encode('generate query: ' + document, return_tensors='pt', max_length=512, truncation=True)\n    outputs = model.generate(inputs, num_return_sequences=1, max_length=40)\n\n    return tokenizer.decode(outputs[0], skip_special_tokens=True)\n\n# test_function_code --------------------\n\ndef test_generate_query():\n    \"\"\"\n    Test the generate_query function.\n    \"\"\"\n    # Test with a valid document\n    document = 'This is a test document.'\n    query = generate_query(document)\n    assert isinstance(query, str), 'Query must be a string.'\n\n    # Test with an empty document\n    try:\n        generate_query('')\n    except ValueError as e:\n        assert str(e) == 'Document must be a non-empty string.', 'Exception message must be correct.'\n\n    # Test with a non-string document\n    try:\n        generate_query(None)\n    except ValueError as e:\n        assert str(e) == 'Document must be a non-empty string.', 'Exception message must be correct.'\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_generate_query()", "function_import": "# function_import --------------------\n\nfrom transformers import T5Tokenizer, T5ForConditionalGeneration\n\n", "function_code": "# function_code --------------------\n\ndef generate_query(document):\n    \"\"\"\n    Generate a query from a given document using a pre-trained T5 model.\n\n    Args:\n        document (str): The document from which to generate the query.\n\n    Returns:\n        str: The generated query.\n\n    Raises:\n        ValueError: If the document is not a string or is empty.\n    \"\"\"\n    if not isinstance(document, str) or not document:\n        raise ValueError('Document must be a non-empty string.')\n\n    tokenizer = T5Tokenizer.from_pretrained('castorini/doc2query-t5-base-msmarco')\n    model = T5ForConditionalGeneration.from_pretrained('castorini/doc2query-t5-base-msmarco')\n\n    inputs = tokenizer.encode('generate query: ' + document, return_tensors='pt', max_length=512, truncation=True)\n    outputs = model.generate(inputs, num_return_sequences=1, max_length=40)\n\n    return tokenizer.decode(outputs[0], skip_special_tokens=True)\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_query():\n    \"\"\"\n    Test the generate_query function.\n    \"\"\"\n    # Test with a valid document\n    document = 'This is a test document.'\n    query = generate_query(document)\n    assert isinstance(query, str), 'Query must be a string.'\n\n    # Test with an empty document\n    try:\n        generate_query('')\n    except ValueError as e:\n        assert str(e) == 'Document must be a non-empty string.', 'Exception message must be correct.'\n\n    # Test with a non-string document\n    try:\n        generate_query(None)\n    except ValueError as e:\n        assert str(e) == 'Document must be a non-empty string.', 'Exception message must be correct.'\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_generate_query()", "instruct": "# function_import --------------------\n\nfrom transformers import T5Tokenizer, T5ForConditionalGeneration\n\n# function_code --------------------\n\ndef generate_query(document):\n    \"\"\"\n    Generate a query from a given document using a pre-trained T5 model.\n\n    Args:\n        document (str): The document from which to generate the query.\n\n    Returns:\n        str: The generated query.\n\n    Raises:\n        ValueError: If the document is not a string or is empty.\n    \"\"\"", "answer": "\n    if not isinstance(document, str) or not document:\n        raise ValueError('Document must be a non-empty string.')\n\n    tokenizer = T5Tokenizer.from_pretrained('castorini/doc2query-t5-base-msmarco')\n    model = T5ForConditionalGeneration.from_pretrained('castorini/doc2query-t5-base-msmarco')\n\n    inputs = tokenizer.encode('generate query: ' + document, return_tensors='pt', max_length=512, truncation=True)\n    outputs = model.generate(inputs, num_return_sequences=1, max_length=40)\n\n    return tokenizer.decode(outputs[0], skip_special_tokens=True)\n\n", "prediction": "\n    \n    if type(document) != str or len(document) == 0:\n        raise ValueError(\"Document must be a non-empty string.\")\n        \n    tokenizer = T5Tokenizer.from_pretrained('t5-base')\n    model = T5ForConditionalGeneration.from_pretrained('t5-base', return_dict=True)\n    \n    document = \"summarize: \" + document\n    \n    encoding = tokenizer(document, return_tensors=\"pt\")\n    input_ids, attention_masks = encoding[\"input_ids\"], encoding[\"attention_mask\"]\n        \n    outputs = model.generate(\n        input_ids=input_ids, \n        attention_mask=attention_masks,\n        return_dict_in_generate=True,\n        output_scores=True,\n        num_beams=10,\n        num_return_sequences=25,\n    )\n    \n    results = []\n    for i in range(len(outputs[\"sequences\"])):\n        \n        query = tokenizer.decode(outputs[\"sequences\"][i], skip_special_tokens=True)\n            \n        if len(query) > 0:\n            results.append((query, outputs[\"scores\"][i].item()))\n    \n    return sorted(results, key = lambda x : x[1], reverse=True)[0][0]\n\n# function_call --------------------\n\nwith open('./data/documents/doc-1.txt', 'r') as file:\n    document = file.read()\n    \nprint(generate_query(document))"}