{"path": "output/hf-eval-data-v3-valid/f00554_detect_intruder.py", "content": "# function_import --------------------\n\nfrom transformers import BlipProcessor, BlipForQuestionAnswering\nfrom PIL import Image\nimport requests\nimport os\n\n# function_code --------------------\n\ndef detect_intruder(image_path: str, question: str = 'Who entered the room?') -> str:\n    \"\"\"\n    Detect intruder in a room using a pretrained model from Hugging Face Transformers.\n\n    Args:\n        image_path (str): The path to the image file.\n        question (str): The question to ask the model. Default is 'Who entered the room?'.\n\n    Returns:\n        str: The answer generated by the model.\n\n    Raises:\n        OSError: If there is not enough disk space to download the model.\n    \"\"\"\n    processor = BlipProcessor.from_pretrained('Salesforce/blip-vqa-capfilt-large')\n    model = BlipForQuestionAnswering.from_pretrained('Salesforce/blip-vqa-capfilt-large')\n\n    cctv_image = Image.open(image_path)\n\n    inputs = processor(cctv_image, question, return_tensors='pt')\n    answer = model.generate(**inputs)\n    return processor.decode(answer[0], skip_special_tokens=True)\n\n# test_function_code --------------------\n\ndef test_detect_intruder():\n    \"\"\"Test the detect_intruder function.\"\"\"\n    image_url = 'https://placekitten.com/200/300'\n    image_path = 'test_image.jpg'\n    with open(image_path, 'wb') as f:\n        f.write(requests.get(image_url).content)\n\n    try:\n        answer = detect_intruder(image_path)\n        assert isinstance(answer, str)\n    finally:\n        os.remove(image_path)\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_detect_intruder()", "function_import": "# function_import --------------------\n\nfrom transformers import BlipProcessor, BlipForQuestionAnswering\nfrom PIL import Image\nimport requests\nimport os\n\n", "function_code": "# function_code --------------------\n\ndef detect_intruder(image_path: str, question: str = 'Who entered the room?') -> str:\n    \"\"\"\n    Detect intruder in a room using a pretrained model from Hugging Face Transformers.\n\n    Args:\n        image_path (str): The path to the image file.\n        question (str): The question to ask the model. Default is 'Who entered the room?'.\n\n    Returns:\n        str: The answer generated by the model.\n\n    Raises:\n        OSError: If there is not enough disk space to download the model.\n    \"\"\"\n    processor = BlipProcessor.from_pretrained('Salesforce/blip-vqa-capfilt-large')\n    model = BlipForQuestionAnswering.from_pretrained('Salesforce/blip-vqa-capfilt-large')\n\n    cctv_image = Image.open(image_path)\n\n    inputs = processor(cctv_image, question, return_tensors='pt')\n    answer = model.generate(**inputs)\n    return processor.decode(answer[0], skip_special_tokens=True)\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_detect_intruder():\n    \"\"\"Test the detect_intruder function.\"\"\"\n    image_url = 'https://placekitten.com/200/300'\n    image_path = 'test_image.jpg'\n    with open(image_path, 'wb') as f:\n        f.write(requests.get(image_url).content)\n\n    try:\n        answer = detect_intruder(image_path)\n        assert isinstance(answer, str)\n    finally:\n        os.remove(image_path)\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_detect_intruder()", "instruct": "# function_import --------------------\n\nfrom transformers import BlipProcessor, BlipForQuestionAnswering\nfrom PIL import Image\nimport requests\nimport os\n\n# function_code --------------------\n\ndef detect_intruder(image_path: str, question: str = 'Who entered the room?') -> str:\n    \"\"\"\n    Detect intruder in a room using a pretrained model from Hugging Face Transformers.\n\n    Args:\n        image_path (str): The path to the image file.\n        question (str): The question to ask the model. Default is 'Who entered the room?'.\n\n    Returns:\n        str: The answer generated by the model.\n\n    Raises:\n        OSError: If there is not enough disk space to download the model.\n    \"\"\"", "answer": "\n    processor = BlipProcessor.from_pretrained('Salesforce/blip-vqa-capfilt-large')\n    model = BlipForQuestionAnswering.from_pretrained('Salesforce/blip-vqa-capfilt-large')\n\n    cctv_image = Image.open(image_path)\n\n    inputs = processor(cctv_image, question, return_tensors='pt')\n    answer = model.generate(**inputs)\n    return processor.decode(answer[0], skip_special_tokens=True)\n\n", "prediction": "\n\n    # Setup --------------------\n\n    if not os.path.exists('models'):\n        os.mkdir('models')\n    \n    if not os.path.isfile(os.path.join('models', 'blip-2-intruder-detector.pt')):\n        try:\n            url = 'https://github.com/gabrieletiboni/blipp-it-demo/releases/download/v1.0.0/blip-2-intruder-detector.pt'\n            response = requests.get(url)\n        except OSError:\n            raise OSError('Not enough disk space to download the model')\n        \n        with open(os.path.join('models', 'blip-2-intruder-detector.pt'), 'wb') as f:\n            f.write(response.content)\n    \n    # Load Model --------------------\n\n    blip_model = BlipForQuestionAnswering.from_pretrained('models/blip-2-intruder-detector.pt')\n    processor = BlipProcessor.from_pretrained('models/blip-2-intruder-detector.pt')\n    \n    # Load Image --------------------\n    \n    img = Image.open(image_path)\n    \n    # Get Answer --------------------\n    \n    inputs = processor(text=question, images=img, return_tensors='pt', padding=True, truncation=True)\n    answer = blip_model(**inputs).logits.argmax()\n    \n    return question + ' ' + answer"}