{"path": "output/hf-eval-data-v3-valid/f00567_create_artistic_variations.py", "content": "# function_import --------------------\n\nfrom diffusers import StableDiffusionImageVariationPipeline\nfrom PIL import Image\nfrom torchvision.transforms import Compose, ToTensor, Resize, InterpolationMode, Normalize\n\n# function_code --------------------\n\ndef create_artistic_variations(image_path: str, output_path: str) -> None:\n    '''\n    Create artistic variations of an input image using StableDiffusionImageVariationPipeline.\n\n    Args:\n        image_path (str): The path to the input image.\n        output_path (str): The path to save the output image.\n\n    Returns:\n        None\n    '''\n    sd_pipe = StableDiffusionImageVariationPipeline.from_pretrained('lambdalabs/sd-image-variations-diffusers', revision='v2.0')\n    im = Image.open(image_path)\n    tform = Compose([\n        ToTensor(),\n        Resize((224, 224), interpolation=InterpolationMode.BICUBIC, antialias=False),\n        Normalize([0.48145466, 0.4578275, 0.40821073], [0.26862954, 0.26130258, 0.27577711]),\n    ])\n    inp = tform(im).unsqueeze(0)\n    out = sd_pipe(inp, guidance_scale=3)\n    out['images'][0].save(output_path)\n\n# test_function_code --------------------\n\ndef test_create_artistic_variations():\n    '''\n    Test the function create_artistic_variations.\n    '''\n    import os\n    import requests\n    from PIL import Image\n    from io import BytesIO\n\n    # Download a test image\n    url = 'https://placekitten.com/200/300'\n    response = requests.get(url)\n    img = Image.open(BytesIO(response.content))\n    img.save('test.jpg')\n\n    # Apply the function\n    create_artistic_variations('test.jpg', 'output.jpg')\n\n    # Check the output\n    assert os.path.exists('output.jpg'), 'Output image does not exist.'\n\n    # Clean up\n    os.remove('test.jpg')\n    os.remove('output.jpg')\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_create_artistic_variations()", "function_import": "# function_import --------------------\n\nfrom diffusers import StableDiffusionImageVariationPipeline\nfrom PIL import Image\nfrom torchvision.transforms import Compose, ToTensor, Resize, InterpolationMode, Normalize\n\n", "function_code": "# function_code --------------------\n\ndef create_artistic_variations(image_path: str, output_path: str) -> None:\n    '''\n    Create artistic variations of an input image using StableDiffusionImageVariationPipeline.\n\n    Args:\n        image_path (str): The path to the input image.\n        output_path (str): The path to save the output image.\n\n    Returns:\n        None\n    '''\n    sd_pipe = StableDiffusionImageVariationPipeline.from_pretrained('lambdalabs/sd-image-variations-diffusers', revision='v2.0')\n    im = Image.open(image_path)\n    tform = Compose([\n        ToTensor(),\n        Resize((224, 224), interpolation=InterpolationMode.BICUBIC, antialias=False),\n        Normalize([0.48145466, 0.4578275, 0.40821073], [0.26862954, 0.26130258, 0.27577711]),\n    ])\n    inp = tform(im).unsqueeze(0)\n    out = sd_pipe(inp, guidance_scale=3)\n    out['images'][0].save(output_path)\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_create_artistic_variations():\n    '''\n    Test the function create_artistic_variations.\n    '''\n    import os\n    import requests\n    from PIL import Image\n    from io import BytesIO\n\n    # Download a test image\n    url = 'https://placekitten.com/200/300'\n    response = requests.get(url)\n    img = Image.open(BytesIO(response.content))\n    img.save('test.jpg')\n\n    # Apply the function\n    create_artistic_variations('test.jpg', 'output.jpg')\n\n    # Check the output\n    assert os.path.exists('output.jpg'), 'Output image does not exist.'\n\n    # Clean up\n    os.remove('test.jpg')\n    os.remove('output.jpg')\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_create_artistic_variations()", "instruct": "# function_import --------------------\n\nfrom diffusers import StableDiffusionImageVariationPipeline\nfrom PIL import Image\nfrom torchvision.transforms import Compose, ToTensor, Resize, InterpolationMode, Normalize\n\n# function_code --------------------\n\ndef create_artistic_variations(image_path: str, output_path: str) -> None:\n    '''\n    Create artistic variations of an input image using StableDiffusionImageVariationPipeline.\n\n    Args:\n        image_path (str): The path to the input image.\n        output_path (str): The path to save the output image.\n\n    Returns:\n        None\n    '''", "answer": "\n    sd_pipe = StableDiffusionImageVariationPipeline.from_pretrained('lambdalabs/sd-image-variations-diffusers', revision='v2.0')\n    im = Image.open(image_path)\n    tform = Compose([\n        ToTensor(),\n        Resize((224, 224), interpolation=InterpolationMode.BICUBIC, antialias=False),\n        Normalize([0.48145466, 0.4578275, 0.40821073], [0.26862954, 0.26130258, 0.27577711]),\n    ])\n    inp = tform(im).unsqueeze(0)\n    out = sd_pipe(inp, guidance_scale=3)\n    out['images'][0].save(output_path)\n\n", "prediction": "\n\n    # load model and set device\n    device = 'cuda' if torch.cuda.is_available() else 'cpu'\n    sdipvp = StableDiffusionImageVariationPipeline(device=device).to(device)\n    \n    # load image\n    pil_image = Image.open(image_path)\n    pil_image = pil_image.convert('RGB')\n    original_size = (pil_image.width, pil_image.height)\n    \n    # preprocess image and create target tensor\n    transforms = Compose([\n        Resize((512, 512), interpolation=InterpolationMode.BICUBIC),\n        ToTensor(),\n        Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]), \n    ])\n    input_tensor = transforms(pil_image)[:3].unsqueeze(dim=0).to(device)\n    target_tensor = input_tensor.clone()\n    \n    # run inference and save the output image\n    sdipvp(input_tensor, target_tensor)\n    pil_output = transforms(sdipvp.prediction[-1].clamp(min=-1., max=1.).detach().cpu())[0] \\\n                 .permute((1, 2, 0)) * 0.5 + 0.5\n    \n    # resize and save image (this is required to get a good looking image)\n    pil_output = Image.fromarray(np.uint8(pil_output * 256.)).resize(original_size, resample=Image.BICUBIC)\n    pil_output.save(output_path)\n    \n# main --------------------\nif __name__ == '__main__':\n    # create_artistic_variations('image_1024x768.jpg', 'output_1024x768.png')\n    # create_artistic_variations('image_512x38"}