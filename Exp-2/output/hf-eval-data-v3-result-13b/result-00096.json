{"path": "output/hf-eval-data-v3-valid/f00415_get_sentence_similarity.py", "content": "# function_import --------------------\n\nfrom sentence_transformers import SentenceTransformer\nimport numpy as np\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# function_code --------------------\n\ndef get_sentence_similarity(sentences):\n    \"\"\"\n    This function takes a list of sentences and returns a similarity matrix.\n    The similarity is calculated based on the embeddings generated by the SentenceTransformer model.\n\n    Args:\n        sentences (list): A list of sentences for which the similarity is to be calculated.\n\n    Returns:\n        np.array: A 2D numpy array representing the similarity matrix.\n    \"\"\"\n    model = SentenceTransformer('nikcheerla/nooks-amd-detection-v2-full')\n    embeddings = model.encode(sentences)\n    similarity_matrix = cosine_similarity(embeddings)\n    return similarity_matrix\n\n# test_function_code --------------------\n\ndef test_get_sentence_similarity():\n    sentences = ['This is a test sentence', 'This is another test sentence', 'This is yet another test sentence']\n    similarity_matrix = get_sentence_similarity(sentences)\n    assert isinstance(similarity_matrix, np.ndarray), 'The result should be a numpy array'\n    assert similarity_matrix.shape == (len(sentences), len(sentences)), 'The shape of the similarity matrix should be (n, n) where n is the number of sentences'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_get_sentence_similarity()", "function_import": "# function_import --------------------\n\nfrom sentence_transformers import SentenceTransformer\nimport numpy as np\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n", "function_code": "# function_code --------------------\n\ndef get_sentence_similarity(sentences):\n    \"\"\"\n    This function takes a list of sentences and returns a similarity matrix.\n    The similarity is calculated based on the embeddings generated by the SentenceTransformer model.\n\n    Args:\n        sentences (list): A list of sentences for which the similarity is to be calculated.\n\n    Returns:\n        np.array: A 2D numpy array representing the similarity matrix.\n    \"\"\"\n    model = SentenceTransformer('nikcheerla/nooks-amd-detection-v2-full')\n    embeddings = model.encode(sentences)\n    similarity_matrix = cosine_similarity(embeddings)\n    return similarity_matrix\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_get_sentence_similarity():\n    sentences = ['This is a test sentence', 'This is another test sentence', 'This is yet another test sentence']\n    similarity_matrix = get_sentence_similarity(sentences)\n    assert isinstance(similarity_matrix, np.ndarray), 'The result should be a numpy array'\n    assert similarity_matrix.shape == (len(sentences), len(sentences)), 'The shape of the similarity matrix should be (n, n) where n is the number of sentences'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_get_sentence_similarity()", "instruct": "# function_import --------------------\n\nfrom sentence_transformers import SentenceTransformer\nimport numpy as np\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# function_code --------------------\n\ndef get_sentence_similarity(sentences):\n    \"\"\"\n    This function takes a list of sentences and returns a similarity matrix.\n    The similarity is calculated based on the embeddings generated by the SentenceTransformer model.\n\n    Args:\n        sentences (list): A list of sentences for which the similarity is to be calculated.\n\n    Returns:\n        np.array: A 2D numpy array representing the similarity matrix.\n    \"\"\"", "answer": "\n    model = SentenceTransformer('nikcheerla/nooks-amd-detection-v2-full')\n    embeddings = model.encode(sentences)\n    similarity_matrix = cosine_similarity(embeddings)\n    return similarity_matrix\n\n", "prediction": "\n    sbert_model = SentenceTransformer('all-MiniLM-L6-v2')\n\n    sentence_embeddings = sbert_model.encode(sentences)\n\n    # Calculate cosine similarities\n    return cosine_similarity(sentence_embeddings, sentence_embeddings)"}