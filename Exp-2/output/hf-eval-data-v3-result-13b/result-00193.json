{"path": "output/hf-eval-data-v3-valid/f00755_generate_butterfly_image.py", "content": "# function_import --------------------\n\nfrom diffusers import DDPMPipeline\n\n# function_code --------------------\n\ndef generate_butterfly_image(model_id: str = 'clp/sd-class-butterflies-32') -> None:\n    \"\"\"\n    Generate a butterfly image using a pre-trained model from Hugging Face Transformers.\n\n    Args:\n        model_id (str): The id of the pre-trained model. Default is 'clp/sd-class-butterflies-32'.\n\n    Returns:\n        None. The function saves the generated image to the current directory.\n\n    Raises:\n        ModuleNotFoundError: If the diffusers package is not installed.\n    \"\"\"\n    pipeline = DDPMPipeline.from_pretrained(model_id)\n    image = pipeline().images[0]\n    image.save('cute_butterfly_image.png')\n\n# test_function_code --------------------\n\ndef test_generate_butterfly_image():\n    \"\"\"\n    Test the generate_butterfly_image function.\n    \"\"\"\n    try:\n        generate_butterfly_image()\n        print('Test passed.')\n    except Exception as e:\n        print(f'Test failed. {str(e)}')\n\n# call_test_function_code --------------------\n\ntest_generate_butterfly_image()", "function_import": "# function_import --------------------\n\nfrom diffusers import DDPMPipeline\n\n", "function_code": "# function_code --------------------\n\ndef generate_butterfly_image(model_id: str = 'clp/sd-class-butterflies-32') -> None:\n    \"\"\"\n    Generate a butterfly image using a pre-trained model from Hugging Face Transformers.\n\n    Args:\n        model_id (str): The id of the pre-trained model. Default is 'clp/sd-class-butterflies-32'.\n\n    Returns:\n        None. The function saves the generated image to the current directory.\n\n    Raises:\n        ModuleNotFoundError: If the diffusers package is not installed.\n    \"\"\"\n    pipeline = DDPMPipeline.from_pretrained(model_id)\n    image = pipeline().images[0]\n    image.save('cute_butterfly_image.png')\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_butterfly_image():\n    \"\"\"\n    Test the generate_butterfly_image function.\n    \"\"\"\n    try:\n        generate_butterfly_image()\n        print('Test passed.')\n    except Exception as e:\n        print(f'Test failed. {str(e)}')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_generate_butterfly_image()", "instruct": "# function_import --------------------\n\nfrom diffusers import DDPMPipeline\n\n# function_code --------------------\n\ndef generate_butterfly_image(model_id: str = 'clp/sd-class-butterflies-32') -> None:\n    \"\"\"\n    Generate a butterfly image using a pre-trained model from Hugging Face Transformers.\n\n    Args:\n        model_id (str): The id of the pre-trained model. Default is 'clp/sd-class-butterflies-32'.\n\n    Returns:\n        None. The function saves the generated image to the current directory.\n\n    Raises:\n        ModuleNotFoundError: If the diffusers package is not installed.\n    \"\"\"", "answer": "\n    pipeline = DDPMPipeline.from_pretrained(model_id)\n    image = pipeline().images[0]\n    image.save('cute_butterfly_image.png')\n\n", "prediction": "\n    try:\n        import torch  # noqa F401\n    except ModuleNotFoundError as e:\n        print('The \"diffusers\" package is required to use this function. Try pip install git+https://github.com/johngullberg/pytorch-differentiable-parameterization')\n        raise(e)\n\n    model = DDPMPipeline.load(model_id, verbose=False)\n\n    image = model.generate()\n\n    # save the generated image\n    image.save('butterfly.jpg', quality=100)\n"}