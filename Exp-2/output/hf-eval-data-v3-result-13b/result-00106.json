{"path": "output/hf-eval-data-v3-valid/f00445_predict_electricity_consumption.py", "content": "# function_import --------------------\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\nimport pandas as pd\nimport numpy as np\n\n# function_code --------------------\n\ndef predict_electricity_consumption(data):\n    '''\n    Predict the electricity consumption of a residential area based on historical data using RandomForestRegressor.\n\n    Args:\n        data (pd.DataFrame): The historical data with features and target.\n\n    Returns:\n        float: The mean squared error of the prediction.\n    '''\n    # Assume data is a Pandas DataFrame, and X is the feature set, y is the target\n    X = data.drop('electricity_consumption', axis=1)\n    y = data['electricity_consumption']\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    scaler = StandardScaler()\n    X_train = scaler.fit_transform(X_train)\n    X_test = scaler.transform(X_test)\n\n    model = RandomForestRegressor(max_depth=10, n_estimators=50, random_state=59)\n    model.fit(X_train, y_train)\n\n    predictions = model.predict(X_test)\n    mse = mean_squared_error(y_test, predictions)\n    return mse\n\n# test_function_code --------------------\n\ndef test_predict_electricity_consumption():\n    '''\n    Test the function predict_electricity_consumption.\n    '''\n    # Create a random dataset for testing\n    data = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))\n    data['electricity_consumption'] = np.random.randint(0,100,size=(100, 1))\n\n    # Call the function with the test dataset\n    mse = predict_electricity_consumption(data)\n\n    # Since we are using random data, we can't predict the exact output.\n    # So, we just check if the output is a float number.\n    assert isinstance(mse, float), 'The result should be a float.'\n\n    print('All Tests Passed')\n\n# call_test_function_code --------------------\n\ntest_predict_electricity_consumption()", "function_import": "# function_import --------------------\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\nimport pandas as pd\nimport numpy as np\n\n", "function_code": "# function_code --------------------\n\ndef predict_electricity_consumption(data):\n    '''\n    Predict the electricity consumption of a residential area based on historical data using RandomForestRegressor.\n\n    Args:\n        data (pd.DataFrame): The historical data with features and target.\n\n    Returns:\n        float: The mean squared error of the prediction.\n    '''\n    # Assume data is a Pandas DataFrame, and X is the feature set, y is the target\n    X = data.drop('electricity_consumption', axis=1)\n    y = data['electricity_consumption']\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    scaler = StandardScaler()\n    X_train = scaler.fit_transform(X_train)\n    X_test = scaler.transform(X_test)\n\n    model = RandomForestRegressor(max_depth=10, n_estimators=50, random_state=59)\n    model.fit(X_train, y_train)\n\n    predictions = model.predict(X_test)\n    mse = mean_squared_error(y_test, predictions)\n    return mse\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_predict_electricity_consumption():\n    '''\n    Test the function predict_electricity_consumption.\n    '''\n    # Create a random dataset for testing\n    data = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))\n    data['electricity_consumption'] = np.random.randint(0,100,size=(100, 1))\n\n    # Call the function with the test dataset\n    mse = predict_electricity_consumption(data)\n\n    # Since we are using random data, we can't predict the exact output.\n    # So, we just check if the output is a float number.\n    assert isinstance(mse, float), 'The result should be a float.'\n\n    print('All Tests Passed')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_predict_electricity_consumption()", "instruct": "# function_import --------------------\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\nimport pandas as pd\nimport numpy as np\n\n# function_code --------------------\n\ndef predict_electricity_consumption(data):\n    '''\n    Predict the electricity consumption of a residential area based on historical data using RandomForestRegressor.\n\n    Args:\n        data (pd.DataFrame): The historical data with features and target.\n\n    Returns:\n        float: The mean squared error of the prediction.\n    '''", "answer": "\n    # Assume data is a Pandas DataFrame, and X is the feature set, y is the target\n    X = data.drop('electricity_consumption', axis=1)\n    y = data['electricity_consumption']\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    scaler = StandardScaler()\n    X_train = scaler.fit_transform(X_train)\n    X_test = scaler.transform(X_test)\n\n    model = RandomForestRegressor(max_depth=10, n_estimators=50, random_state=59)\n    model.fit(X_train, y_train)\n\n    predictions = model.predict(X_test)\n    mse = mean_squared_error(y_test, predictions)\n    return mse\n\n", "prediction": "\n\n    X = data.drop(columns=['Electricity'])\n    y = data[['Electricity']]\n\n    # split to train/test dataset\n    X_train, X_test, y_train, y_test = train_test_split(X, y)\n\n    # scale features\n    scaler = StandardScaler()\n    X_train = scaler.fit_transform(X_train)\n    X_test = scaler.transform(X_test)\n\n    # fit random forest model on training data\n    rf_regressor = RandomForestRegressor(n_estimators=10, random_state=42)\n    rf_regressor.fit(X_train, y_train)\n    \n    # predict test dataset\n    y_pred = rf_regressor.predict(X_test)\n    \n    # evaluate performance of the prediction\n    mse = mean_squared_error(y_test, y_pred)\n\n    return mse"}