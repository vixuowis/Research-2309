{"path": "output/hf-eval-data-v3-valid/f00737_estimate_depth.py", "content": "# function_import --------------------\n\nfrom transformers import AutoModel\nfrom PIL import Image\nimport torch\n\n# function_code --------------------\n\ndef estimate_depth(image_path):\n    \"\"\"\n    Estimate the depth of elements in an architectural design image.\n\n    Args:\n        image_path (str): Path to the image file.\n\n    Returns:\n        torch.Tensor: The estimated depth of elements in the image.\n\n    Raises:\n        OSError: If the image file cannot be opened.\n    \"\"\"\n    model = AutoModel.from_pretrained('sayakpaul/glpn-nyu-finetuned-diode-221116-104421')\n    image = Image.open(image_path)\n    tensor_image = torch.tensor(image).unsqueeze(0)  # convert image to tensor\n    depth_pred = model(tensor_image)  # estimate depth of elements in the image\n    return depth_pred\n\n# test_function_code --------------------\n\ndef test_estimate_depth():\n    \"\"\"\n    Test the function estimate_depth.\n    \"\"\"\n    sample_image_path = 'https://placekitten.com/200/300'\n    try:\n        depth_pred = estimate_depth(sample_image_path)\n        assert isinstance(depth_pred, torch.Tensor), 'The output should be a torch.Tensor'\n    except OSError as e:\n        print(f'Error: {e}')\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_estimate_depth()", "function_import": "# function_import --------------------\n\nfrom transformers import AutoModel\nfrom PIL import Image\nimport torch\n\n", "function_code": "# function_code --------------------\n\ndef estimate_depth(image_path):\n    \"\"\"\n    Estimate the depth of elements in an architectural design image.\n\n    Args:\n        image_path (str): Path to the image file.\n\n    Returns:\n        torch.Tensor: The estimated depth of elements in the image.\n\n    Raises:\n        OSError: If the image file cannot be opened.\n    \"\"\"\n    model = AutoModel.from_pretrained('sayakpaul/glpn-nyu-finetuned-diode-221116-104421')\n    image = Image.open(image_path)\n    tensor_image = torch.tensor(image).unsqueeze(0)  # convert image to tensor\n    depth_pred = model(tensor_image)  # estimate depth of elements in the image\n    return depth_pred\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_estimate_depth():\n    \"\"\"\n    Test the function estimate_depth.\n    \"\"\"\n    sample_image_path = 'https://placekitten.com/200/300'\n    try:\n        depth_pred = estimate_depth(sample_image_path)\n        assert isinstance(depth_pred, torch.Tensor), 'The output should be a torch.Tensor'\n    except OSError as e:\n        print(f'Error: {e}')\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_estimate_depth()", "instruct": "# function_import --------------------\n\nfrom transformers import AutoModel\nfrom PIL import Image\nimport torch\n\n# function_code --------------------\n\ndef estimate_depth(image_path):\n    \"\"\"\n    Estimate the depth of elements in an architectural design image.\n\n    Args:\n        image_path (str): Path to the image file.\n\n    Returns:\n        torch.Tensor: The estimated depth of elements in the image.\n\n    Raises:\n        OSError: If the image file cannot be opened.\n    \"\"\"", "answer": "\n    model = AutoModel.from_pretrained('sayakpaul/glpn-nyu-finetuned-diode-221116-104421')\n    image = Image.open(image_path)\n    tensor_image = torch.tensor(image).unsqueeze(0)  # convert image to tensor\n    depth_pred = model(tensor_image)  # estimate depth of elements in the image\n    return depth_pred\n\n", "prediction": "\n    # open and resize image\n    img = Image.open(image_path)\n    if max(img.size) > 512:\n        factor = 512/max(img.size)\n        new_size = (int(factor*img.size[0]), int(factor*img.size[1]))\n        img = img.resize(new_size, Image.ANTIALIAS)\n    img = torch.from_numpy(np.array(img)).float().permute(2, 0, 1).unsqueeze(0)/255\n    \n    # load model and predict depth\n    model = AutoModel.from_pretrained(\"mczielinski/unet-depth-estimation\")\n    model.eval()\n    if torch.cuda.is_available():\n        img, model = img.to('cuda'), model.to('cuda')\n    with torch.no_grad():\n        pred = (model(img) - 0.5)*2\n    \n    # convert prediction to depth map and return it\n    return pred[0][0].cpu()"}