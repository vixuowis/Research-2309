{"path": "output/hf-eval-data-v3-valid/f00476_generate_image.py", "content": "# function_import --------------------\n\nfrom diffusers import DDPMPipeline\nimport os\n\n# function_code --------------------\n\ndef generate_image(model_id: str, save_path: str) -> None:\n    '''\n    Generate an image using a pretrained model and save it to a specified path.\n\n    Args:\n        model_id (str): The ID of the pretrained model to use for image generation.\n        save_path (str): The path where the generated image will be saved.\n\n    Returns:\n        None\n    '''\n    ddpm = DDPMPipeline.from_pretrained(model_id)\n    image = ddpm().images[0]\n    image.save(save_path)\n\n# test_function_code --------------------\n\ndef test_generate_image():\n    '''\n    Test the generate_image function.\n    '''\n    model_id = 'google/ddpm-church-256'\n    save_path = 'test_image.png'\n    generate_image(model_id, save_path)\n    assert os.path.exists(save_path), 'Image not saved correctly'\n    os.remove(save_path)\n    assert not os.path.exists(save_path), 'Image not removed correctly'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_generate_image()", "function_import": "# function_import --------------------\n\nfrom diffusers import DDPMPipeline\nimport os\n\n", "function_code": "# function_code --------------------\n\ndef generate_image(model_id: str, save_path: str) -> None:\n    '''\n    Generate an image using a pretrained model and save it to a specified path.\n\n    Args:\n        model_id (str): The ID of the pretrained model to use for image generation.\n        save_path (str): The path where the generated image will be saved.\n\n    Returns:\n        None\n    '''\n    ddpm = DDPMPipeline.from_pretrained(model_id)\n    image = ddpm().images[0]\n    image.save(save_path)\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_image():\n    '''\n    Test the generate_image function.\n    '''\n    model_id = 'google/ddpm-church-256'\n    save_path = 'test_image.png'\n    generate_image(model_id, save_path)\n    assert os.path.exists(save_path), 'Image not saved correctly'\n    os.remove(save_path)\n    assert not os.path.exists(save_path), 'Image not removed correctly'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_generate_image()", "instruct": "# function_import --------------------\n\nfrom diffusers import DDPMPipeline\nimport os\n\n# function_code --------------------\n\ndef generate_image(model_id: str, save_path: str) -> None:\n    '''\n    Generate an image using a pretrained model and save it to a specified path.\n\n    Args:\n        model_id (str): The ID of the pretrained model to use for image generation.\n        save_path (str): The path where the generated image will be saved.\n\n    Returns:\n        None\n    '''", "answer": "\n    ddpm = DDPMPipeline.from_pretrained(model_id)\n    image = ddpm().images[0]\n    image.save(save_path)\n\n", "prediction": "\n    # Get the pretrained model from the S3 bucket and load it into memory\n    model = DDPMPipeline.load_from_checkpoint(f's3://{os.environ[\"BUCKET\"]}/pretrained/{model_id}.ckpt')\n    \n    # Generate the image\n    img = model.generate_image()\n\n    # Save the generated image to disk\n    os.makedirs(os.path.dirname(save_path), exist_ok=True)\n    img.save(save_path)\n"}