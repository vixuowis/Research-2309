{"path": "output/hf-eval-data-v3-valid/f00670_classify_product_image.py", "content": "# function_import --------------------\n\nfrom PIL import Image\nimport requests\nfrom transformers import ChineseCLIPProcessor, ChineseCLIPModel\n\n# function_code --------------------\n\ndef classify_product_image(image_url: str, category_labels: list) -> str:\n    \"\"\"\n    Classify a product image into one of the given categories using a pre-trained ChineseCLIPModel.\n\n    Args:\n        image_url (str): The URL or file path of the product image to be classified.\n        category_labels (list): A list of category labels for classification.\n\n    Returns:\n        str: The predicted category for the product image.\n\n    Raises:\n        OSError: If there is a problem with the file path or the image cannot be opened.\n    \"\"\"\n    model = ChineseCLIPModel.from_pretrained('OFA-Sys/chinese-clip-vit-large-patch14')\n    processor = ChineseCLIPProcessor.from_pretrained('OFA-Sys/chinese-clip-vit-large-patch14')\n\n    image = Image.open(requests.get(image_url, stream=True).raw)\n\n    inputs = processor(images=image, return_tensors='pt')\n\n    image_features = model.get_image_features(**inputs)\n    image_features = image_features / image_features.norm(p=2, dim=-1, keepdim=True)\n\n    inputs = processor(text=category_labels, padding=True, return_tensors='pt')\n\n    text_features = model.get_text_features(**inputs)\n    text_features = text_features / text_features.norm(p=2, dim=-1, keepdim=True)\n\n    inputs = processor(text=category_labels, images=image, return_tensors='pt', padding=True)\n\n    outputs = model(**inputs)\n    logits_per_image = outputs.logits_per_image\n    probs = logits_per_image.softmax(dim=1)\n    category_index = probs.argmax().item()\n    category = category_labels[category_index]\n\n    return category\n\n# test_function_code --------------------\n\ndef test_classify_product_image():\n    \"\"\"Test the classify_product_image function.\"\"\"\n    image_url = 'https://placekitten.com/200/300'\n    category_labels = ['cat', 'dog', 'bird']\n    predicted_category = classify_product_image(image_url, category_labels)\n    assert predicted_category in category_labels, 'The predicted category is not in the category labels.'\n\n    image_url = 'https://placekitten.com/200/301'\n    category_labels = ['cat', 'dog', 'bird']\n    predicted_category = classify_product_image(image_url, category_labels)\n    assert predicted_category in category_labels, 'The predicted category is not in the category labels.'\n\n    image_url = 'https://placekitten.com/200/302'\n    category_labels = ['cat', 'dog', 'bird']\n    predicted_category = classify_product_image(image_url, category_labels)\n    assert predicted_category in category_labels, 'The predicted category is not in the category labels.'\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_classify_product_image()", "function_import": "# function_import --------------------\n\nfrom PIL import Image\nimport requests\nfrom transformers import ChineseCLIPProcessor, ChineseCLIPModel\n\n", "function_code": "# function_code --------------------\n\ndef classify_product_image(image_url: str, category_labels: list) -> str:\n    \"\"\"\n    Classify a product image into one of the given categories using a pre-trained ChineseCLIPModel.\n\n    Args:\n        image_url (str): The URL or file path of the product image to be classified.\n        category_labels (list): A list of category labels for classification.\n\n    Returns:\n        str: The predicted category for the product image.\n\n    Raises:\n        OSError: If there is a problem with the file path or the image cannot be opened.\n    \"\"\"\n    model = ChineseCLIPModel.from_pretrained('OFA-Sys/chinese-clip-vit-large-patch14')\n    processor = ChineseCLIPProcessor.from_pretrained('OFA-Sys/chinese-clip-vit-large-patch14')\n\n    image = Image.open(requests.get(image_url, stream=True).raw)\n\n    inputs = processor(images=image, return_tensors='pt')\n\n    image_features = model.get_image_features(**inputs)\n    image_features = image_features / image_features.norm(p=2, dim=-1, keepdim=True)\n\n    inputs = processor(text=category_labels, padding=True, return_tensors='pt')\n\n    text_features = model.get_text_features(**inputs)\n    text_features = text_features / text_features.norm(p=2, dim=-1, keepdim=True)\n\n    inputs = processor(text=category_labels, images=image, return_tensors='pt', padding=True)\n\n    outputs = model(**inputs)\n    logits_per_image = outputs.logits_per_image\n    probs = logits_per_image.softmax(dim=1)\n    category_index = probs.argmax().item()\n    category = category_labels[category_index]\n\n    return category\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_classify_product_image():\n    \"\"\"Test the classify_product_image function.\"\"\"\n    image_url = 'https://placekitten.com/200/300'\n    category_labels = ['cat', 'dog', 'bird']\n    predicted_category = classify_product_image(image_url, category_labels)\n    assert predicted_category in category_labels, 'The predicted category is not in the category labels.'\n\n    image_url = 'https://placekitten.com/200/301'\n    category_labels = ['cat', 'dog', 'bird']\n    predicted_category = classify_product_image(image_url, category_labels)\n    assert predicted_category in category_labels, 'The predicted category is not in the category labels.'\n\n    image_url = 'https://placekitten.com/200/302'\n    category_labels = ['cat', 'dog', 'bird']\n    predicted_category = classify_product_image(image_url, category_labels)\n    assert predicted_category in category_labels, 'The predicted category is not in the category labels.'\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_classify_product_image()", "instruct": "# function_import --------------------\n\nfrom PIL import Image\nimport requests\nfrom transformers import ChineseCLIPProcessor, ChineseCLIPModel\n\n# function_code --------------------\n\ndef classify_product_image(image_url: str, category_labels: list) -> str:\n    \"\"\"\n    Classify a product image into one of the given categories using a pre-trained ChineseCLIPModel.\n\n    Args:\n        image_url (str): The URL or file path of the product image to be classified.\n        category_labels (list): A list of category labels for classification.\n\n    Returns:\n        str: The predicted category for the product image.\n\n    Raises:\n        OSError: If there is a problem with the file path or the image cannot be opened.\n    \"\"\"", "answer": "\n    model = ChineseCLIPModel.from_pretrained('OFA-Sys/chinese-clip-vit-large-patch14')\n    processor = ChineseCLIPProcessor.from_pretrained('OFA-Sys/chinese-clip-vit-large-patch14')\n\n    image = Image.open(requests.get(image_url, stream=True).raw)\n\n    inputs = processor(images=image, return_tensors='pt')\n\n    image_features = model.get_image_features(**inputs)\n    image_features = image_features / image_features.norm(p=2, dim=-1, keepdim=True)\n\n    inputs = processor(text=category_labels, padding=True, return_tensors='pt')\n\n    text_features = model.get_text_features(**inputs)\n    text_features = text_features / text_features.norm(p=2, dim=-1, keepdim=True)\n\n    inputs = processor(text=category_labels, images=image, return_tensors='pt', padding=True)\n\n    outputs = model(**inputs)\n    logits_per_image = outputs.logits_per_image\n    probs = logits_per_image.softmax(dim=1)\n    category_index = probs.argmax().item()\n    category = category_labels[category_index]\n\n    return category\n\n", "prediction": "\n    try:\n        image = Image.open(image_url)\n    \n    except Exception as e:\n            raise OSError(\"Error opening product image\") from e\n        \n    processor = ChineseCLIPProcessor.from_pretrained('hfl/chinese-clip-vit-base-patch16-224')\n    model = ChineseCLIPModel.from_pretrained('hfl/chinese-clip-vit-base-patch16-224')\n    \n    inputs = processor(\n        text=category_labels, \n        images=image, return_tensors='pt'\n    )\n    outputs = model(**inputs)\n    logits = outputs.logits_per_image\n    \n    predicted_label = category_labels[logits.argmax()]\n    \n    return predicted_label"}