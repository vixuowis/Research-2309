{"path": "output/hf-eval-data-v3-valid/f00721_predict_wine_quality.py", "content": "# function_import --------------------\n\nfrom huggingface_hub import hf_hub_url, cached_download\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n# function_code --------------------\n\ndef predict_wine_quality():\n    '''\n    This function is used to predict the quality of wine based on its chemical properties.\n    It uses a pre-trained model hosted on Hugging Face hub.\n    \n    Returns:\n        tuple: A tuple containing the predicted labels and the model's score.\n    \n    Raises:\n        Exception: If there is an error in loading the model or the data.\n    '''\n    REPO_ID = 'julien-c/wine-quality'\n    FILENAME = 'sklearn_model.joblib'\n    data_filename = 'winequality-red.csv'\n\n    try:\n        model = joblib.load(cached_download(hf_hub_url(REPO_ID, FILENAME)))\n        data_file = cached_download(hf_hub_url(REPO_ID, data_filename))\n    except Exception as e:\n        raise Exception('Error in loading model or data: ' + str(e))\n\n    wine_df = pd.read_csv(data_file, sep=';')\n    X = wine_df.drop(['quality'], axis=1)\n    Y = wine_df['quality']\n\n    labels = model.predict(X)\n    model_score = model.score(X, Y)\n\n    return labels, model_score\n\n# test_function_code --------------------\n\ndef test_predict_wine_quality():\n    '''\n    This function is used to test the predict_wine_quality function.\n    It checks if the function returns the correct output type and if the model score is within an acceptable range.\n    '''\n    labels, score = predict_wine_quality()\n    assert isinstance(labels, np.ndarray), 'The predicted labels should be a numpy array.'\n    assert isinstance(score, float), 'The model score should be a float.'\n    assert 0 <= score <= 1, 'The model score should be between 0 and 1.'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_predict_wine_quality()", "function_import": "# function_import --------------------\n\nfrom huggingface_hub import hf_hub_url, cached_download\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n", "function_code": "# function_code --------------------\n\ndef predict_wine_quality():\n    '''\n    This function is used to predict the quality of wine based on its chemical properties.\n    It uses a pre-trained model hosted on Hugging Face hub.\n    \n    Returns:\n        tuple: A tuple containing the predicted labels and the model's score.\n    \n    Raises:\n        Exception: If there is an error in loading the model or the data.\n    '''\n    REPO_ID = 'julien-c/wine-quality'\n    FILENAME = 'sklearn_model.joblib'\n    data_filename = 'winequality-red.csv'\n\n    try:\n        model = joblib.load(cached_download(hf_hub_url(REPO_ID, FILENAME)))\n        data_file = cached_download(hf_hub_url(REPO_ID, data_filename))\n    except Exception as e:\n        raise Exception('Error in loading model or data: ' + str(e))\n\n    wine_df = pd.read_csv(data_file, sep=';')\n    X = wine_df.drop(['quality'], axis=1)\n    Y = wine_df['quality']\n\n    labels = model.predict(X)\n    model_score = model.score(X, Y)\n\n    return labels, model_score\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_predict_wine_quality():\n    '''\n    This function is used to test the predict_wine_quality function.\n    It checks if the function returns the correct output type and if the model score is within an acceptable range.\n    '''\n    labels, score = predict_wine_quality()\n    assert isinstance(labels, np.ndarray), 'The predicted labels should be a numpy array.'\n    assert isinstance(score, float), 'The model score should be a float.'\n    assert 0 <= score <= 1, 'The model score should be between 0 and 1.'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_predict_wine_quality()", "instruct": "# function_import --------------------\n\nfrom huggingface_hub import hf_hub_url, cached_download\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n# function_code --------------------\n\ndef predict_wine_quality():\n    '''\n    This function is used to predict the quality of wine based on its chemical properties.\n    It uses a pre-trained model hosted on Hugging Face hub.\n    \n    Returns:\n        tuple: A tuple containing the predicted labels and the model's score.\n    \n    Raises:\n        Exception: If there is an error in loading the model or the data.\n    '''", "answer": "\n    REPO_ID = 'julien-c/wine-quality'\n    FILENAME = 'sklearn_model.joblib'\n    data_filename = 'winequality-red.csv'\n\n    try:\n        model = joblib.load(cached_download(hf_hub_url(REPO_ID, FILENAME)))\n        data_file = cached_download(hf_hub_url(REPO_ID, data_filename))\n    except Exception as e:\n        raise Exception('Error in loading model or data: ' + str(e))\n\n    wine_df = pd.read_csv(data_file, sep=';')\n    X = wine_df.drop(['quality'], axis=1)\n    Y = wine_df['quality']\n\n    labels = model.predict(X)\n    model_score = model.score(X, Y)\n\n    return labels, model_score\n\n", "prediction": "\n    \n    try:\n        \n        # Model download link from hugging face hub\n        WINE_QUALITY_MODEL = 'https://huggingface.co/aimeurussink/wine-quality'\n        \n        # Download the model and feature names using hf_hub_download()\n        try:\n            artifact_url = hf_hub_url(repo_id=WINE_QUALITY_MODEL, \n                                      filename='preprocessor.joblib')\n            \n            # Download preprocessing file\n            cached_download(artifact_url, cache_dir=\".\", \n                            library_name=\"model\", library_version=\"v1\")\n        except Exception as e:\n            return None, str(e)\n        \n        try:    \n            artifact_url = hf_hub_url(repo_id=WINE_QUALITY_MODEL, \n                                      filename='model.joblib')\n            \n            # Download model file\n            cached_download(artifact_url, cache_dir=\".\", \n                            library_name=\"model\", library_version=\"v1\")\n        except Exception as e:\n            return None, str(e)\n        \n        # Load the preprocessor and model files\n        try:\n            processor = joblib.load('preprocessor.joblib')\n            \n            model = joblib.load('model.joblib')\n        except Exception as e:\n            return None, str(e)\n    \n    except Exception as e:\n        # If there is an error in reading the files, then return None\n        return None, str(e)\n        \n    try:\n        X = pd.read_json(req[\"X\"])\n    except Exception as e:\n        # If there is an error in loading the data, then return None\n        return None, str(e)\n    \n    try:\n        X_processed = processor.transform(X)\n        \n        preds = model.predict(X_processed)\n    except Exception as e:\n        # If there is an error in making predictions, then return None\n        return None, str(e)\n    \n    try:\n"}