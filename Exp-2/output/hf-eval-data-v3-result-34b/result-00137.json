{"path": "output/hf-eval-data-v3-valid/f00575_location_recommendation.py", "content": "# function_import --------------------\n\nfrom PIL import Image\nimport requests\nfrom transformers import CLIPProcessor, CLIPModel\n\n# function_code --------------------\n\ndef location_recommendation(image_url: str, choices: list):\n    \"\"\"\n    This function uses the StreetCLIP model to generate probabilities for various cities based on images from potential locations.\n    It identifies possible locations for new stores.\n\n    Args:\n        image_url (str): The URL of the image of the potential location.\n        choices (list): A list of city options to classify images.\n\n    Returns:\n        dict: A dictionary with city names as keys and their corresponding probabilities as values.\n    \"\"\"\n    model = CLIPModel.from_pretrained('geolocal/StreetCLIP')\n    processor = CLIPProcessor.from_pretrained('geolocal/StreetCLIP')\n    image = Image.open(requests.get(image_url, stream=True).raw)\n    inputs = processor(text=choices, images=image, return_tensors='pt', padding=True)\n    outputs = model(**inputs)\n    logits_per_image = outputs.logits_per_image\n    probs = logits_per_image.softmax(dim=1)\n    probs = probs.tolist()[0]\n    return {city: prob for city, prob in zip(choices, probs)}\n\n# test_function_code --------------------\n\ndef test_location_recommendation():\n    \"\"\"\n    This function tests the location_recommendation function with different test cases.\n    \"\"\"\n    test_case_1 = ('https://placekitten.com/200/300', ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix'])\n    result_1 = location_recommendation(*test_case_1)\n    assert isinstance(result_1, dict), 'The result should be a dictionary.'\n    assert len(result_1) == len(test_case_1[1]), 'The number of cities in the result should be equal to the number of choices.'\n\n    test_case_2 = ('https://placekitten.com/200/300', ['San Jose', 'San Diego', 'Los Angeles', 'Las Vegas', 'San Francisco'])\n    result_2 = location_recommendation(*test_case_2)\n    assert isinstance(result_2, dict), 'The result should be a dictionary.'\n    assert len(result_2) == len(test_case_2[1]), 'The number of cities in the result should be equal to the number of choices.'\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_location_recommendation()", "function_import": "# function_import --------------------\n\nfrom PIL import Image\nimport requests\nfrom transformers import CLIPProcessor, CLIPModel\n\n", "function_code": "# function_code --------------------\n\ndef location_recommendation(image_url: str, choices: list):\n    \"\"\"\n    This function uses the StreetCLIP model to generate probabilities for various cities based on images from potential locations.\n    It identifies possible locations for new stores.\n\n    Args:\n        image_url (str): The URL of the image of the potential location.\n        choices (list): A list of city options to classify images.\n\n    Returns:\n        dict: A dictionary with city names as keys and their corresponding probabilities as values.\n    \"\"\"\n    model = CLIPModel.from_pretrained('geolocal/StreetCLIP')\n    processor = CLIPProcessor.from_pretrained('geolocal/StreetCLIP')\n    image = Image.open(requests.get(image_url, stream=True).raw)\n    inputs = processor(text=choices, images=image, return_tensors='pt', padding=True)\n    outputs = model(**inputs)\n    logits_per_image = outputs.logits_per_image\n    probs = logits_per_image.softmax(dim=1)\n    probs = probs.tolist()[0]\n    return {city: prob for city, prob in zip(choices, probs)}\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_location_recommendation():\n    \"\"\"\n    This function tests the location_recommendation function with different test cases.\n    \"\"\"\n    test_case_1 = ('https://placekitten.com/200/300', ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix'])\n    result_1 = location_recommendation(*test_case_1)\n    assert isinstance(result_1, dict), 'The result should be a dictionary.'\n    assert len(result_1) == len(test_case_1[1]), 'The number of cities in the result should be equal to the number of choices.'\n\n    test_case_2 = ('https://placekitten.com/200/300', ['San Jose', 'San Diego', 'Los Angeles', 'Las Vegas', 'San Francisco'])\n    result_2 = location_recommendation(*test_case_2)\n    assert isinstance(result_2, dict), 'The result should be a dictionary.'\n    assert len(result_2) == len(test_case_2[1]), 'The number of cities in the result should be equal to the number of choices.'\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_location_recommendation()", "instruct": "# function_import --------------------\n\nfrom PIL import Image\nimport requests\nfrom transformers import CLIPProcessor, CLIPModel\n\n# function_code --------------------\n\ndef location_recommendation(image_url: str, choices: list):\n    \"\"\"\n    This function uses the StreetCLIP model to generate probabilities for various cities based on images from potential locations.\n    It identifies possible locations for new stores.\n\n    Args:\n        image_url (str): The URL of the image of the potential location.\n        choices (list): A list of city options to classify images.\n\n    Returns:\n        dict: A dictionary with city names as keys and their corresponding probabilities as values.\n    \"\"\"", "answer": "\n    model = CLIPModel.from_pretrained('geolocal/StreetCLIP')\n    processor = CLIPProcessor.from_pretrained('geolocal/StreetCLIP')\n    image = Image.open(requests.get(image_url, stream=True).raw)\n    inputs = processor(text=choices, images=image, return_tensors='pt', padding=True)\n    outputs = model(**inputs)\n    logits_per_image = outputs.logits_per_image\n    probs = logits_per_image.softmax(dim=1)\n    probs = probs.tolist()[0]\n    return {city: prob for city, prob in zip(choices, probs)}\n\n", "prediction": "    \n    \n    # Create a variable to store the chosen image, using the input URL.\n    img = Image.open(requests.get(image_url, stream=True).raw)\n    \n    # Initialize the CLIPImageEncoder class with default settings for the StreetCLIP model and processor.\n    encoder = CLIPImageEncoder()\n\n    # Create a variable to store the encoded image in.\n    img_emb = encoder.encode(img=img)\n    \n    # Initialize the StreetCLIP model using the CLIPModel class.\n    model = CLIPModel.from_pretrained(\"openai/clip-vit-base-patch32\")\n        \n    # Create a variable to store the probabilities of classes from the classification task on the encoded image.\n    logits_per_image, _ = model(image=img_emb, text=choices)  \n    \n    # Create a dictionary with city names as keys and their corresponding probabilities as values.\n    city_probs = {city: prob for city, prob in zip(choices, logits_per_image.softmax(dim=1)[0].tolist())}\n     \n    return city_probs\n"}