{"path": "output/hf-eval-data-v3-valid/f00437_predict_customer_purchase.py", "content": "# function_import --------------------\n\nimport joblib\nimport pandas as pd\n\n# function_code --------------------\n\ndef predict_customer_purchase(model_path: str, data_path: str) -> pd.DataFrame:\n    \"\"\"\n    Predicts which customers will make a purchase based on their browsing behavior.\n\n    Args:\n        model_path (str): The path to the trained model.\n        data_path (str): The path to the customer browsing data.\n\n    Returns:\n        pd.DataFrame: The predictions of the model.\n\n    Raises:\n        FileNotFoundError: If the model or data file does not exist.\n    \"\"\"\n    model = joblib.load(model_path)\n    customer_data = pd.read_csv(data_path)\n    # Pre-process and select relevant features\n    # customer_data = ...\n    predictions = model.predict(customer_data)\n    return predictions\n\n# test_function_code --------------------\n\ndef test_predict_customer_purchase():\n    \"\"\"Tests the predict_customer_purchase function.\"\"\"\n    model_path = 'test_model.joblib'\n    data_path = 'test_data.csv'\n    try:\n        predictions = predict_customer_purchase(model_path, data_path)\n    except FileNotFoundError:\n        print('Test model or data file does not exist.')\n    else:\n        assert isinstance(predictions, pd.DataFrame), 'The result is not a DataFrame.'\n        print('All Tests Passed')\n\n# call_test_function_code --------------------\n\ntest_predict_customer_purchase()", "function_import": "# function_import --------------------\n\nimport joblib\nimport pandas as pd\n\n", "function_code": "# function_code --------------------\n\ndef predict_customer_purchase(model_path: str, data_path: str) -> pd.DataFrame:\n    \"\"\"\n    Predicts which customers will make a purchase based on their browsing behavior.\n\n    Args:\n        model_path (str): The path to the trained model.\n        data_path (str): The path to the customer browsing data.\n\n    Returns:\n        pd.DataFrame: The predictions of the model.\n\n    Raises:\n        FileNotFoundError: If the model or data file does not exist.\n    \"\"\"\n    model = joblib.load(model_path)\n    customer_data = pd.read_csv(data_path)\n    # Pre-process and select relevant features\n    # customer_data = ...\n    predictions = model.predict(customer_data)\n    return predictions\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_predict_customer_purchase():\n    \"\"\"Tests the predict_customer_purchase function.\"\"\"\n    model_path = 'test_model.joblib'\n    data_path = 'test_data.csv'\n    try:\n        predictions = predict_customer_purchase(model_path, data_path)\n    except FileNotFoundError:\n        print('Test model or data file does not exist.')\n    else:\n        assert isinstance(predictions, pd.DataFrame), 'The result is not a DataFrame.'\n        print('All Tests Passed')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_predict_customer_purchase()", "instruct": "# function_import --------------------\n\nimport joblib\nimport pandas as pd\n\n# function_code --------------------\n\ndef predict_customer_purchase(model_path: str, data_path: str) -> pd.DataFrame:\n    \"\"\"\n    Predicts which customers will make a purchase based on their browsing behavior.\n\n    Args:\n        model_path (str): The path to the trained model.\n        data_path (str): The path to the customer browsing data.\n\n    Returns:\n        pd.DataFrame: The predictions of the model.\n\n    Raises:\n        FileNotFoundError: If the model or data file does not exist.\n    \"\"\"", "answer": "\n    model = joblib.load(model_path)\n    customer_data = pd.read_csv(data_path)\n    # Pre-process and select relevant features\n    # customer_data = ...\n    predictions = model.predict(customer_data)\n    return predictions\n\n", "prediction": "\n    try:\n        with open(model_path, \"rb\") as fp:\n            clf = joblib.load(fp)\n\n        X = pd.read_csv(data_path).drop(\"customer\", axis=1)\n        \n        y = clf.predict(X)\n    except FileNotFoundError as e:\n        raise e\n    else:\n        return pd.DataFrame({\"y\":y})"}