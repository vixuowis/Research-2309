{"path": "output/hf-eval-data-v3-valid/f00895_text_to_speech.py", "content": "# function_import --------------------\n\nimport os\nimport torchaudio\nfrom speechbrain.pretrained import Tacotron2, HIFIGAN\n\n# function_code --------------------\n\ndef text_to_speech(text: str, output_file: str):\n    '''\n    Convert the input text into speech and save the audio to a .wav file.\n\n    Args:\n        text (str): The input text to be converted into speech.\n        output_file (str): The path of the output .wav file.\n\n    Returns:\n        None\n    '''\n    tacotron2 = Tacotron2.from_hparams(source='speechbrain/tts-tacotron2-ljspeech')\n    hifi_gan = HIFIGAN.from_hparams(source='speechbrain/tts-hifigan-ljspeech')\n    mel_output, mel_length, alignment = tacotron2.encode_text(text)\n    waveforms = hifi_gan.decode_batch(mel_output)\n    torchaudio.save(output_file, waveforms.squeeze(1), 22050)\n\n# test_function_code --------------------\n\ndef test_text_to_speech():\n    '''\n    Test the text_to_speech function.\n    '''\n    text_to_speech('The sun was shining brightly, and the birds were singing sweetly.', 'test_TTS.wav')\n    assert os.path.exists('test_TTS.wav'), 'The output file does not exist.'\n    os.remove('test_TTS.wav')\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_text_to_speech()", "function_import": "# function_import --------------------\n\nimport os\nimport torchaudio\nfrom speechbrain.pretrained import Tacotron2, HIFIGAN\n\n", "function_code": "# function_code --------------------\n\ndef text_to_speech(text: str, output_file: str):\n    '''\n    Convert the input text into speech and save the audio to a .wav file.\n\n    Args:\n        text (str): The input text to be converted into speech.\n        output_file (str): The path of the output .wav file.\n\n    Returns:\n        None\n    '''\n    tacotron2 = Tacotron2.from_hparams(source='speechbrain/tts-tacotron2-ljspeech')\n    hifi_gan = HIFIGAN.from_hparams(source='speechbrain/tts-hifigan-ljspeech')\n    mel_output, mel_length, alignment = tacotron2.encode_text(text)\n    waveforms = hifi_gan.decode_batch(mel_output)\n    torchaudio.save(output_file, waveforms.squeeze(1), 22050)\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_text_to_speech():\n    '''\n    Test the text_to_speech function.\n    '''\n    text_to_speech('The sun was shining brightly, and the birds were singing sweetly.', 'test_TTS.wav')\n    assert os.path.exists('test_TTS.wav'), 'The output file does not exist.'\n    os.remove('test_TTS.wav')\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_text_to_speech()", "instruct": "# function_import --------------------\n\nimport os\nimport torchaudio\nfrom speechbrain.pretrained import Tacotron2, HIFIGAN\n\n# function_code --------------------\n\ndef text_to_speech(text: str, output_file: str):\n    '''\n    Convert the input text into speech and save the audio to a .wav file.\n\n    Args:\n        text (str): The input text to be converted into speech.\n        output_file (str): The path of the output .wav file.\n\n    Returns:\n        None\n    '''", "answer": "\n    tacotron2 = Tacotron2.from_hparams(source='speechbrain/tts-tacotron2-ljspeech')\n    hifi_gan = HIFIGAN.from_hparams(source='speechbrain/tts-hifigan-ljspeech')\n    mel_output, mel_length, alignment = tacotron2.encode_text(text)\n    waveforms = hifi_gan.decode_batch(mel_output)\n    torchaudio.save(output_file, waveforms.squeeze(1), 22050)\n\n", "prediction": "\n    \n    # Set the device that is used for training the models.\n    torch_device = 'cuda' if torch.cuda.is_available() else 'cpu'\n    print('Use the device:', torch_device)\n\n    # Load the pretrained Tacotron2 model, and load it to the selected device.\n    tacotron2 = Tacotron2(out_path=None, device=torch_device)\n\n    # Load the pretrained HIFIGAN model, and load it to the selected device.\n    hifigan = HIFIGAN(out_path=None, device=torch_device)\n\n    # Convert the input text into speech.\n    wavs = tacotron2.generate_waveform(text=text)\n    \n    # Apply the HIFIGAN model to obtain a clean output audio.\n    wavs = hifigan.batch_forward(wavs)\n\n    # Save the output audio as a .wav file.\n    torchaudio.save(output_file, wavs[0].unsqueeze(0).cpu(), 16000)"}