{"path": "output/hf-eval-data-v3-valid/f00906_measure_noise_levels.py", "content": "# function_import --------------------\n\nfrom pyannote.audio import Model, Inference\n\n# function_code --------------------\n\ndef measure_noise_levels(audio_file_path: str, access_token: str):\n    \"\"\"\n    Measures noise levels in the environment using a pre-trained model from Hugging Face Transformers.\n\n    Args:\n        audio_file_path (str): The path to the audio file.\n        access_token (str): The access token for Hugging Face Transformers.\n\n    Returns:\n        None. Prints the voice activity detection (VAD), speech-to-noise ratio (SNR), and the C50 room acoustics estimation for each frame in the audio file.\n\n    Raises:\n        FileNotFoundError: If the audio file does not exist.\n        Exception: If there is an error loading the model or processing the audio file.\n    \"\"\"\n    try:\n        model = Model.from_pretrained('pyannote/brouhaha', use_auth_token=access_token)\n        inference = Inference(model)\n        output = inference(audio_file_path)\n        for frame, (vad, snr, c50) in output:\n            t = frame.middle\n            print(f'{t:8.3f} vad={100*vad:.0f}% snr={snr:.0f} c50={c50:.0f}')\n    except FileNotFoundError as fnf_error:\n        print(f'Error: {fnf_error}')\n    except Exception as e:\n        print(f'Error: {e}')\n\n# test_function_code --------------------\n\ndef test_measure_noise_levels():\n    \"\"\"\n    Tests the measure_noise_levels function.\n    \"\"\"\n    # Test with a valid audio file and access token\n    try:\n        measure_noise_levels('valid_audio_file.wav', 'valid_access_token')\n    except Exception as e:\n        print(f'Error: {e}')\n\n    # Test with an invalid audio file\n    try:\n        measure_noise_levels('invalid_audio_file.wav', 'valid_access_token')\n    except FileNotFoundError as fnf_error:\n        assert str(fnf_error) == \"[Errno 2] No such file or directory: 'invalid_audio_file.wav'\", 'Test Failed'\n\n    # Test with an invalid access token\n    try:\n        measure_noise_levels('valid_audio_file.wav', 'invalid_access_token')\n    except Exception as e:\n        assert str(e) == 'Invalid access token', 'Test Failed'\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\nprint(test_measure_noise_levels())", "function_import": "# function_import --------------------\n\nfrom pyannote.audio import Model, Inference\n\n", "function_code": "# function_code --------------------\n\ndef measure_noise_levels(audio_file_path: str, access_token: str):\n    \"\"\"\n    Measures noise levels in the environment using a pre-trained model from Hugging Face Transformers.\n\n    Args:\n        audio_file_path (str): The path to the audio file.\n        access_token (str): The access token for Hugging Face Transformers.\n\n    Returns:\n        None. Prints the voice activity detection (VAD), speech-to-noise ratio (SNR), and the C50 room acoustics estimation for each frame in the audio file.\n\n    Raises:\n        FileNotFoundError: If the audio file does not exist.\n        Exception: If there is an error loading the model or processing the audio file.\n    \"\"\"\n    try:\n        model = Model.from_pretrained('pyannote/brouhaha', use_auth_token=access_token)\n        inference = Inference(model)\n        output = inference(audio_file_path)\n        for frame, (vad, snr, c50) in output:\n            t = frame.middle\n            print(f'{t:8.3f} vad={100*vad:.0f}% snr={snr:.0f} c50={c50:.0f}')\n    except FileNotFoundError as fnf_error:\n        print(f'Error: {fnf_error}')\n    except Exception as e:\n        print(f'Error: {e}')\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_measure_noise_levels():\n    \"\"\"\n    Tests the measure_noise_levels function.\n    \"\"\"\n    # Test with a valid audio file and access token\n    try:\n        measure_noise_levels('valid_audio_file.wav', 'valid_access_token')\n    except Exception as e:\n        print(f'Error: {e}')\n\n    # Test with an invalid audio file\n    try:\n        measure_noise_levels('invalid_audio_file.wav', 'valid_access_token')\n    except FileNotFoundError as fnf_error:\n        assert str(fnf_error) == \"[Errno 2] No such file or directory: 'invalid_audio_file.wav'\", 'Test Failed'\n\n    # Test with an invalid access token\n    try:\n        measure_noise_levels('valid_audio_file.wav', 'invalid_access_token')\n    except Exception as e:\n        assert str(e) == 'Invalid access token', 'Test Failed'\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\nprint(test_measure_noise_levels())", "instruct": "# function_import --------------------\n\nfrom pyannote.audio import Model, Inference\n\n# function_code --------------------\n\ndef measure_noise_levels(audio_file_path: str, access_token: str):\n    \"\"\"\n    Measures noise levels in the environment using a pre-trained model from Hugging Face Transformers.\n\n    Args:\n        audio_file_path (str): The path to the audio file.\n        access_token (str): The access token for Hugging Face Transformers.\n\n    Returns:\n        None. Prints the voice activity detection (VAD), speech-to-noise ratio (SNR), and the C50 room acoustics estimation for each frame in the audio file.\n\n    Raises:\n        FileNotFoundError: If the audio file does not exist.\n        Exception: If there is an error loading the model or processing the audio file.\n    \"\"\"", "answer": "\n    try:\n        model = Model.from_pretrained('pyannote/brouhaha', use_auth_token=access_token)\n        inference = Inference(model)\n        output = inference(audio_file_path)\n        for frame, (vad, snr, c50) in output:\n            t = frame.middle\n            print(f'{t:8.3f} vad={100*vad:.0f}% snr={snr:.0f} c50={c50:.0f}')\n    except FileNotFoundError as fnf_error:\n        print(f'Error: {fnf_error}')\n    except Exception as e:\n        print(f'Error: {e}')\n\n", "prediction": "    \n    # Load the model and tokenizer from Hugging Face Transformers\n    model_name = 'pb/C50_speech-detection'\n    print('Downloading the model')\n    inference = Inference(model_name, access_token=access_token)\n    print('Loading the model to memory\\n')\n    model: Model = inference.instantiate()\n    \n    # Process the audio file and display the outputs in a human-readable format\n    try:\n        output = model(audio_file_path, batch_size=1)\n        \n        # Loop through all frames of the audio file\n        for i, frame in enumerate(output):\n            print('frame',i)\n            \n            # Convert the time from seconds to HH:MM:SS\n            timestamp = str(int(i * 0.2 / 3600)) + ':' + str(int((i * 0.2 % 3600) / 60)).zfill(2) + ':' + str(round(i*0.2 % 60, 2)).zfill(4)[0:2]\n            \n            # Print the frame output in a human-readable format\n            print('timestamp', timestamp)\n            print('VAD:', round(frame['vad_prob'][1],3))\n            print('SNR:', round(frame['snr'],3))\n            print('C50 room acoustics estimation:', round(frame['c50_room_estimation'],2), '\\n')\n    \n    # Handle exceptions\n    except FileNotFoundError as error:\n        raise error\n    except Exception as exception:\n        print(\"Exception occurred during processing. See stacktrace below for details.\\n\\n\", file=sys.stderr)\n        traceback.print_exc()\n        raise exception\n\n# function_call --------------------\n\nif __name__ == '__main__':\n    # Access token for Hugging Face Transformers. Get yours at https://huggingface.co/models?search=speech-detection\n    access_token = '<your_access_token>'\n    \n   "}