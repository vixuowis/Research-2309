{"path": "output/hf-eval-data-v3-valid/f00208_detect_named_entities.py", "content": "# function_import --------------------\n\nfrom transformers import AutoTokenizer, AutoModelForTokenClassification, pipeline\n\n# function_code --------------------\n\ndef detect_named_entities(text):\n    \"\"\"\n    Detect named entities in a given text using a multilingual named entity recognition model.\n\n    Args:\n        text (str): The text in which to detect named entities.\n\n    Returns:\n        list: A list of dictionaries, each containing information about a detected named entity.\n    \"\"\"\n    tokenizer = AutoTokenizer.from_pretrained('Davlan/distilbert-base-multilingual-cased-ner-hrl')\n    model = AutoModelForTokenClassification.from_pretrained('Davlan/distilbert-base-multilingual-cased-ner-hrl')\n    nlp = pipeline('ner', model=model, tokenizer=tokenizer)\n    return nlp(text)\n\n# test_function_code --------------------\n\ndef test_detect_named_entities():\n    \"\"\"\n    Test the detect_named_entities function.\n    \"\"\"\n    test_text_1 = 'Nader Jokhadar had given Syria the lead with a well-struck header in the seventh minute.'\n    test_text_2 = 'Apple Inc. is planning to open a new store in San Francisco.'\n    test_text_3 = 'Angela Merkel met with Emmanuel Macron in Berlin.'\n    assert isinstance(detect_named_entities(test_text_1), list)\n    assert isinstance(detect_named_entities(test_text_2), list)\n    assert isinstance(detect_named_entities(test_text_3), list)\n    print('All Tests Passed')\n\n# call_test_function_code --------------------\n\ntest_detect_named_entities()", "function_import": "# function_import --------------------\n\nfrom transformers import AutoTokenizer, AutoModelForTokenClassification, pipeline\n\n", "function_code": "# function_code --------------------\n\ndef detect_named_entities(text):\n    \"\"\"\n    Detect named entities in a given text using a multilingual named entity recognition model.\n\n    Args:\n        text (str): The text in which to detect named entities.\n\n    Returns:\n        list: A list of dictionaries, each containing information about a detected named entity.\n    \"\"\"\n    tokenizer = AutoTokenizer.from_pretrained('Davlan/distilbert-base-multilingual-cased-ner-hrl')\n    model = AutoModelForTokenClassification.from_pretrained('Davlan/distilbert-base-multilingual-cased-ner-hrl')\n    nlp = pipeline('ner', model=model, tokenizer=tokenizer)\n    return nlp(text)\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_detect_named_entities():\n    \"\"\"\n    Test the detect_named_entities function.\n    \"\"\"\n    test_text_1 = 'Nader Jokhadar had given Syria the lead with a well-struck header in the seventh minute.'\n    test_text_2 = 'Apple Inc. is planning to open a new store in San Francisco.'\n    test_text_3 = 'Angela Merkel met with Emmanuel Macron in Berlin.'\n    assert isinstance(detect_named_entities(test_text_1), list)\n    assert isinstance(detect_named_entities(test_text_2), list)\n    assert isinstance(detect_named_entities(test_text_3), list)\n    print('All Tests Passed')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_detect_named_entities()", "instruct": "# function_import --------------------\n\nfrom transformers import AutoTokenizer, AutoModelForTokenClassification, pipeline\n\n# function_code --------------------\n\ndef detect_named_entities(text):\n    \"\"\"\n    Detect named entities in a given text using a multilingual named entity recognition model.\n\n    Args:\n        text (str): The text in which to detect named entities.\n\n    Returns:\n        list: A list of dictionaries, each containing information about a detected named entity.\n    \"\"\"", "answer": "\n    tokenizer = AutoTokenizer.from_pretrained('Davlan/distilbert-base-multilingual-cased-ner-hrl')\n    model = AutoModelForTokenClassification.from_pretrained('Davlan/distilbert-base-multilingual-cased-ner-hrl')\n    nlp = pipeline('ner', model=model, tokenizer=tokenizer)\n    return nlp(text)\n\n", "prediction": "\n\n    # Load the pre-trained multilingual BERT model with a detailed label scheme\n    tokenizer = AutoTokenizer.from_pretrained(\"dslim/bert-base-NER\")\n    model = AutoModelForTokenClassification.from_pretrained(\"dslim/bert-base-NER\")\n\n    # Define the labels of interest (here: all labels)\n    id2label = {1: 'B', 2: 'I', 3: 'O'}\n    \n    # Build a custom pipeline that uses the custom tokenizer and model\n    nlp = pipeline(\"ner\", model=model, tokenizer=tokenizer, aggregation_strategy='simple')\n\n    # Apply the pipeline and get the result\n    entities = nlp(text)\n\n    return entities"}