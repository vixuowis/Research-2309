{"path": "output/hf-eval-data-v3-valid/f00499_sentiment_analysis.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef sentiment_analysis(text: str) -> dict:\n    \"\"\"\n    This function uses the zero-shot classification model from the transformers library to perform sentiment analysis on a given text.\n\n    Args:\n        text (str): The text to be analyzed.\n\n    Returns:\n        dict: The sentiment analysis result.\n    \"\"\"\n    nlp = pipeline('zero-shot-classification', model='valhalla/distilbart-mnli-12-6')\n    result = nlp(text, ['positive', 'negative'])\n    return result\n\n# test_function_code --------------------\n\ndef test_sentiment_analysis():\n    \"\"\"\n    This function tests the sentiment_analysis function with different test cases.\n    \"\"\"\n    assert sentiment_analysis('The movie was great!')['labels'][0] == 'positive'\n    assert sentiment_analysis('I hate this product.')['labels'][0] == 'negative'\n    assert sentiment_analysis('This is a neutral statement.')['labels'][0] in ['positive', 'negative']\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_sentiment_analysis()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef sentiment_analysis(text: str) -> dict:\n    \"\"\"\n    This function uses the zero-shot classification model from the transformers library to perform sentiment analysis on a given text.\n\n    Args:\n        text (str): The text to be analyzed.\n\n    Returns:\n        dict: The sentiment analysis result.\n    \"\"\"\n    nlp = pipeline('zero-shot-classification', model='valhalla/distilbart-mnli-12-6')\n    result = nlp(text, ['positive', 'negative'])\n    return result\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_sentiment_analysis():\n    \"\"\"\n    This function tests the sentiment_analysis function with different test cases.\n    \"\"\"\n    assert sentiment_analysis('The movie was great!')['labels'][0] == 'positive'\n    assert sentiment_analysis('I hate this product.')['labels'][0] == 'negative'\n    assert sentiment_analysis('This is a neutral statement.')['labels'][0] in ['positive', 'negative']\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_sentiment_analysis()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef sentiment_analysis(text: str) -> dict:\n    \"\"\"\n    This function uses the zero-shot classification model from the transformers library to perform sentiment analysis on a given text.\n\n    Args:\n        text (str): The text to be analyzed.\n\n    Returns:\n        dict: The sentiment analysis result.\n    \"\"\"", "answer": "\n    nlp = pipeline('zero-shot-classification', model='valhalla/distilbart-mnli-12-6')\n    result = nlp(text, ['positive', 'negative'])\n    return result\n\n", "prediction": "\n    \n    # set up the pipeline for zero-shot classification\n    classifier = pipeline(\"zero-shot-classification\")\n\n    # classify the text using the predefined model and labels\n    result = classifier(text, candidate_labels=[\"positive\", \"negative\"], multi_label=False)\n    \n    return result\n"}