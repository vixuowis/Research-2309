{"path": "output/hf-eval-data-v3-valid/f00414_group_articles_by_topic.py", "content": "# function_import --------------------\n\nfrom sentence_transformers import SentenceTransformer\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\n# function_code --------------------\n\ndef group_articles_by_topic(sentences: list, num_clusters: int) -> dict:\n    '''\n    Groups articles by topic using SentenceTransformer for sentence embeddings and KMeans for clustering.\n\n    Args:\n        sentences (list): A list of sentences from the articles.\n        num_clusters (int): The number of clusters (topics) to form.\n\n    Returns:\n        dict: A dictionary where keys are cluster ids and values are lists of sentences belonging to that cluster.\n\n    Raises:\n        ValueError: If sentences is not a list or num_clusters is not an integer.\n    '''\n    if not isinstance(sentences, list) or not all(isinstance(s, str) for s in sentences):\n        raise ValueError('sentences must be a list of strings')\n    if not isinstance(num_clusters, int):\n        raise ValueError('num_clusters must be an integer')\n\n    model = SentenceTransformer('sentence-transformers/distiluse-base-multilingual-cased-v1')\n    embeddings = model.encode(sentences)\n    kmeans = KMeans(n_clusters=num_clusters)\n    labels = kmeans.fit_predict(embeddings)\n\n    clusters = {i: [] for i in range(num_clusters)}\n    for sentence, label in zip(sentences, labels):\n        clusters[label].append(sentence)\n\n    return clusters\n\n# test_function_code --------------------\n\ndef test_group_articles_by_topic():\n    '''Tests the group_articles_by_topic function.'''\n    sentences = ['This is an example sentence.', 'Each sentence is converted.', 'This is another example.', 'Each example is different.']\n    num_clusters = 2\n\n    clusters = group_articles_by_topic(sentences, num_clusters)\n\n    assert isinstance(clusters, dict), 'Return type must be a dictionary.'\n    assert len(clusters) == num_clusters, 'Number of clusters must be equal to num_clusters.'\n    for cluster in clusters.values():\n        assert all(sentence in sentences for sentence in cluster), 'All sentences in a cluster must be from the input sentences.'\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_group_articles_by_topic()", "function_import": "# function_import --------------------\n\nfrom sentence_transformers import SentenceTransformer\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\n", "function_code": "# function_code --------------------\n\ndef group_articles_by_topic(sentences: list, num_clusters: int) -> dict:\n    '''\n    Groups articles by topic using SentenceTransformer for sentence embeddings and KMeans for clustering.\n\n    Args:\n        sentences (list): A list of sentences from the articles.\n        num_clusters (int): The number of clusters (topics) to form.\n\n    Returns:\n        dict: A dictionary where keys are cluster ids and values are lists of sentences belonging to that cluster.\n\n    Raises:\n        ValueError: If sentences is not a list or num_clusters is not an integer.\n    '''\n    if not isinstance(sentences, list) or not all(isinstance(s, str) for s in sentences):\n        raise ValueError('sentences must be a list of strings')\n    if not isinstance(num_clusters, int):\n        raise ValueError('num_clusters must be an integer')\n\n    model = SentenceTransformer('sentence-transformers/distiluse-base-multilingual-cased-v1')\n    embeddings = model.encode(sentences)\n    kmeans = KMeans(n_clusters=num_clusters)\n    labels = kmeans.fit_predict(embeddings)\n\n    clusters = {i: [] for i in range(num_clusters)}\n    for sentence, label in zip(sentences, labels):\n        clusters[label].append(sentence)\n\n    return clusters\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_group_articles_by_topic():\n    '''Tests the group_articles_by_topic function.'''\n    sentences = ['This is an example sentence.', 'Each sentence is converted.', 'This is another example.', 'Each example is different.']\n    num_clusters = 2\n\n    clusters = group_articles_by_topic(sentences, num_clusters)\n\n    assert isinstance(clusters, dict), 'Return type must be a dictionary.'\n    assert len(clusters) == num_clusters, 'Number of clusters must be equal to num_clusters.'\n    for cluster in clusters.values():\n        assert all(sentence in sentences for sentence in cluster), 'All sentences in a cluster must be from the input sentences.'\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_group_articles_by_topic()", "instruct": "# function_import --------------------\n\nfrom sentence_transformers import SentenceTransformer\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\n# function_code --------------------\n\ndef group_articles_by_topic(sentences: list, num_clusters: int) -> dict:\n    '''\n    Groups articles by topic using SentenceTransformer for sentence embeddings and KMeans for clustering.\n\n    Args:\n        sentences (list): A list of sentences from the articles.\n        num_clusters (int): The number of clusters (topics) to form.\n\n    Returns:\n        dict: A dictionary where keys are cluster ids and values are lists of sentences belonging to that cluster.\n\n    Raises:\n        ValueError: If sentences is not a list or num_clusters is not an integer.\n    '''", "answer": "\n    if not isinstance(sentences, list) or not all(isinstance(s, str) for s in sentences):\n        raise ValueError('sentences must be a list of strings')\n    if not isinstance(num_clusters, int):\n        raise ValueError('num_clusters must be an integer')\n\n    model = SentenceTransformer('sentence-transformers/distiluse-base-multilingual-cased-v1')\n    embeddings = model.encode(sentences)\n    kmeans = KMeans(n_clusters=num_clusters)\n    labels = kmeans.fit_predict(embeddings)\n\n    clusters = {i: [] for i in range(num_clusters)}\n    for sentence, label in zip(sentences, labels):\n        clusters[label].append(sentence)\n\n    return clusters\n\n", "prediction": "\n    \n    # Check types\n    if type(sentences) != list:\n        raise TypeError('\"sentences\" should be of type \"list\".')\n        \n    if type(num_clusters) != int:\n        raise TypeError('\"num_clusters\" should be of type \"int\".')\n    \n    # Check values\n    if num_clusters < 1:\n        raise ValueError(\"Number of clusters must be equal to or greater than 1.\")\n        \n    for sentence in sentences:\n        if type(sentence) != str:\n            raise TypeError('\"sentences\" should contain only strings.')\n    \n    # Create sentence embeddings\n    model = SentenceTransformer('stsb-distilbert-base')\n    sentence_embeddings = model.encode(sentences, show_progress_bar=True)\n        \n    # Cluster the embeddings using KMeans\n    num_clusters = min(num_clusters, len(sentence_embeddings))\n    clustering_model = KMeans(n_clusters=num_clusters)\n    \n    # cluster_assignment contains the cluster id that sentence with index i is assigned to \n    # (i.e., cluster_assignment[i] is the id of the cluster where sentences[i] has been assigned to)\n    cluster_assignment = clustering_model.fit_predict(sentence_embeddings, sample_weight=None)\n    \n    # Create a dict where each key is an article id and value is a list of sentences with that topic\n    groups = {}\n    \n    for i in range(num_clusters):\n        groups[i] = []\n        \n    for i, sentence in enumerate(sentences):\n        groups[cluster_assignment[i]].append(sentence)\n            \n    return groups"}