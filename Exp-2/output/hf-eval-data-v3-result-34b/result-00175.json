{"path": "output/hf-eval-data-v3-valid/f00705_text_to_speech.py", "content": "# function_import --------------------\n\nfrom transformers import SpeechT5Processor, SpeechT5ForTextToSpeech, SpeechT5HifiGan\nfrom datasets import load_dataset\nimport torch\nimport soundfile as sf\n\n# function_code --------------------\n\ndef text_to_speech(text: str, speaker_id: int = 7306):\n    '''\n    Converts a given text to speech using the SpeechT5 model from Hugging Face Transformers.\n\n    Args:\n        text (str): The text to be converted to speech.\n        speaker_id (int, optional): The id of the speaker whose voice is to be used. Defaults to 7306.\n\n    Returns:\n        str: The path to the generated audio file.\n    '''\n    processor = SpeechT5Processor.from_pretrained('microsoft/speecht5_tts')\n    model = SpeechT5ForTextToSpeech.from_pretrained('microsoft/speecht5_tts')\n    vocoder = SpeechT5HifiGan.from_pretrained('microsoft/speecht5_hifigan')\n    inputs = processor(text=text, return_tensors='pt')\n    embeddings_dataset = load_dataset('Matthijs/cmu-arctic-xvectors', split='validation')\n    speaker_embeddings = torch.tensor(embeddings_dataset[speaker_id]['xvector']).unsqueeze(0)\n    speech = model.generate_speech(inputs['input_ids'], speaker_embeddings, vocoder=vocoder)\n    sf.write('speech.wav', speech.numpy(), samplerate=16000)\n    return 'speech.wav'\n\n# test_function_code --------------------\n\ndef test_text_to_speech():\n    '''\n    Tests the text_to_speech function.\n    '''\n    assert text_to_speech('Hello, world!') == 'speech.wav'\n    assert text_to_speech('This is a test.', 7306) == 'speech.wav'\n    assert text_to_speech('Another test.', 7307) == 'speech.wav'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_text_to_speech()", "function_import": "# function_import --------------------\n\nfrom transformers import SpeechT5Processor, SpeechT5ForTextToSpeech, SpeechT5HifiGan\nfrom datasets import load_dataset\nimport torch\nimport soundfile as sf\n\n", "function_code": "# function_code --------------------\n\ndef text_to_speech(text: str, speaker_id: int = 7306):\n    '''\n    Converts a given text to speech using the SpeechT5 model from Hugging Face Transformers.\n\n    Args:\n        text (str): The text to be converted to speech.\n        speaker_id (int, optional): The id of the speaker whose voice is to be used. Defaults to 7306.\n\n    Returns:\n        str: The path to the generated audio file.\n    '''\n    processor = SpeechT5Processor.from_pretrained('microsoft/speecht5_tts')\n    model = SpeechT5ForTextToSpeech.from_pretrained('microsoft/speecht5_tts')\n    vocoder = SpeechT5HifiGan.from_pretrained('microsoft/speecht5_hifigan')\n    inputs = processor(text=text, return_tensors='pt')\n    embeddings_dataset = load_dataset('Matthijs/cmu-arctic-xvectors', split='validation')\n    speaker_embeddings = torch.tensor(embeddings_dataset[speaker_id]['xvector']).unsqueeze(0)\n    speech = model.generate_speech(inputs['input_ids'], speaker_embeddings, vocoder=vocoder)\n    sf.write('speech.wav', speech.numpy(), samplerate=16000)\n    return 'speech.wav'\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_text_to_speech():\n    '''\n    Tests the text_to_speech function.\n    '''\n    assert text_to_speech('Hello, world!') == 'speech.wav'\n    assert text_to_speech('This is a test.', 7306) == 'speech.wav'\n    assert text_to_speech('Another test.', 7307) == 'speech.wav'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_text_to_speech()", "instruct": "# function_import --------------------\n\nfrom transformers import SpeechT5Processor, SpeechT5ForTextToSpeech, SpeechT5HifiGan\nfrom datasets import load_dataset\nimport torch\nimport soundfile as sf\n\n# function_code --------------------\n\ndef text_to_speech(text: str, speaker_id: int = 7306):\n    '''\n    Converts a given text to speech using the SpeechT5 model from Hugging Face Transformers.\n\n    Args:\n        text (str): The text to be converted to speech.\n        speaker_id (int, optional): The id of the speaker whose voice is to be used. Defaults to 7306.\n\n    Returns:\n        str: The path to the generated audio file.\n    '''", "answer": "\n    processor = SpeechT5Processor.from_pretrained('microsoft/speecht5_tts')\n    model = SpeechT5ForTextToSpeech.from_pretrained('microsoft/speecht5_tts')\n    vocoder = SpeechT5HifiGan.from_pretrained('microsoft/speecht5_hifigan')\n    inputs = processor(text=text, return_tensors='pt')\n    embeddings_dataset = load_dataset('Matthijs/cmu-arctic-xvectors', split='validation')\n    speaker_embeddings = torch.tensor(embeddings_dataset[speaker_id]['xvector']).unsqueeze(0)\n    speech = model.generate_speech(inputs['input_ids'], speaker_embeddings, vocoder=vocoder)\n    sf.write('speech.wav', speech.numpy(), samplerate=16000)\n    return 'speech.wav'\n\n", "prediction": "    \n    processor = SpeechT5Processor.from_pretrained(\"google/speech-t5-large-ssv2-en-de\")\n    model = SpeechT5ForTextToSpeech.from_pretrained(\"google/speech-t5-large-ssv2-en-de\")\n    gan = SpeechT5HifiGan.from_pretrained(\"patrickvonplaten/speech-t5-hifigan-en-at\")\n    \n    inputs = processor(text, return_tensors=\"pt\", padding=True)\n    \n    input_features = inputs[\"input_features\"]\n    attention_mask = inputs[\"attention_mask\"]\n    speaker_ids = torch.tensor([[speaker_id]]).repeat(len(input_features), 1)\n    \n    hidden_states = model(\n        input_features=input_features,\n        attention_mask=attention_mask,\n        speaker_ids=speaker_ids,\n    )\n    \n    # Decoder has two outputs (mels and mel_lengths). Only the first one is important\n    hidden_states = hidden_states[0]\n    audio = gan(hidden_states).cpu()\n    \n    sf.write('audio.wav', audio, 16000)\n    \n    return 'audio.wav'"}