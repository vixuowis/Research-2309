{"path": "output/hf-eval-data-v3-valid/f00371_generate_image.py", "content": "# function_import --------------------\n\nimport os\nfrom diffusers import DDPMPipeline\n\n# function_code --------------------\n\ndef generate_image(model_id: str) -> None:\n    '''\n    Generate a high-quality image using a pre-trained model.\n\n    Args:\n        model_id (str): The id of the pre-trained model.\n\n    Returns:\n        None\n\n    Raises:\n        ModuleNotFoundError: If the diffusers library is not installed.\n    '''\n    ddpm = DDPMPipeline.from_pretrained(model_id)\n    image = ddpm().images[0]\n    image.save('ddpm_generated_image.png')\n\n# test_function_code --------------------\n\ndef test_generate_image():\n    '''\n    Test the generate_image function.\n\n    Returns:\n        str: 'All Tests Passed' if all assertions pass.\n    '''\n    try:\n        generate_image('google/ddpm-church-256')\n        assert os.path.exists('ddpm_generated_image.png')\n    except Exception as e:\n        print(f'Test failed with exception: {e}')\n        raise e\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\nprint(test_generate_image())", "function_import": "# function_import --------------------\n\nimport os\nfrom diffusers import DDPMPipeline\n\n", "function_code": "# function_code --------------------\n\ndef generate_image(model_id: str) -> None:\n    '''\n    Generate a high-quality image using a pre-trained model.\n\n    Args:\n        model_id (str): The id of the pre-trained model.\n\n    Returns:\n        None\n\n    Raises:\n        ModuleNotFoundError: If the diffusers library is not installed.\n    '''\n    ddpm = DDPMPipeline.from_pretrained(model_id)\n    image = ddpm().images[0]\n    image.save('ddpm_generated_image.png')\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_image():\n    '''\n    Test the generate_image function.\n\n    Returns:\n        str: 'All Tests Passed' if all assertions pass.\n    '''\n    try:\n        generate_image('google/ddpm-church-256')\n        assert os.path.exists('ddpm_generated_image.png')\n    except Exception as e:\n        print(f'Test failed with exception: {e}')\n        raise e\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\nprint(test_generate_image())", "instruct": "# function_import --------------------\n\nimport os\nfrom diffusers import DDPMPipeline\n\n# function_code --------------------\n\ndef generate_image(model_id: str) -> None:\n    '''\n    Generate a high-quality image using a pre-trained model.\n\n    Args:\n        model_id (str): The id of the pre-trained model.\n\n    Returns:\n        None\n\n    Raises:\n        ModuleNotFoundError: If the diffusers library is not installed.\n    '''", "answer": "\n    ddpm = DDPMPipeline.from_pretrained(model_id)\n    image = ddpm().images[0]\n    image.save('ddpm_generated_image.png')\n\n", "prediction": "\n    if 'DIFFUSERS_DATA_DIR' in os.environ:\n        data_dir = os.environ['DIFFUSERS_DATA_DIR']\n    else:\n        data_dir = os.path.join(os.getcwd(), '.data')\n    \n    pipeline = DDPMPipeline()\n    pipeline.load_model(model_id, 'models')\n    pipeline.generate_image('outputs', data_dir)"}