{"path": "output/hf-eval-data-v3-valid/f00612_generate_audio_announcement.py", "content": "# function_import --------------------\n\nfrom transformers import SpeechT5Processor, SpeechT5ForTextToSpeech, SpeechT5HifiGan\nfrom datasets import load_dataset\nimport torch\nimport soundfile as sf\n\n# function_code --------------------\n\ndef generate_audio_announcement(text):\n    '''\n    Generate an audio announcement from a given text using the SpeechT5 model.\n    \n    Args:\n        text (str): The text to be converted to speech.\n    \n    Returns:\n        None. The function writes the output audio to a .wav file.\n    \n    Raises:\n        Exception: If there is an error in generating the audio.\n    '''\n    processor = SpeechT5Processor.from_pretrained('microsoft/speecht5_tts')\n    model = SpeechT5ForTextToSpeech.from_pretrained('microsoft/speecht5_tts')\n    vocoder = SpeechT5HifiGan.from_pretrained('microsoft/speecht5_hifigan')\n    inputs = processor(text=text, return_tensors='pt')\n    embeddings_dataset = load_dataset('Matthijs/cmu-arctic-xvectors', split='validation')\n    speaker_embeddings = torch.tensor(embeddings_dataset[7306]['xvector']).unsqueeze(0)\n    speech = model.generate_speech(inputs['input_ids'], speaker_embeddings, vocoder=vocoder)\n    sf.write('speech.wav', speech.numpy(), samplerate=16000)\n\n# test_function_code --------------------\n\ndef test_generate_audio_announcement():\n    '''\n    Test the generate_audio_announcement function.\n    '''\n    try:\n        generate_audio_announcement('This is a test announcement.')\n        print('Test passed.')\n    except Exception as e:\n        print('Test failed. Error: ', e)\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_generate_audio_announcement()", "function_import": "# function_import --------------------\n\nfrom transformers import SpeechT5Processor, SpeechT5ForTextToSpeech, SpeechT5HifiGan\nfrom datasets import load_dataset\nimport torch\nimport soundfile as sf\n\n", "function_code": "# function_code --------------------\n\ndef generate_audio_announcement(text):\n    '''\n    Generate an audio announcement from a given text using the SpeechT5 model.\n    \n    Args:\n        text (str): The text to be converted to speech.\n    \n    Returns:\n        None. The function writes the output audio to a .wav file.\n    \n    Raises:\n        Exception: If there is an error in generating the audio.\n    '''\n    processor = SpeechT5Processor.from_pretrained('microsoft/speecht5_tts')\n    model = SpeechT5ForTextToSpeech.from_pretrained('microsoft/speecht5_tts')\n    vocoder = SpeechT5HifiGan.from_pretrained('microsoft/speecht5_hifigan')\n    inputs = processor(text=text, return_tensors='pt')\n    embeddings_dataset = load_dataset('Matthijs/cmu-arctic-xvectors', split='validation')\n    speaker_embeddings = torch.tensor(embeddings_dataset[7306]['xvector']).unsqueeze(0)\n    speech = model.generate_speech(inputs['input_ids'], speaker_embeddings, vocoder=vocoder)\n    sf.write('speech.wav', speech.numpy(), samplerate=16000)\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_audio_announcement():\n    '''\n    Test the generate_audio_announcement function.\n    '''\n    try:\n        generate_audio_announcement('This is a test announcement.')\n        print('Test passed.')\n    except Exception as e:\n        print('Test failed. Error: ', e)\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_generate_audio_announcement()", "instruct": "# function_import --------------------\n\nfrom transformers import SpeechT5Processor, SpeechT5ForTextToSpeech, SpeechT5HifiGan\nfrom datasets import load_dataset\nimport torch\nimport soundfile as sf\n\n# function_code --------------------\n\ndef generate_audio_announcement(text):\n    '''\n    Generate an audio announcement from a given text using the SpeechT5 model.\n    \n    Args:\n        text (str): The text to be converted to speech.\n    \n    Returns:\n        None. The function writes the output audio to a .wav file.\n    \n    Raises:\n        Exception: If there is an error in generating the audio.\n    '''", "answer": "\n    processor = SpeechT5Processor.from_pretrained('microsoft/speecht5_tts')\n    model = SpeechT5ForTextToSpeech.from_pretrained('microsoft/speecht5_tts')\n    vocoder = SpeechT5HifiGan.from_pretrained('microsoft/speecht5_hifigan')\n    inputs = processor(text=text, return_tensors='pt')\n    embeddings_dataset = load_dataset('Matthijs/cmu-arctic-xvectors', split='validation')\n    speaker_embeddings = torch.tensor(embeddings_dataset[7306]['xvector']).unsqueeze(0)\n    speech = model.generate_speech(inputs['input_ids'], speaker_embeddings, vocoder=vocoder)\n    sf.write('speech.wav', speech.numpy(), samplerate=16000)\n\n", "prediction": "\n    try:\n        processor = SpeechT5Processor.from_pretrained(\"speech-t5-hifi-gan/v1\")\n        model = SpeechT5ForTextToSpeech.from_pretrained(\"speech-t5-hifi-gan/v1\", vocab_size=processor.get_vocab_size())  # for PyTorch < 1.9.0 use \"vocab_size\" instead of \"vocab_size_or_config_json_key\"\n        hifi_gan = SpeechT5HifiGan.from_pretrained(\"speech-t5-hifi-gan/v1\")\n        \n        inputs = processor(text, return_tensors=\"pt\", padding=True)\n    \n        with torch.no_grad():\n            audio = model.generate(**inputs, num_beams=10, min_length=32000)\n            \n        audio = hifi_gan.batch_inference(audio)\n        \n        sf.write(\"./data/audio-announcement/output-audio.wav\", audio[0].cpu().numpy(), 48000, \"PCM_16\")\n    \n    except:\n        raise Exception('Error in generating audio announcement')"}