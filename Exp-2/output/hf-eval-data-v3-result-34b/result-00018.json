{"path": "output/hf-eval-data-v3-valid/f00088_calculate_carbon_emissions.py", "content": "# function_import --------------------\n\nimport joblib\nimport pandas as pd\nimport json\nimport numpy as np\n\n# function_code --------------------\n\ndef calculate_carbon_emissions(data_file):\n    \"\"\"\n    Calculate the carbon emissions for given data.\n\n    Args:\n        data_file (str): The path to the input data file in CSV format.\n\n    Returns:\n        numpy.ndarray: The predicted carbon emissions.\n\n    Raises:\n        FileNotFoundError: If the model or config file does not exist.\n        pd.errors.EmptyDataError: If the data file is empty.\n    \"\"\"\n    model = joblib.load('model.joblib')\n    config = json.load(open('config.json'))\n    features = config['features']\n\n    data = pd.read_csv(data_file)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n\n    predictions = model.predict(data)\n    return predictions\n\n# test_function_code --------------------\n\ndef test_calculate_carbon_emissions():\n    \"\"\"Test the calculate_carbon_emissions function.\"\"\"\n    data_file = 'test_data.csv'\n    try:\n        predictions = calculate_carbon_emissions(data_file)\n        assert isinstance(predictions, np.ndarray), 'The result should be a numpy array.'\n        assert predictions.shape[0] > 0, 'The result should not be empty.'\n    except FileNotFoundError:\n        print('The model or config file does not exist.')\n    except pd.errors.EmptyDataError:\n        print('The data file is empty.')\n    else:\n        print('All tests passed.')\n\n# call_test_function_code --------------------\n\ntest_calculate_carbon_emissions()", "function_import": "# function_import --------------------\n\nimport joblib\nimport pandas as pd\nimport json\nimport numpy as np\n\n", "function_code": "# function_code --------------------\n\ndef calculate_carbon_emissions(data_file):\n    \"\"\"\n    Calculate the carbon emissions for given data.\n\n    Args:\n        data_file (str): The path to the input data file in CSV format.\n\n    Returns:\n        numpy.ndarray: The predicted carbon emissions.\n\n    Raises:\n        FileNotFoundError: If the model or config file does not exist.\n        pd.errors.EmptyDataError: If the data file is empty.\n    \"\"\"\n    model = joblib.load('model.joblib')\n    config = json.load(open('config.json'))\n    features = config['features']\n\n    data = pd.read_csv(data_file)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n\n    predictions = model.predict(data)\n    return predictions\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_calculate_carbon_emissions():\n    \"\"\"Test the calculate_carbon_emissions function.\"\"\"\n    data_file = 'test_data.csv'\n    try:\n        predictions = calculate_carbon_emissions(data_file)\n        assert isinstance(predictions, np.ndarray), 'The result should be a numpy array.'\n        assert predictions.shape[0] > 0, 'The result should not be empty.'\n    except FileNotFoundError:\n        print('The model or config file does not exist.')\n    except pd.errors.EmptyDataError:\n        print('The data file is empty.')\n    else:\n        print('All tests passed.')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_calculate_carbon_emissions()", "instruct": "# function_import --------------------\n\nimport joblib\nimport pandas as pd\nimport json\nimport numpy as np\n\n# function_code --------------------\n\ndef calculate_carbon_emissions(data_file):\n    \"\"\"\n    Calculate the carbon emissions for given data.\n\n    Args:\n        data_file (str): The path to the input data file in CSV format.\n\n    Returns:\n        numpy.ndarray: The predicted carbon emissions.\n\n    Raises:\n        FileNotFoundError: If the model or config file does not exist.\n        pd.errors.EmptyDataError: If the data file is empty.\n    \"\"\"", "answer": "\n    model = joblib.load('model.joblib')\n    config = json.load(open('config.json'))\n    features = config['features']\n\n    data = pd.read_csv(data_file)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n\n    predictions = model.predict(data)\n    return predictions\n\n", "prediction": "\n    # Load the input CSV file into a pandas dataframe\n    if (data_file == \"\"):\n        raise pd.errors.EmptyDataError()\n    \n    data = pd.read_csv(data_file)\n\n    # Create an instance of the carbon estimator model\n    estimator = joblib.load(\"model/carbon_estimator.pkl\")\n    carbonEmissions = estimator.predict(data)\n\n    return carbonEmissions"}