{"path": "output/hf-eval-data-v3-valid/f00874_question_answering_tool.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef question_answering_tool(context: str, question: str) -> dict:\n    '''\n    This function uses a pretrained model from the transformers library to answer questions based on a given context.\n\n    Args:\n        context (str): The context from which the answer should be extracted.\n        question (str): The question for which an answer is needed.\n\n    Returns:\n        dict: A dictionary containing the answer and the score of the answer.\n    '''\n    qa_tool = pipeline('question-answering', model='bert-large-cased-whole-word-masking-finetuned-squad')\n    answer = qa_tool({'context': context, 'question': question})\n    return answer\n\n# test_function_code --------------------\n\ndef test_question_answering_tool():\n    '''\n    This function tests the question_answering_tool function.\n    '''\n    context = 'This is a long document containing company policies, financial details, and team structures.'\n    question = 'What are the company policies mentioned in the document?'\n    answer = question_answering_tool(context, question)\n    assert isinstance(answer, dict)\n    assert 'answer' in answer\n    assert 'score' in answer\n\n    context = 'The sky is blue and the grass is green.'\n    question = 'What color is the sky?'\n    answer = question_answering_tool(context, question)\n    assert answer['answer'] == 'blue'\n\n    context = 'Python is a popular programming language.'\n    question = 'What is Python?'\n    answer = question_answering_tool(context, question)\n    assert answer['answer'] == 'a popular programming language'\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_question_answering_tool()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef question_answering_tool(context: str, question: str) -> dict:\n    '''\n    This function uses a pretrained model from the transformers library to answer questions based on a given context.\n\n    Args:\n        context (str): The context from which the answer should be extracted.\n        question (str): The question for which an answer is needed.\n\n    Returns:\n        dict: A dictionary containing the answer and the score of the answer.\n    '''\n    qa_tool = pipeline('question-answering', model='bert-large-cased-whole-word-masking-finetuned-squad')\n    answer = qa_tool({'context': context, 'question': question})\n    return answer\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_question_answering_tool():\n    '''\n    This function tests the question_answering_tool function.\n    '''\n    context = 'This is a long document containing company policies, financial details, and team structures.'\n    question = 'What are the company policies mentioned in the document?'\n    answer = question_answering_tool(context, question)\n    assert isinstance(answer, dict)\n    assert 'answer' in answer\n    assert 'score' in answer\n\n    context = 'The sky is blue and the grass is green.'\n    question = 'What color is the sky?'\n    answer = question_answering_tool(context, question)\n    assert answer['answer'] == 'blue'\n\n    context = 'Python is a popular programming language.'\n    question = 'What is Python?'\n    answer = question_answering_tool(context, question)\n    assert answer['answer'] == 'a popular programming language'\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_question_answering_tool()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef question_answering_tool(context: str, question: str) -> dict:\n    '''\n    This function uses a pretrained model from the transformers library to answer questions based on a given context.\n\n    Args:\n        context (str): The context from which the answer should be extracted.\n        question (str): The question for which an answer is needed.\n\n    Returns:\n        dict: A dictionary containing the answer and the score of the answer.\n    '''", "answer": "\n    qa_tool = pipeline('question-answering', model='bert-large-cased-whole-word-masking-finetuned-squad')\n    answer = qa_tool({'context': context, 'question': question})\n    return answer\n\n", "prediction": "\n\n    nlp = pipeline('question-answering')         # load pretrained model from transformers library\n    \n    result = nlp({'context': context, 'question': question})   # predict answer\n\n    return {'answer': result['answer'], 'score': result['score']}"}