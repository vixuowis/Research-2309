{"path": "output/hf-eval-data-v3-valid/f00854_generate_cat_image.py", "content": "# function_import --------------------\n\nfrom diffusers import DDPMPipeline\nimport os\n\n# function_code --------------------\n\ndef generate_cat_image(model_id: str = 'google/ddpm-ema-cat-256', output_file: str = 'ddpm_generated_cat_image.png'):\n    \"\"\"\n    Generate a cat image using a pre-trained model from Hugging Face Transformers.\n\n    Args:\n        model_id (str): The ID of the pre-trained model. Default is 'google/ddpm-ema-cat-256'.\n        output_file (str): The file path to save the generated image. Default is 'ddpm_generated_cat_image.png'.\n\n    Returns:\n        None\n\n    Raises:\n        ModuleNotFoundError: If the diffusers package is not installed.\n    \"\"\"\n    ddpm = DDPMPipeline.from_pretrained(model_id)\n    image = ddpm().images[0]\n    image.save(output_file)\n\n# test_function_code --------------------\n\ndef test_generate_cat_image():\n    \"\"\"\n    Test the generate_cat_image function.\n    \"\"\"\n    try:\n        generate_cat_image()\n        assert os.path.exists('ddpm_generated_cat_image.png')\n    except Exception as e:\n        print(f'Test failed with exception: {e}')\n    else:\n        print('All Tests Passed')\n\n# call_test_function_code --------------------\n\ntest_generate_cat_image()", "function_import": "# function_import --------------------\n\nfrom diffusers import DDPMPipeline\nimport os\n\n", "function_code": "# function_code --------------------\n\ndef generate_cat_image(model_id: str = 'google/ddpm-ema-cat-256', output_file: str = 'ddpm_generated_cat_image.png'):\n    \"\"\"\n    Generate a cat image using a pre-trained model from Hugging Face Transformers.\n\n    Args:\n        model_id (str): The ID of the pre-trained model. Default is 'google/ddpm-ema-cat-256'.\n        output_file (str): The file path to save the generated image. Default is 'ddpm_generated_cat_image.png'.\n\n    Returns:\n        None\n\n    Raises:\n        ModuleNotFoundError: If the diffusers package is not installed.\n    \"\"\"\n    ddpm = DDPMPipeline.from_pretrained(model_id)\n    image = ddpm().images[0]\n    image.save(output_file)\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_cat_image():\n    \"\"\"\n    Test the generate_cat_image function.\n    \"\"\"\n    try:\n        generate_cat_image()\n        assert os.path.exists('ddpm_generated_cat_image.png')\n    except Exception as e:\n        print(f'Test failed with exception: {e}')\n    else:\n        print('All Tests Passed')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_generate_cat_image()", "instruct": "# function_import --------------------\n\nfrom diffusers import DDPMPipeline\nimport os\n\n# function_code --------------------\n\ndef generate_cat_image(model_id: str = 'google/ddpm-ema-cat-256', output_file: str = 'ddpm_generated_cat_image.png'):\n    \"\"\"\n    Generate a cat image using a pre-trained model from Hugging Face Transformers.\n\n    Args:\n        model_id (str): The ID of the pre-trained model. Default is 'google/ddpm-ema-cat-256'.\n        output_file (str): The file path to save the generated image. Default is 'ddpm_generated_cat_image.png'.\n\n    Returns:\n        None\n\n    Raises:\n        ModuleNotFoundError: If the diffusers package is not installed.\n    \"\"\"", "answer": "\n    ddpm = DDPMPipeline.from_pretrained(model_id)\n    image = ddpm().images[0]\n    image.save(output_file)\n\n", "prediction": "    \n\n    # create pipeline object\n    pipe = DDPMPipeline()\n\n    # generate image and save to output file\n    pipe(model_id=model_id, output_file=output_file)"}