{"path": "output/hf-eval-data-v3-valid/f00359_classify_computer_parts.py", "content": "# function_import --------------------\n\nfrom transformers import ViTImageProcessor, ViTForImageClassification\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef classify_computer_parts(user_uploaded_image_file_path):\n    '''\n    Classify the computer parts in the image uploaded by the user.\n\n    Args:\n        user_uploaded_image_file_path (str): The file path of the image uploaded by the user.\n\n    Returns:\n        str: The predicted label of the computer part in the image.\n    '''\n    processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224')\n    model = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\n\n    image = Image.open(user_uploaded_image_file_path)\n    inputs = processor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    logits = outputs.logits\n    predicted_class_idx = logits.argmax(-1).item()\n    predicted_label = model.config.id2label[predicted_class_idx]\n\n    return predicted_label\n\n# test_function_code --------------------\n\ndef test_classify_computer_parts():\n    '''\n    Test the function classify_computer_parts.\n    '''\n    url = 'https://placekitten.com/200/300'\n    response = requests.get(url, stream=True)\n    with open('test_image.jpg', 'wb') as f:\n        f.write(response.content)\n\n    predicted_label = classify_computer_parts('test_image.jpg')\n    assert isinstance(predicted_label, str), 'The predicted label should be a string.'\n\n    print('All Tests Passed')\n\n# call_test_function_code --------------------\n\ntest_classify_computer_parts()", "function_import": "# function_import --------------------\n\nfrom transformers import ViTImageProcessor, ViTForImageClassification\nfrom PIL import Image\nimport requests\n\n", "function_code": "# function_code --------------------\n\ndef classify_computer_parts(user_uploaded_image_file_path):\n    '''\n    Classify the computer parts in the image uploaded by the user.\n\n    Args:\n        user_uploaded_image_file_path (str): The file path of the image uploaded by the user.\n\n    Returns:\n        str: The predicted label of the computer part in the image.\n    '''\n    processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224')\n    model = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\n\n    image = Image.open(user_uploaded_image_file_path)\n    inputs = processor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    logits = outputs.logits\n    predicted_class_idx = logits.argmax(-1).item()\n    predicted_label = model.config.id2label[predicted_class_idx]\n\n    return predicted_label\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_classify_computer_parts():\n    '''\n    Test the function classify_computer_parts.\n    '''\n    url = 'https://placekitten.com/200/300'\n    response = requests.get(url, stream=True)\n    with open('test_image.jpg', 'wb') as f:\n        f.write(response.content)\n\n    predicted_label = classify_computer_parts('test_image.jpg')\n    assert isinstance(predicted_label, str), 'The predicted label should be a string.'\n\n    print('All Tests Passed')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_classify_computer_parts()", "instruct": "# function_import --------------------\n\nfrom transformers import ViTImageProcessor, ViTForImageClassification\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef classify_computer_parts(user_uploaded_image_file_path):\n    '''\n    Classify the computer parts in the image uploaded by the user.\n\n    Args:\n        user_uploaded_image_file_path (str): The file path of the image uploaded by the user.\n\n    Returns:\n        str: The predicted label of the computer part in the image.\n    '''", "answer": "\n    processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224')\n    model = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\n\n    image = Image.open(user_uploaded_image_file_path)\n    inputs = processor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    logits = outputs.logits\n    predicted_class_idx = logits.argmax(-1).item()\n    predicted_label = model.config.id2label[predicted_class_idx]\n\n    return predicted_label\n\n", "prediction": "\n    \n    # Load processor and model for image classification.\n    processor = ViTImageProcessor.from_pretrained(\"nielsr/vit-base-patch16-224\")\n    model = ViTForImageClassification.from_pretrained('nielsr/vit-base-patch16-224')\n    \n    # Preprocess the user uploaded image with processor, then predict its label.\n    img = Image.open(user_uploaded_image_file_path)\n    processed_image = processor(img, return_tensors=\"pt\")\n    outputs = model(**processed_image).logits\n    \n    # Get the predicted probability for each class/label, then get the most likely label.\n    probs = outputs.softmax(dim=-1)[0]\n    top_class = probs.argmax().item() \n    return model.config.id2label[top_class]\n"}