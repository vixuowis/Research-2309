{"path": "output/hf-eval-data-v3-valid/f00146_translate_english_to_german.py", "content": "# function_import --------------------\n\nfrom transformers import T5Tokenizer, T5ForConditionalGeneration\n\n# function_code --------------------\n\ndef translate_english_to_german(input_text: str) -> str:\n    \"\"\"\n    Translates English text to German using the T5ForConditionalGeneration model from Hugging Face Transformers.\n\n    Args:\n        input_text (str): The English text to be translated.\n\n    Returns:\n        str: The translated German text.\n    \"\"\"\n    tokenizer = T5Tokenizer.from_pretrained('google/flan-t5-large')\n    model = T5ForConditionalGeneration.from_pretrained('google/flan-t5-large')\n    input_ids = tokenizer(input_text, return_tensors='pt').input_ids\n    outputs = model.generate(input_ids)\n    translated_text = tokenizer.decode(outputs[0])\n    return translated_text\n\n# test_function_code --------------------\n\ndef test_translate_english_to_german():\n    assert translate_english_to_german('Where are the parks in Munich?') != ''\n    assert translate_english_to_german('How old are you?') != ''\n    assert translate_english_to_german('What is your name?') != ''\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_translate_english_to_german()", "function_import": "# function_import --------------------\n\nfrom transformers import T5Tokenizer, T5ForConditionalGeneration\n\n", "function_code": "# function_code --------------------\n\ndef translate_english_to_german(input_text: str) -> str:\n    \"\"\"\n    Translates English text to German using the T5ForConditionalGeneration model from Hugging Face Transformers.\n\n    Args:\n        input_text (str): The English text to be translated.\n\n    Returns:\n        str: The translated German text.\n    \"\"\"\n    tokenizer = T5Tokenizer.from_pretrained('google/flan-t5-large')\n    model = T5ForConditionalGeneration.from_pretrained('google/flan-t5-large')\n    input_ids = tokenizer(input_text, return_tensors='pt').input_ids\n    outputs = model.generate(input_ids)\n    translated_text = tokenizer.decode(outputs[0])\n    return translated_text\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_translate_english_to_german():\n    assert translate_english_to_german('Where are the parks in Munich?') != ''\n    assert translate_english_to_german('How old are you?') != ''\n    assert translate_english_to_german('What is your name?') != ''\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_translate_english_to_german()", "instruct": "# function_import --------------------\n\nfrom transformers import T5Tokenizer, T5ForConditionalGeneration\n\n# function_code --------------------\n\ndef translate_english_to_german(input_text: str) -> str:\n    \"\"\"\n    Translates English text to German using the T5ForConditionalGeneration model from Hugging Face Transformers.\n\n    Args:\n        input_text (str): The English text to be translated.\n\n    Returns:\n        str: The translated German text.\n    \"\"\"", "answer": "\n    tokenizer = T5Tokenizer.from_pretrained('google/flan-t5-large')\n    model = T5ForConditionalGeneration.from_pretrained('google/flan-t5-large')\n    input_ids = tokenizer(input_text, return_tensors='pt').input_ids\n    outputs = model.generate(input_ids)\n    translated_text = tokenizer.decode(outputs[0])\n    return translated_text\n\n", "prediction": "\n    # Load the pre-trained tokenizer\n    english_german_tokenizer = T5Tokenizer.from_pretrained(\"mrm8488/t5-base-finetuned-english-to-german\")\n\n    # Prepare the English text for translation: add the task prefix \n    input_text = \"translate English to German: \" + input_text\n    \n    # Generate tokenized sequence\n    tokenized_text = english_german_tokenizer.encode(input_text, return_tensors=\"pt\")\n\n    # Load the pre-trained T5ForConditionalGeneration model and generate German text using the English text as input\n    german_translated_model = T5ForConditionalGeneration.from_pretrained(\"mrm8488/t5-base-finetuned-english-to-german\")\n    translated = german_translated_model.generate(tokenized_text)\n    \n    # Transform the generated tokenized sequence back to German text\n    translated_german_text = english_german_tokenizer.decode(translated[0], skip_special_tokens=True)    \n\n    return translated_german_text"}