{"path": "output/hf-eval-data-v3-valid/f00468_segment_image.py", "content": "# function_import --------------------\n\nfrom transformers import SegformerFeatureExtractor, SegformerForSemanticSegmentation\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef segment_image(image_url):\n    \"\"\"\n    Analyze an image of an urban scene to identify and separate regions with different semantics.\n\n    Args:\n        image_url (str): URL of the image to be analyzed.\n\n    Returns:\n        torch.Tensor: The output logits from the semantic segmentation model.\n\n    Raises:\n        Exception: If the image cannot be opened.\n    \"\"\"\n    feature_extractor = SegformerFeatureExtractor.from_pretrained('nvidia/segformer-b2-finetuned-cityscapes-1024-1024')\n    model = SegformerForSemanticSegmentation.from_pretrained('nvidia/segformer-b2-finetuned-cityscapes-1024-1024')\n\n    try:\n        image = Image.open(requests.get(image_url, stream=True).raw)\n    except Exception as e:\n        raise Exception('Unable to open image.') from e\n\n    inputs = feature_extractor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n\n    return outputs.logits\n\n# test_function_code --------------------\n\ndef test_segment_image():\n    \"\"\"\n    Test the segment_image function.\n    \"\"\"\n    test_image_url = 'https://placekitten.com/200/300'\n    try:\n        output = segment_image(test_image_url)\n        assert output is not None, 'Output is None.'\n        assert output.shape[0] == 1, 'Output shape is incorrect.'\n    except Exception as e:\n        print(f'Test failed with error: {e}')\n    else:\n        print('All tests passed.')\n\n# call_test_function_code --------------------\n\ntest_segment_image()", "function_import": "# function_import --------------------\n\nfrom transformers import SegformerFeatureExtractor, SegformerForSemanticSegmentation\nfrom PIL import Image\nimport requests\n\n", "function_code": "# function_code --------------------\n\ndef segment_image(image_url):\n    \"\"\"\n    Analyze an image of an urban scene to identify and separate regions with different semantics.\n\n    Args:\n        image_url (str): URL of the image to be analyzed.\n\n    Returns:\n        torch.Tensor: The output logits from the semantic segmentation model.\n\n    Raises:\n        Exception: If the image cannot be opened.\n    \"\"\"\n    feature_extractor = SegformerFeatureExtractor.from_pretrained('nvidia/segformer-b2-finetuned-cityscapes-1024-1024')\n    model = SegformerForSemanticSegmentation.from_pretrained('nvidia/segformer-b2-finetuned-cityscapes-1024-1024')\n\n    try:\n        image = Image.open(requests.get(image_url, stream=True).raw)\n    except Exception as e:\n        raise Exception('Unable to open image.') from e\n\n    inputs = feature_extractor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n\n    return outputs.logits\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_segment_image():\n    \"\"\"\n    Test the segment_image function.\n    \"\"\"\n    test_image_url = 'https://placekitten.com/200/300'\n    try:\n        output = segment_image(test_image_url)\n        assert output is not None, 'Output is None.'\n        assert output.shape[0] == 1, 'Output shape is incorrect.'\n    except Exception as e:\n        print(f'Test failed with error: {e}')\n    else:\n        print('All tests passed.')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_segment_image()", "instruct": "# function_import --------------------\n\nfrom transformers import SegformerFeatureExtractor, SegformerForSemanticSegmentation\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef segment_image(image_url):\n    \"\"\"\n    Analyze an image of an urban scene to identify and separate regions with different semantics.\n\n    Args:\n        image_url (str): URL of the image to be analyzed.\n\n    Returns:\n        torch.Tensor: The output logits from the semantic segmentation model.\n\n    Raises:\n        Exception: If the image cannot be opened.\n    \"\"\"", "answer": "\n    feature_extractor = SegformerFeatureExtractor.from_pretrained('nvidia/segformer-b2-finetuned-cityscapes-1024-1024')\n    model = SegformerForSemanticSegmentation.from_pretrained('nvidia/segformer-b2-finetuned-cityscapes-1024-1024')\n\n    try:\n        image = Image.open(requests.get(image_url, stream=True).raw)\n    except Exception as e:\n        raise Exception('Unable to open image.') from e\n\n    inputs = feature_extractor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n\n    return outputs.logits\n\n", "prediction": "\n    \n    # Download the image and save it as `image_pil`.\n    try:\n        response = requests.get(image_url)\n        image_pil = Image.open(BytesIO(response.content))\n\n    except Exception as error:\n        raise Exception(error)\n    \n    # Load the feature extractor and the model.\n    feature_extractor = SegformerFeatureExtractor.from_pretrained(\"nvidia/segformer-b0-finetuned-ade-512-512\")\n    model = SegformerForSemanticSegmentation.from_pretrained(\"nvidia/segformer-b0-finetuned-ade-512-512\")\n    \n    # Encode the input image and generate an output prediction.\n    inputs = feature_extractor(images=image_pil, return_tensors=\"pt\")\n    outputs = model(**inputs)\n    logits = outputs.logits[0]\n\n    return logits"}