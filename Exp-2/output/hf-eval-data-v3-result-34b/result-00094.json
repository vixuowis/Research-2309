{"path": "output/hf-eval-data-v3-valid/f00413_generate_embeddings.py", "content": "# function_import --------------------\n\nfrom sentence_transformers import SentenceTransformer\n\n# function_code --------------------\n\ndef generate_embeddings(sentences):\n    '''\n    Generate embeddings for the input sentences using SentenceTransformer model.\n\n    Args:\n        sentences (list): A list of sentences for which to generate embeddings.\n\n    Returns:\n        numpy.ndarray: A 2D array where each row represents the embedding of a sentence.\n    '''\n    model = SentenceTransformer('sentence-transformers/bert-base-nli-mean-tokens')\n    embeddings = model.encode(sentences)\n    return embeddings\n\n# test_function_code --------------------\n\ndef test_generate_embeddings():\n    '''\n    Test the generate_embeddings function.\n    '''\n    sentences = ['This is an example sentence', 'Each sentence is converted']\n    embeddings = generate_embeddings(sentences)\n    assert embeddings.shape[0] == len(sentences), 'Number of embeddings should be equal to number of sentences'\n    assert embeddings.shape[1] == 768, 'Each embedding should have 768 dimensions'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_generate_embeddings()", "function_import": "# function_import --------------------\n\nfrom sentence_transformers import SentenceTransformer\n\n", "function_code": "# function_code --------------------\n\ndef generate_embeddings(sentences):\n    '''\n    Generate embeddings for the input sentences using SentenceTransformer model.\n\n    Args:\n        sentences (list): A list of sentences for which to generate embeddings.\n\n    Returns:\n        numpy.ndarray: A 2D array where each row represents the embedding of a sentence.\n    '''\n    model = SentenceTransformer('sentence-transformers/bert-base-nli-mean-tokens')\n    embeddings = model.encode(sentences)\n    return embeddings\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_embeddings():\n    '''\n    Test the generate_embeddings function.\n    '''\n    sentences = ['This is an example sentence', 'Each sentence is converted']\n    embeddings = generate_embeddings(sentences)\n    assert embeddings.shape[0] == len(sentences), 'Number of embeddings should be equal to number of sentences'\n    assert embeddings.shape[1] == 768, 'Each embedding should have 768 dimensions'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_generate_embeddings()", "instruct": "# function_import --------------------\n\nfrom sentence_transformers import SentenceTransformer\n\n# function_code --------------------\n\ndef generate_embeddings(sentences):\n    '''\n    Generate embeddings for the input sentences using SentenceTransformer model.\n\n    Args:\n        sentences (list): A list of sentences for which to generate embeddings.\n\n    Returns:\n        numpy.ndarray: A 2D array where each row represents the embedding of a sentence.\n    '''", "answer": "\n    model = SentenceTransformer('sentence-transformers/bert-base-nli-mean-tokens')\n    embeddings = model.encode(sentences)\n    return embeddings\n\n", "prediction": "\n\n    # Generate SentenceTransformer model embeddings for the sentences\n    \n    st_model = SentenceTransformer('bert-base-nli-mean-tokens')\n    print(\"Model generated.\")\n    embeddings = st_model.encode(sentences)\n\n    return embeddings\n"}