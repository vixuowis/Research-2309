{"path": "output/hf-eval-data-v3-valid/f00346_generate_image_from_text.py", "content": "# function_import --------------------\n\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom PIL import Image\nimport os\n\n# function_code --------------------\n\ndef generate_image_from_text(prompt: str, model_id: str = 'stabilityai/stable-diffusion-2-1', save_path: str = 'generated_image.png'):\n    \"\"\"\n    Generate an image based on the given text description using the StableDiffusionPipeline model.\n\n    Args:\n        prompt (str): The text description of the scene.\n        model_id (str, optional): The id of the pre-trained model. Defaults to 'stabilityai/stable-diffusion-2-1'.\n        save_path (str, optional): The path to save the generated image. Defaults to 'generated_image.png'.\n\n    Returns:\n        None\n    \"\"\"\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    generated_image = pipe(prompt).images[0]\n    generated_image.save(save_path)\n\n# test_function_code --------------------\n\ndef test_generate_image_from_text():\n    \"\"\"\n    Test the function generate_image_from_text.\n\n    Returns:\n        str: 'All Tests Passed' if all tests pass, otherwise the error message.\n    \"\"\"\n    try:\n        generate_image_from_text('a scene of a magical forest with fairies and elves')\n        assert os.path.exists('generated_image.png')\n        os.remove('generated_image.png')\n        return 'All Tests Passed'\n    except Exception as e:\n        return str(e)\n\n# call_test_function_code --------------------\n\nprint(test_generate_image_from_text())", "function_import": "# function_import --------------------\n\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom PIL import Image\nimport os\n\n", "function_code": "# function_code --------------------\n\ndef generate_image_from_text(prompt: str, model_id: str = 'stabilityai/stable-diffusion-2-1', save_path: str = 'generated_image.png'):\n    \"\"\"\n    Generate an image based on the given text description using the StableDiffusionPipeline model.\n\n    Args:\n        prompt (str): The text description of the scene.\n        model_id (str, optional): The id of the pre-trained model. Defaults to 'stabilityai/stable-diffusion-2-1'.\n        save_path (str, optional): The path to save the generated image. Defaults to 'generated_image.png'.\n\n    Returns:\n        None\n    \"\"\"\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    generated_image = pipe(prompt).images[0]\n    generated_image.save(save_path)\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_image_from_text():\n    \"\"\"\n    Test the function generate_image_from_text.\n\n    Returns:\n        str: 'All Tests Passed' if all tests pass, otherwise the error message.\n    \"\"\"\n    try:\n        generate_image_from_text('a scene of a magical forest with fairies and elves')\n        assert os.path.exists('generated_image.png')\n        os.remove('generated_image.png')\n        return 'All Tests Passed'\n    except Exception as e:\n        return str(e)\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\nprint(test_generate_image_from_text())", "instruct": "# function_import --------------------\n\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom PIL import Image\nimport os\n\n# function_code --------------------\n\ndef generate_image_from_text(prompt: str, model_id: str = 'stabilityai/stable-diffusion-2-1', save_path: str = 'generated_image.png'):\n    \"\"\"\n    Generate an image based on the given text description using the StableDiffusionPipeline model.\n\n    Args:\n        prompt (str): The text description of the scene.\n        model_id (str, optional): The id of the pre-trained model. Defaults to 'stabilityai/stable-diffusion-2-1'.\n        save_path (str, optional): The path to save the generated image. Defaults to 'generated_image.png'.\n\n    Returns:\n        None\n    \"\"\"", "answer": "\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    generated_image = pipe(prompt).images[0]\n    generated_image.save(save_path)\n\n", "prediction": "    \n\n    # Set up device\n    if torch.cuda.is_available():\n      device = torch.device('cuda')\n    else:\n      device = torch.device('cpu') \n\n    # Load model\n    model = StableDiffusionPipeline(model_id).to(device)\n\n    # Create input embedding\n    text = prompt\n    emb = model.text_embedding(text, device=device)\n    \n    # Set up solver to generate an image\n    timestep_respacing = 'fast27' \n    schedule = DPMSolverMultistepScheduler(diffusion_steps=(1000 - model.image_size) * 6 + 5, \n                                           model_mean_type='epsilon', noise_schedule=\"linear\", \n                                           timestep_respacing=timestep_respacing, \n                                           use_kl=False)\n    \n    # Generate image\n    output_image = model(emb, schedule=schedule)\n    \n    # Post-process image and save it to the given path\n    output_image = (output_image.clamp(0., 1.) * 255).byte().cpu()\n    os.makedirs('outputs', exist_ok=True)\n    Image.fromarray(output_image[0, ...].numpy()).save(f'outputs/{save_path}')"}