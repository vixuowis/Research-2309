{"path": "output/hf-eval-data-v3-valid/f00020_classify_image.py", "content": "# function_import --------------------\n\nfrom urllib.request import urlopen\nfrom PIL import Image\nimport timm\nimport torch\n\n# function_code --------------------\n\ndef classify_image(img_url: str) -> int:\n    \"\"\"\n    Classify an image using a pretrained MobileNet-v3 model.\n\n    Args:\n        img_url (str): The URL of the image to classify.\n\n    Returns:\n        int: The predicted class of the image.\n\n    Raises:\n        URLError: If the image cannot be opened from the provided URL.\n        RuntimeError: If there is a problem running the model.\n    \"\"\"\n    img = Image.open(urlopen(img_url))\n    model = timm.create_model('mobilenetv3_large_100.ra_in1k', pretrained=True)\n    model = model.eval()\n\n    data_config = timm.data.resolve_model_data_config(model)\n    transforms = timm.data.create_transform(**data_config, is_training=False)\n    input_tensor = transforms(img).unsqueeze(0)\n    output = model(input_tensor)\n\n    return torch.argmax(output).item()\n\n# test_function_code --------------------\n\ndef test_classify_image():\n    \"\"\"Test the classify_image function.\"\"\"\n    assert isinstance(classify_image('https://placekitten.com/200/300'), int)\n    assert isinstance(classify_image('https://placekitten.com/200/301'), int)\n    assert isinstance(classify_image('https://placekitten.com/200/302'), int)\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_classify_image()", "function_import": "# function_import --------------------\n\nfrom urllib.request import urlopen\nfrom PIL import Image\nimport timm\nimport torch\n\n", "function_code": "# function_code --------------------\n\ndef classify_image(img_url: str) -> int:\n    \"\"\"\n    Classify an image using a pretrained MobileNet-v3 model.\n\n    Args:\n        img_url (str): The URL of the image to classify.\n\n    Returns:\n        int: The predicted class of the image.\n\n    Raises:\n        URLError: If the image cannot be opened from the provided URL.\n        RuntimeError: If there is a problem running the model.\n    \"\"\"\n    img = Image.open(urlopen(img_url))\n    model = timm.create_model('mobilenetv3_large_100.ra_in1k', pretrained=True)\n    model = model.eval()\n\n    data_config = timm.data.resolve_model_data_config(model)\n    transforms = timm.data.create_transform(**data_config, is_training=False)\n    input_tensor = transforms(img).unsqueeze(0)\n    output = model(input_tensor)\n\n    return torch.argmax(output).item()\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_classify_image():\n    \"\"\"Test the classify_image function.\"\"\"\n    assert isinstance(classify_image('https://placekitten.com/200/300'), int)\n    assert isinstance(classify_image('https://placekitten.com/200/301'), int)\n    assert isinstance(classify_image('https://placekitten.com/200/302'), int)\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_classify_image()", "instruct": "# function_import --------------------\n\nfrom urllib.request import urlopen\nfrom PIL import Image\nimport timm\nimport torch\n\n# function_code --------------------\n\ndef classify_image(img_url: str) -> int:\n    \"\"\"\n    Classify an image using a pretrained MobileNet-v3 model.\n\n    Args:\n        img_url (str): The URL of the image to classify.\n\n    Returns:\n        int: The predicted class of the image.\n\n    Raises:\n        URLError: If the image cannot be opened from the provided URL.\n        RuntimeError: If there is a problem running the model.\n    \"\"\"", "answer": "\n    img = Image.open(urlopen(img_url))\n    model = timm.create_model('mobilenetv3_large_100.ra_in1k', pretrained=True)\n    model = model.eval()\n\n    data_config = timm.data.resolve_model_data_config(model)\n    transforms = timm.data.create_transform(**data_config, is_training=False)\n    input_tensor = transforms(img).unsqueeze(0)\n    output = model(input_tensor)\n\n    return torch.argmax(output).item()\n\n", "prediction": "\n\n    # Load the model and labels.\n\n    model = timm.create_model(\"mobilenetv3_small\", pretrained=True)\n    labels = [s[12:] for s in (line.strip() for line in\n                               urlopen('https://raw.githubusercontent.com/pytorch/vision/main/torchvision/datasets/imagenet_classes.txt'))]\n\n    # Load the image from the URL, classify it, and get the label of the predicted class.\n    \n    img = Image.open(urlopen(img_url))\n    with torch.no_grad():\n        inp = torch.unsqueeze(model(torch.Tensor(255 * img).permute([2, 0, 1]) / 255 - [0.485, 0.456, 0.406], dim=0), 0)\n        outp = torch.softmax(model(inp), -1)[0]\n    label_idx = int(torch.argmax(outp))\n    \n    return label_idx"}