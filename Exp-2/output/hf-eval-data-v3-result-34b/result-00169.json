{"path": "output/hf-eval-data-v3-valid/f00694_summarize_text.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef summarize_text(text: str) -> str:\n    \"\"\"\n    Summarizes a given text using the 'philschmid/bart-large-cnn-samsum' model from Hugging Face Transformers.\n\n    Args:\n        text (str): The text to be summarized.\n\n    Returns:\n        str: The summarized text.\n    \"\"\"\n    summarizer = pipeline('summarization', model='philschmid/bart-large-cnn-samsum')\n    summary = summarizer(text)\n    return summary[0]['summary_text']\n\n# test_function_code --------------------\n\ndef test_summarize_text():\n    \"\"\"\n    Tests the 'summarize_text' function.\n    \"\"\"\n    text1 = 'The customer support service was excellent. All our concerns were attended to promptly by the friendly and knowledgeable staff. ...'\n    text2 = 'Jeff: Can I train a \ud83e\udd17 Transformers model on Amazon SageMaker? Philipp: Sure you can use the new Hugging Face Deep Learning Container. ...'\n    assert len(summarize_text(text1)) > 0\n    assert len(summarize_text(text2)) > 0\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_summarize_text()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef summarize_text(text: str) -> str:\n    \"\"\"\n    Summarizes a given text using the 'philschmid/bart-large-cnn-samsum' model from Hugging Face Transformers.\n\n    Args:\n        text (str): The text to be summarized.\n\n    Returns:\n        str: The summarized text.\n    \"\"\"\n    summarizer = pipeline('summarization', model='philschmid/bart-large-cnn-samsum')\n    summary = summarizer(text)\n    return summary[0]['summary_text']\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_summarize_text():\n    \"\"\"\n    Tests the 'summarize_text' function.\n    \"\"\"\n    text1 = 'The customer support service was excellent. All our concerns were attended to promptly by the friendly and knowledgeable staff. ...'\n    text2 = 'Jeff: Can I train a \ud83e\udd17 Transformers model on Amazon SageMaker? Philipp: Sure you can use the new Hugging Face Deep Learning Container. ...'\n    assert len(summarize_text(text1)) > 0\n    assert len(summarize_text(text2)) > 0\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_summarize_text()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef summarize_text(text: str) -> str:\n    \"\"\"\n    Summarizes a given text using the 'philschmid/bart-large-cnn-samsum' model from Hugging Face Transformers.\n\n    Args:\n        text (str): The text to be summarized.\n\n    Returns:\n        str: The summarized text.\n    \"\"\"", "answer": "\n    summarizer = pipeline('summarization', model='philschmid/bart-large-cnn-samsum')\n    summary = summarizer(text)\n    return summary[0]['summary_text']\n\n", "prediction": "\n\n    summarizer = pipeline('summarization', model='philschmid/bart-large-cnn-samsum')  # , tokenizer='philschmid/bart-large-cnn-samsum'\n    summary = summarizer(text, truncation=True)[0]['summary_text']                   # ['summary_text'], ['score'], len()\n    \n    return summary\n"}