{"path": "output/hf-eval-data-v3-valid/f00450_generate_hashtags.py", "content": "# function_import --------------------\n\nfrom transformers import ViTImageProcessor, ViTModel\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef generate_hashtags(image_url):\n    \"\"\"\n    Generate hashtags for a given image URL using Vision Transformer (ViT) model.\n\n    Args:\n        image_url (str): The URL of the image for which to generate hashtags.\n\n    Returns:\n        image_features (torch.Tensor): The extracted features of the image.\n\n    Raises:\n        Exception: If the image cannot be opened.\n    \"\"\"\n    try:\n        image = Image.open(requests.get(image_url, stream=True).raw)\n    except Exception as e:\n        raise Exception('Unable to open image. Please check the URL.') from e\n\n    processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224-in21k')\n    model = ViTModel.from_pretrained('google/vit-base-patch16-224-in21k')\n    inputs = processor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    image_features = outputs.last_hidden_state\n\n    return image_features\n\n# test_function_code --------------------\n\ndef test_generate_hashtags():\n    \"\"\"\n    Test the 'generate_hashtags' function with different image URLs.\n    \"\"\"\n    # Test with a valid image URL\n    image_url = 'https://placekitten.com/200/300'\n    image_features = generate_hashtags(image_url)\n    assert image_features is not None, 'No features were extracted from the image.'\n\n    # Test with an invalid image URL\n    image_url = 'https://invalid-url.com/image.jpg'\n    try:\n        image_features = generate_hashtags(image_url)\n    except Exception as e:\n        assert str(e) == 'Unable to open image. Please check the URL.', 'The function did not raise the expected exception.'\n\n    print('All Tests Passed')\n\n# call_test_function_code --------------------\n\ntest_generate_hashtags()", "function_import": "# function_import --------------------\n\nfrom transformers import ViTImageProcessor, ViTModel\nfrom PIL import Image\nimport requests\n\n", "function_code": "# function_code --------------------\n\ndef generate_hashtags(image_url):\n    \"\"\"\n    Generate hashtags for a given image URL using Vision Transformer (ViT) model.\n\n    Args:\n        image_url (str): The URL of the image for which to generate hashtags.\n\n    Returns:\n        image_features (torch.Tensor): The extracted features of the image.\n\n    Raises:\n        Exception: If the image cannot be opened.\n    \"\"\"\n    try:\n        image = Image.open(requests.get(image_url, stream=True).raw)\n    except Exception as e:\n        raise Exception('Unable to open image. Please check the URL.') from e\n\n    processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224-in21k')\n    model = ViTModel.from_pretrained('google/vit-base-patch16-224-in21k')\n    inputs = processor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    image_features = outputs.last_hidden_state\n\n    return image_features\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_hashtags():\n    \"\"\"\n    Test the 'generate_hashtags' function with different image URLs.\n    \"\"\"\n    # Test with a valid image URL\n    image_url = 'https://placekitten.com/200/300'\n    image_features = generate_hashtags(image_url)\n    assert image_features is not None, 'No features were extracted from the image.'\n\n    # Test with an invalid image URL\n    image_url = 'https://invalid-url.com/image.jpg'\n    try:\n        image_features = generate_hashtags(image_url)\n    except Exception as e:\n        assert str(e) == 'Unable to open image. Please check the URL.', 'The function did not raise the expected exception.'\n\n    print('All Tests Passed')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_generate_hashtags()", "instruct": "# function_import --------------------\n\nfrom transformers import ViTImageProcessor, ViTModel\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef generate_hashtags(image_url):\n    \"\"\"\n    Generate hashtags for a given image URL using Vision Transformer (ViT) model.\n\n    Args:\n        image_url (str): The URL of the image for which to generate hashtags.\n\n    Returns:\n        image_features (torch.Tensor): The extracted features of the image.\n\n    Raises:\n        Exception: If the image cannot be opened.\n    \"\"\"", "answer": "\n    try:\n        image = Image.open(requests.get(image_url, stream=True).raw)\n    except Exception as e:\n        raise Exception('Unable to open image. Please check the URL.') from e\n\n    processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224-in21k')\n    model = ViTModel.from_pretrained('google/vit-base-patch16-224-in21k')\n    inputs = processor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    image_features = outputs.last_hidden_state\n\n    return image_features\n\n", "prediction": "\n\n    # Define pre-trained Vision Transformer model\n    processor = ViTImageProcessor()\n    model = ViTModel.from_pretrained('google/vit-base-patch16-224')\n\n    # Get image from URL and convert to tensor\n    try:\n        img = Image.open(requests.get(image_url, stream=True).raw)\n    except Exception as e:\n        raise Exception('Cannot open image from URL: ' + str(e))\n    \n    with processor.as_target_processor():\n        inputs = processor([img], return_tensors='pt')\n\n    # Extract features\n    image_features = model(**inputs).last_hidden_state[0]\n\n    # Normalize and sum across rows to get one vector by image\n    image_features /= image_features.norm(dim=-1, keepdim=True)\n    image_features = image_features.sum(dim=0)\n    image_features /= image_features.norm()\n\n    # Return tensor of features\n    return image_features"}