{"path": "output/hf-eval-data-v3-valid/f00751_generate_image_variations.py", "content": "# function_import --------------------\n\nfrom diffusers import StableDiffusionImageVariationPipeline\nfrom PIL import Image\nfrom torchvision import transforms\n\n# function_code --------------------\n\ndef generate_image_variations(image_path: str, output_path: str, guidance_scale: int = 3):\n    \"\"\"\n    Generate variations of a given image using a pre-trained model.\n\n    Args:\n        image_path (str): Path to the original image.\n        output_path (str): Path to save the generated image variations.\n        guidance_scale (int, optional): Control the number and style of variations. Defaults to 3.\n\n    Returns:\n        None\n    \"\"\"\n    image = Image.open(image_path)\n    sd_pipe = StableDiffusionImageVariationPipeline.from_pretrained('lambdalabs/sd-image-variations-diffusers', revision='v2.0')\n    transform = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Resize((224, 224), interpolation=transforms.InterpolationMode.BICUBIC),\n        transforms.Normalize([0.48145466, 0.4578275, 0.40821073], [0.26862954, 0.26130258, 0.27577711])\n    ])\n    inp = transform(image).unsqueeze(0)\n    output = sd_pipe(inp, guidance_scale=guidance_scale)\n    output['images'][0].save(output_path)\n\n# test_function_code --------------------\n\ndef test_generate_image_variations():\n    \"\"\"\n    Test the function generate_image_variations.\n    \"\"\"\n    import os\n    import requests\n    from PIL import Image\n    from io import BytesIO\n\n    # Download a test image\n    url = 'https://placekitten.com/200/300'\n    response = requests.get(url)\n    img = Image.open(BytesIO(response.content))\n    img.save('test.jpg')\n\n    # Generate image variations\n    generate_image_variations('test.jpg', 'result.jpg')\n\n    # Check if the result image exists\n    assert os.path.exists('result.jpg'), 'Result image does not exist.'\n\n    # Clean up\n    os.remove('test.jpg')\n    os.remove('result.jpg')\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_generate_image_variations()", "function_import": "# function_import --------------------\n\nfrom diffusers import StableDiffusionImageVariationPipeline\nfrom PIL import Image\nfrom torchvision import transforms\n\n", "function_code": "# function_code --------------------\n\ndef generate_image_variations(image_path: str, output_path: str, guidance_scale: int = 3):\n    \"\"\"\n    Generate variations of a given image using a pre-trained model.\n\n    Args:\n        image_path (str): Path to the original image.\n        output_path (str): Path to save the generated image variations.\n        guidance_scale (int, optional): Control the number and style of variations. Defaults to 3.\n\n    Returns:\n        None\n    \"\"\"\n    image = Image.open(image_path)\n    sd_pipe = StableDiffusionImageVariationPipeline.from_pretrained('lambdalabs/sd-image-variations-diffusers', revision='v2.0')\n    transform = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Resize((224, 224), interpolation=transforms.InterpolationMode.BICUBIC),\n        transforms.Normalize([0.48145466, 0.4578275, 0.40821073], [0.26862954, 0.26130258, 0.27577711])\n    ])\n    inp = transform(image).unsqueeze(0)\n    output = sd_pipe(inp, guidance_scale=guidance_scale)\n    output['images'][0].save(output_path)\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_image_variations():\n    \"\"\"\n    Test the function generate_image_variations.\n    \"\"\"\n    import os\n    import requests\n    from PIL import Image\n    from io import BytesIO\n\n    # Download a test image\n    url = 'https://placekitten.com/200/300'\n    response = requests.get(url)\n    img = Image.open(BytesIO(response.content))\n    img.save('test.jpg')\n\n    # Generate image variations\n    generate_image_variations('test.jpg', 'result.jpg')\n\n    # Check if the result image exists\n    assert os.path.exists('result.jpg'), 'Result image does not exist.'\n\n    # Clean up\n    os.remove('test.jpg')\n    os.remove('result.jpg')\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_generate_image_variations()", "instruct": "# function_import --------------------\n\nfrom diffusers import StableDiffusionImageVariationPipeline\nfrom PIL import Image\nfrom torchvision import transforms\n\n# function_code --------------------\n\ndef generate_image_variations(image_path: str, output_path: str, guidance_scale: int = 3):\n    \"\"\"\n    Generate variations of a given image using a pre-trained model.\n\n    Args:\n        image_path (str): Path to the original image.\n        output_path (str): Path to save the generated image variations.\n        guidance_scale (int, optional): Control the number and style of variations. Defaults to 3.\n\n    Returns:\n        None\n    \"\"\"", "answer": "\n    image = Image.open(image_path)\n    sd_pipe = StableDiffusionImageVariationPipeline.from_pretrained('lambdalabs/sd-image-variations-diffusers', revision='v2.0')\n    transform = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Resize((224, 224), interpolation=transforms.InterpolationMode.BICUBIC),\n        transforms.Normalize([0.48145466, 0.4578275, 0.40821073], [0.26862954, 0.26130258, 0.27577711])\n    ])\n    inp = transform(image).unsqueeze(0)\n    output = sd_pipe(inp, guidance_scale=guidance_scale)\n    output['images'][0].save(output_path)\n\n", "prediction": "    \n    \n    # Load in the model and generate a variation of the input image\n    model = StableDiffusionImageVariationPipeline()\n    model.load('./models/image_variation/latest.pt')\n    generated_images = model(image_path, guidance_scale)\n    \n    # Save each generated image\n    for i, im in enumerate(generated_images):\n        transforms.ToPILImage()(im).save((output_path + 'generated' + str(i) + '.png'))"}