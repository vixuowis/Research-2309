{"path": "output/hf-eval-data-v3-valid/f00188_classify_image.py", "content": "# function_import --------------------\n\nfrom transformers import AutoFeatureExtractor, RegNetForImageClassification\nimport torch\nfrom PIL import Image\nimport requests\nfrom io import BytesIO\n\n# function_code --------------------\n\ndef classify_image(image_url: str) -> str:\n    \"\"\"\n    Classify an image using the pretrained RegNetForImageClassification model.\n\n    Args:\n        image_url (str): The URL of the image to be classified.\n\n    Returns:\n        str: The predicted label of the image.\n\n    Raises:\n        OSError: If the model identifier is not found in the Hugging Face model hub.\n    \"\"\"\n    model = RegNetForImageClassification.from_pretrained('facebook/regnet-y-008')\n    feature_extractor = AutoFeatureExtractor.from_pretrained('facebook/regnet-y-008')\n\n    response = requests.get(image_url)\n    image = Image.open(BytesIO(response.content))\n\n    inputs = feature_extractor(images=image, return_tensors='pt')\n    with torch.no_grad():\n        logits = model(**inputs).logits\n    predicted_label = logits.argmax(-1).item()\n\n    return model.config.id2label[predicted_label]\n\n# test_function_code --------------------\n\ndef test_classify_image():\n    \"\"\"\n    Test the classify_image function with different test cases.\n    \"\"\"\n    test_image_url_1 = 'https://placekitten.com/200/300'\n    test_image_url_2 = 'https://placekitten.com/400/600'\n    test_image_url_3 = 'https://placekitten.com/800/1200'\n\n    assert isinstance(classify_image(test_image_url_1), str)\n    assert isinstance(classify_image(test_image_url_2), str)\n    assert isinstance(classify_image(test_image_url_3), str)\n\n    print('All Tests Passed')\n\n# call_test_function_code --------------------\n\nif __name__ == '__main__':\n    test_classify_image()", "function_import": "# function_import --------------------\n\nfrom transformers import AutoFeatureExtractor, RegNetForImageClassification\nimport torch\nfrom PIL import Image\nimport requests\nfrom io import BytesIO\n\n", "function_code": "# function_code --------------------\n\ndef classify_image(image_url: str) -> str:\n    \"\"\"\n    Classify an image using the pretrained RegNetForImageClassification model.\n\n    Args:\n        image_url (str): The URL of the image to be classified.\n\n    Returns:\n        str: The predicted label of the image.\n\n    Raises:\n        OSError: If the model identifier is not found in the Hugging Face model hub.\n    \"\"\"\n    model = RegNetForImageClassification.from_pretrained('facebook/regnet-y-008')\n    feature_extractor = AutoFeatureExtractor.from_pretrained('facebook/regnet-y-008')\n\n    response = requests.get(image_url)\n    image = Image.open(BytesIO(response.content))\n\n    inputs = feature_extractor(images=image, return_tensors='pt')\n    with torch.no_grad():\n        logits = model(**inputs).logits\n    predicted_label = logits.argmax(-1).item()\n\n    return model.config.id2label[predicted_label]\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_classify_image():\n    \"\"\"\n    Test the classify_image function with different test cases.\n    \"\"\"\n    test_image_url_1 = 'https://placekitten.com/200/300'\n    test_image_url_2 = 'https://placekitten.com/400/600'\n    test_image_url_3 = 'https://placekitten.com/800/1200'\n\n    assert isinstance(classify_image(test_image_url_1), str)\n    assert isinstance(classify_image(test_image_url_2), str)\n    assert isinstance(classify_image(test_image_url_3), str)\n\n    print('All Tests Passed')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\nif __name__ == '__main__':\n    test_classify_image()", "instruct": "# function_import --------------------\n\nfrom transformers import AutoFeatureExtractor, RegNetForImageClassification\nimport torch\nfrom PIL import Image\nimport requests\nfrom io import BytesIO\n\n# function_code --------------------\n\ndef classify_image(image_url: str) -> str:\n    \"\"\"\n    Classify an image using the pretrained RegNetForImageClassification model.\n\n    Args:\n        image_url (str): The URL of the image to be classified.\n\n    Returns:\n        str: The predicted label of the image.\n\n    Raises:\n        OSError: If the model identifier is not found in the Hugging Face model hub.\n    \"\"\"", "answer": "\n    model = RegNetForImageClassification.from_pretrained('facebook/regnet-y-008')\n    feature_extractor = AutoFeatureExtractor.from_pretrained('facebook/regnet-y-008')\n\n    response = requests.get(image_url)\n    image = Image.open(BytesIO(response.content))\n\n    inputs = feature_extractor(images=image, return_tensors='pt')\n    with torch.no_grad():\n        logits = model(**inputs).logits\n    predicted_label = logits.argmax(-1).item()\n\n    return model.config.id2label[predicted_label]\n\n", "prediction": "\n    \n    try:\n        # Create feature extractor and model.\n        feature_extractor = AutoFeatureExtractor.from_pretrained(\"facebook/regnet-x-0-4\")\n        model = RegNetForImageClassification.from_pretrained(\"facebook/regnet-x-0-4\")\n        \n    except OSError as error:\n        raise error\n    \n    else:\n        # Get image from url, convert to numpy array and normalize pixel values.\n        headers = {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57 Safari/537.36 OPR/18.0.1284.49'\n        }\n        \n        image = Image.open(BytesIO(requests.get(image_url, headers=headers).content)).convert('RGB')\n        image = feature_extractor(images=image, return_tensors=\"pt\").pixel_values\n        image /= image.max()\n        \n        # Predict label and convert to string.\n        prediction = model(image)\n        predicted_label = torch.argmax(prediction.logits).item()\n        labels_map = feature_extractor.get_feature_info()[\"metadata\"][\"labels\"]\n        predicted_class = labels_map[predicted_label].lower().replace(\" \", \"_\")\n    \n    return predicted_class"}