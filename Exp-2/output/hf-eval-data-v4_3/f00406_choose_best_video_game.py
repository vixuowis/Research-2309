# requirements_file --------------------

import subprocess

requirements = ["transformers"]

for package in requirements:
    subprocess.run(['pip', 'install', '-U', package])

# function_import --------------------

from transformers import AutoTokenizer, AutoModelForSeq2SeqLM

# function_code --------------------

def choose_best_video_game(instruction, knowledge, dialog):
    """
    Chooses the best video game based on user preferences and contextual knowledge.

    Args:
        instruction (str): The directive or question from the user.
        knowledge (str): External information that can be used to provide more accurate responses.
        dialog (list): The dialog history containing the conversation between the user and the system.

    Returns:
        str: The advice generated by the AI model for choosing a video game.

    Raises:
        ValueError: If any of the arguments are not in the expected format or are missing.
    """
    # Validate input arguments
    if isinstance(instruction, str) and isinstance(knowledge, str) and isinstance(dialog, list):
        # Initialize the tokenizer and model
        tokenizer = AutoTokenizer.from_pretrained('microsoft/GODEL-v1_1-base-seq2seq')
        model = AutoModelForSeq2SeqLM.from_pretrained('microsoft/GODEL-v1_1-base-seq2seq')

        # Format the context and knowledge
        if knowledge != '':
            knowledge = '[KNOWLEDGE] ' + knowledge
        dialog = ' EOS '.join(dialog)
        query = f'{instruction} [CONTEXT] {dialog} {knowledge}'

        # Generate response
        input_ids = tokenizer(query, return_tensors='pt').input_ids
        outputs = model.generate(input_ids, max_length=128, min_length=8, top_p=0.9, do_sample=True)
        output = tokenizer.decode(outputs[0], skip_special_tokens=True)
        return output
    else:
        raise ValueError('Invalid argument formats or missing arguments.')

# test_function_code --------------------

def test_choose_best_video_game():
    print("Testing started.")
    instruction = 'What is the best way to choose a video game?'
    knowledge = 'Some factors to consider when choosing a video game are personal preferences, genre, graphics, gameplay, storyline, platform, and reviews from other players or gaming websites.'
    dialog = ['What type of video games do you prefer playing?', 'I enjoy action-adventure games and a decent storyline.']

    # Test case 1
    print("Testing case [1/1] started.")
    advice = choose_best_video_game(instruction, knowledge, dialog)
    assert advice is not None, f"Test case [1/1] failed: Expected a non-empty response, but got {advice}."
    print("Testing finished.")

# call_test_function_line --------------------

test_choose_best_video_game()