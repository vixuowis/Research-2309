{'code': "###Instruction: We run an online store for selling electronic devices. We need to classify product images from our inventory and organize them.\n###Output: <<<domain>>>: Computer Vision Zero-Shot Image Classification\n<<<api_call>>>: pipeline('image-classification', model='laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft')\n<<<api_provider>>>: Hugging Face\n<<<explanation>>>: 1. Import the pipeline function from the transformers library provided by Hugging Face.\n2. Use the pipeline function to create an image classification model.\n3. Specify the model 'laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft' to be loaded. This model is designed for zero-shot image classification tasks, such as classifying electronic devices.\n4. Feed the classifier the image path and provide class names (e.g., ['smartphone', 'laptop', 'tablet']).\n5. The classifier will predict the most likely class for the input image, which can then be used for organizing product images in inventory.\n\n<<<code>>>: from transformers import pipeline\ndevice_classifier = pipeline('image-classification', model='laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft')\ndevice_class_prediction = device_classifier('path/to/product_image.jpg', ['smartphone', 'laptop', 'tablet'])", 'api_call': "pipeline('image-classification', model='laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft')", 'provider': 'Hugging Face', 'api_data': {'domain': 'Computer Vision Zero-Shot Image Classification', 'framework': 'Hugging Face', 'functionality': 'Zero-Shot Image Classification', 'api_name': 'laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft', 'api_call': "pipeline('image-classification', model='laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft')", 'api_arguments': {'image_path': 'Path to the image file', 'class_names': 'List of comma-separated class names'}, 'python_environment_requirements': ['transformers'], 'example_code': "from transformers import pipeline; classifier = pipeline('image-classification', model='laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft'); classifier('path/to/image.jpg', ['class1', 'class2'])", 'performance': {'dataset': 'ImageNet-1k', 'accuracy': '75.9-76.9%'}, 'description': 'A series of CLIP ConvNeXt-Large models trained on the LAION-2B (english) subset of LAION-5B using OpenCLIP. The models achieve between 75.9 and 76.9 top-1 zero-shot accuracy on ImageNet-1k.'}}

Traceback (most recent call last):
  File "/root/miniconda3/envs/py38/lib/python3.8/site-packages/huggingface_hub/utils/_errors.py", line 261, in hf_raise_for_status
    response.raise_for_status()
  File "/root/miniconda3/envs/py38/lib/python3.8/site-packages/requests/models.py", line 1021, in raise_for_status
    raise HTTPError(http_error_msg, response=self)
requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://huggingface.co/laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft/resolve/main/config.json

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/root/miniconda3/envs/py38/lib/python3.8/site-packages/transformers/utils/hub.py", line 429, in cached_file
    resolved_file = hf_hub_download(
  File "/root/miniconda3/envs/py38/lib/python3.8/site-packages/huggingface_hub/utils/_validators.py", line 118, in _inner_fn
    return fn(*args, **kwargs)
  File "/root/miniconda3/envs/py38/lib/python3.8/site-packages/huggingface_hub/file_download.py", line 1230, in hf_hub_download
    metadata = get_hf_file_metadata(
  File "/root/miniconda3/envs/py38/lib/python3.8/site-packages/huggingface_hub/utils/_validators.py", line 118, in _inner_fn
    return fn(*args, **kwargs)
  File "/root/miniconda3/envs/py38/lib/python3.8/site-packages/huggingface_hub/file_download.py", line 1606, in get_hf_file_metadata
    hf_raise_for_status(r)
  File "/root/miniconda3/envs/py38/lib/python3.8/site-packages/huggingface_hub/utils/_errors.py", line 271, in hf_raise_for_status
    raise EntryNotFoundError(message, response) from e
huggingface_hub.utils._errors.EntryNotFoundError: 404 Client Error. (Request ID: Root=1-654da013-0bf2f5d50e0e8ec015c021c8;7fb9019f-08cb-4d18-8834-900361deb246)

Entry Not Found for url: https://huggingface.co/laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft/resolve/main/config.json.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "output/hf-eval-data-v2/f00487_classify_device_image.py", line 37, in <module>
    test_classify_device_image()
  File "output/hf-eval-data-v2/f00487_classify_device_image.py", line 30, in test_classify_device_image
    prediction = classify_device_image(image_path, class_names)
  File "output/hf-eval-data-v2/f00487_classify_device_image.py", line 18, in classify_device_image
    device_classifier = pipeline('image-classification', model='laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft')
  File "/root/miniconda3/envs/py38/lib/python3.8/site-packages/transformers/pipelines/__init__.py", line 741, in pipeline
    config = AutoConfig.from_pretrained(model, _from_pipeline=task, **hub_kwargs, **model_kwargs)
  File "/root/miniconda3/envs/py38/lib/python3.8/site-packages/transformers/models/auto/configuration_auto.py", line 1023, in from_pretrained
    config_dict, unused_kwargs = PretrainedConfig.get_config_dict(pretrained_model_name_or_path, **kwargs)
  File "/root/miniconda3/envs/py38/lib/python3.8/site-packages/transformers/configuration_utils.py", line 620, in get_config_dict
    config_dict, kwargs = cls._get_config_dict(pretrained_model_name_or_path, **kwargs)
  File "/root/miniconda3/envs/py38/lib/python3.8/site-packages/transformers/configuration_utils.py", line 675, in _get_config_dict
    resolved_config_file = cached_file(
  File "/root/miniconda3/envs/py38/lib/python3.8/site-packages/transformers/utils/hub.py", line 480, in cached_file
    raise EnvironmentError(
OSError: laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft does not appear to have a file named config.json. Checkout 'https://huggingface.co/laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft/main' for available files.
