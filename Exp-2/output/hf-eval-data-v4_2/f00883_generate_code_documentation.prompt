{'code': "###Instruction: We are building a platform for developers and want to provide automatic code documentation generation for Python functions.\n###Output: <<<domain>>>: Natural Language Processing Summarization\n<<<api_call>>>: AutoModelWithLMHead.from_pretrained('SEBIS/code_trans_t5_base_code_documentation_generation_python')\n<<<api_provider>>>: Transformers\n<<<explanation>>>:1. Import the necessary libraries from the transformers package, including AutoTokenizer and AutoModelWithLMHead.\n2. Create a SummarizationPipeline object by specifying the pretrained model 'SEBIS/code_trans_t5_base_code_documentation_generation_python' and its tokenizer. This model has been trained on Python code and can generate summaries for a given piece of code.\n3. Pass the code snippet (Python function) as input to the pipeline, which will then generate a summary or documentation based on the code.\n<<<code>>>: from transformers import AutoTokenizer, AutoModelWithLMHead, SummarizationPipeline\npipeline = SummarizationPipeline(\n    model=AutoModelWithLMHead.from_pretrained('SEBIS/code_trans_t5_base_code_documentation_generation_python'),\n    tokenizer=AutoTokenizer.from_pretrained('SEBIS/code_trans_t5_base_code_documentation_generation_python', skip_special_tokens=True),\n    device=0\n)\ntokenized_code = 'def e(message, exit_code=None): print_log(message, YELLOW, BOLD) if exit_code is not None: sys.exit(exit_code)'\ngenerated_documentation = pipeline([tokenized_code])\n", 'api_call': "AutoModelWithLMHead.from_pretrained('SEBIS/code_trans_t5_base_code_documentation_generation_python')", 'provider': 'Transformers', 'api_data': {'domain': 'Natural Language Processing Summarization', 'framework': 'Transformers', 'functionality': 'Code Documentation Generation', 'api_name': 'code_trans_t5_base_code_documentation_generation_python', 'api_call': "AutoModelWithLMHead.from_pretrained('SEBIS/code_trans_t5_base_code_documentation_generation_python')", 'api_arguments': ['tokenized_code'], 'python_environment_requirements': ['transformers'], 'example_code': 'from transformers import AutoTokenizer, AutoModelWithLMHead, SummarizationPipeline\npipeline = SummarizationPipeline(\n model=AutoModelWithLMHead.from_pretrained(SEBIS/code_trans_t5_base_code_documentation_generation_python),\n tokenizer=AutoTokenizer.from_pretrained(SEBIS/code_trans_t5_base_code_documentation_generation_python, skip_special_tokens=True),\n device=0\n)\ntokenized_code = def e ( message , exit_code = None ) : print_log ( message , YELLOW , BOLD ) if exit_code is not None : sys . exit ( exit_code )\npipeline([tokenized_code])', 'performance': {'dataset': 'CodeSearchNet Corpus python dataset', 'accuracy': '20.26 BLEU score'}, 'description': 'This CodeTrans model is based on the t5-base model and is trained on tokenized python code functions. It can be used to generate descriptions for python functions or be fine-tuned on other python code tasks. The model works best with tokenized python functions but can also be used on unparsed and untokenized python code.'}}

