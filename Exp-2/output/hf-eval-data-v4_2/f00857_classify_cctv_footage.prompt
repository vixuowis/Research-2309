{'code': "###Instruction: We are a security company and we need a video classification model to analyze CCTV footage for suspicious activities.\n###Output: <<<domain>>>: Computer Vision Video Classification\n<<<api_call>>>: AutoModelForVideoClassification.from_pretrained('lmazzon70/videomae-large-finetuned-kinetics-finetuned-rwf2000-epochs8-batch8-kl-torch2')\n<<<api_provider>>>: Hugging Face Transformers\n<<<explanation>>>: 1. We import the necessary classes from the transformers library provided by Hugging Face. This includes AutoModelForVideoClassification for the video classification model.\n2. We then use the from_pretrained method of the AutoModelForVideoClassification class to load the pre-trained model 'lmazzon70/videomae-large-finetuned-kinetics-finetuned-rwf2000-epochs8-batch8-kl-torch2'. This model is specialized in classifying the activities happening in videos.\n3. We can then load the video data from a file or use a live stream of CCTV footage.\n4. Finally, the created classifier can be used to analyze the video sequences and classify them into different categories (suspicious or not suspicious) for further analysis.\n<<<code>>>: from transformers import AutoModelForVideoClassification\nvideo_classifier = AutoModelForVideoClassification.from_pretrained('lmazzon70/videomae-large-finetuned-kinetics-finetuned-rwf2000-epochs8-batch8-kl-torch2')\n# Load video and use video_classifier to analyze the footage\n", 'api_call': "AutoModelForVideoClassification.from_pretrained('lmazzon70/videomae-large-finetuned-kinetics-finetuned-rwf2000-epochs8-batch8-kl-torch2')", 'provider': 'Hugging Face Transformers', 'api_data': {'domain': 'Computer Vision Video Classification', 'framework': 'Hugging Face Transformers', 'functionality': 'Video Classification', 'api_name': 'lmazzon70/videomae-large-finetuned-kinetics-finetuned-rwf2000-epochs8-batch8-kl-torch2', 'api_call': "AutoModelForVideoClassification.from_pretrained('lmazzon70/videomae-large-finetuned-kinetics-finetuned-rwf2000-epochs8-batch8-kl-torch2')", 'api_arguments': 'video_path', 'python_environment_requirements': 'transformers==4.27.4, torch==2.0.0+cu117, datasets==2.11.0, tokenizers==0.13.2', 'example_code': '', 'performance': {'dataset': 'unknown', 'accuracy': 0.7212}, 'description': 'This model is a fine-tuned version of MCG-NJU/videomae-large-finetuned-kinetics on an unknown dataset.'}}

