# requirements_file --------------------

!pip install -U transformers

# function_import --------------------

from transformers import pipeline

# function_code --------------------

def generate_image_captions(image_path, question):
    """
    Generate captions for an image by answering a question in Polish language using a pre-trained VQA model.

    Args:
        image_path (str): The file path to the image for which the caption is to be generated.
        question (str): The question in Polish language related to the image content.

    Returns:
        str: The answer generated by the VQA model, which serves as the caption.

    Raises:
        FileNotFoundError: If the image file does not exist at the specified path.
        Exception: If there is an issue with the VQA model or the pipeline.

    """
    # Load the pre-trained model for visual question answering
    vqa_pipeline = pipeline('visual-question-answering', model='azwierzc/vilt-b32-finetuned-vqa-pl')

    # Check if the image file exists
    if not os.path.exists(image_path):
        raise FileNotFoundError(f"Image file not found: {image_path}")

    # Generate caption by using the model to answer the question
    try:
        answer = vqa_pipeline(image_path, question)
        return answer
    except Exception as e:
        raise e

# test_function_code --------------------

def test_generate_image_captions():
    print("Testing started.")
    # Assume we have a test image and a test question
    image_path = 'test_image.jpg'
    question = 'Jakie są główne kolory na zdjęciu?'

    # Test case 1: Check if the function correctly processes a valid image and question
    print("Testing case [1/2] started.")
    try:
        caption = generate_image_captions(image_path, question)
        assert caption is not None, f"Test case [1/2] failed: Expected a valid caption, got None"
    except Exception as e:
        assert False, f"Test case [1/2] failed with exception: {e}"

    # Test case 2: Check if the function raises FileNotFoundError for a non-existent image path
    print("Testing case [2/2] started.")
    try:
        generate_image_captions('non_existent_image.jpg', question)
        assert False, f"Test case [2/2] failed: Expected FileNotFoundError"
    except FileNotFoundError:
        pass  # Expected exception
    except Exception as e:
        assert False, f"Test case [2/2] failed with exception: {e}"

    print("Testing finished.")

# call_test_function_line --------------------

test_generate_image_captions()