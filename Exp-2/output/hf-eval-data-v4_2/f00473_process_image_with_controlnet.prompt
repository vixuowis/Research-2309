{'code': "###Instruction: I wish to edit my images by detecting straight lines and controlling the diffusion models in the image's diffusion process.\n###Output: <<<domain>>>: Computer Vision Image-to-Image\n<<<api_call>>>: ControlNetModel.from_pretrained('lllyasviel/sd-controlnet-mlsd')\n<<<api_provider>>>: Hugging Face\n<<<explanation>>>: 1. Start by installing the required libraries and importing necessary functions from diffusers, transformers and controlnet_aux packages.\n2. Load the provided M-LSD line detector model and the ControlNet model.\n3. Use the line detector model to process the input image and detect straight lines.\n4. Load the Stable Diffusion ControlNet pipeline with the provided ControlNet model and a UniPCMultistepScheduler scheduler.\n5. Enhance memory efficiency by enabling xformers and allowing CPU offload for the model.\n6. Execute the image processing pipeline, which will apply the diffusion process on the input image with detected straight lines as additional conditions.\n7. Save the final processed image to a file.\n<<<code>>>: from PIL import Image\nfrom diffusers import StableDiffusionControlNetPipeline, ControlNetModel, UniPCMultistepScheduler\nimport torch\nfrom controlnet_aux import MLSDdetector\nfrom diffusers.utils import load_image\nmlsd = MLSDdetector.from_pretrained('lllyasviel/ControlNet')\nimage = load_image('input_image.png')\nimage = mlsd(image)\ncontrolnet = ControlNetModel.from_pretrained('lllyasviel/sd-controlnet-mlsd', torch_dtype=torch.float16)\npipe = StableDiffusionControlNetPipeline.from_pretrained('runwayml/stable-diffusion-v1-5', controlnet=controlnet, safety_checker=None, torch_dtype=torch.float16)\npipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\npipe.enable_xformers_memory_efficient_attention()\npipe.enable_model_cpu_offload()\nprocessed_image = pipe(image, num_inference_steps=20).images[0]\nprocessed_image.save('output_image.png')\n", 'api_call': "ControlNetModel.from_pretrained('lllyasviel/sd-controlnet-mlsd')", 'provider': 'Hugging Face', 'api_data': {'domain': 'Computer Vision Image-to-Image', 'framework': 'Hugging Face', 'functionality': 'ControlNet - M-LSD Straight Line Version', 'api_name': 'lllyasviel/sd-controlnet-mlsd', 'api_call': "ControlNetModel.from_pretrained('lllyasviel/sd-controlnet-mlsd')", 'api_arguments': {'torch_dtype': 'torch.float16'}, 'python_environment_requirements': {'diffusers': 'pip install diffusers', 'transformers': 'pip install transformers', 'accelerate': 'pip install accelerate', 'controlnet_aux': 'pip install controlnet_aux'}, 'example_code': {'import': ['from PIL import Image', 'from diffusers import StableDiffusionControlNetPipeline, ControlNetModel, UniPCMultistepScheduler', 'import torch', 'from controlnet_aux import MLSDdetector', 'from diffusers.utils import load_image'], 'setup': ["mlsd = MLSDdetector.from_pretrained('lllyasviel/ControlNet')", 'image = load_image(https://huggingface.co/lllyasviel/sd-controlnet-mlsd/resolve/main/images/room.png)', 'image = mlsd(image)', 'controlnet = ControlNetModel.from_pretrained(lllyasviel/sd-controlnet-mlsd, torch_dtype=torch.float16)', 'pipe = StableDiffusionControlNetPipeline.from_pretrained(runwayml/stable-diffusion-v1-5, controlnet=controlnet, safety_checker=None, torch_dtype=torch.float16)', 'pipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)'], 'execution': ['pipe.enable_xformers_memory_efficient_attention()', 'pipe.enable_model_cpu_offload()', 'image = pipe(room, image, num_inference_steps=20).images[0]', "image.save('images/room_mlsd_out.png')"]}, 'performance': {'dataset': '600k edge-image, caption pairs generated from Places2', 'accuracy': 'Not specified'}, 'description': 'ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on M-LSD straight line detection. It can be used in combination with Stable Diffusion.'}}

