{'code': '###Instruction: A team is working on a video game where the player needs to land the spaceship on the lunar surface without crashing. They want to implement an AI module that can play the game and test it.\n###Output: <<<domain>>>: Reinforcement Learning\n<<<api_call>>>: DQN.load(load_from_hub(\'araffin/dqn-LunarLander-v2\', \'dqn-LunarLander-v2.zip\'), **kwargs)\n<<<api_provider>>>: Stable-Baselines3\n<<<explanation>>>:1. We import the necessary packages, including stable_baselines3 and huggingface_sb3 for loading the pre-trained model.\n2. The model is loaded using the DQN.load function, provided the model checkpoint \'araffin/dqn-LunarLander-v2\' and a dictionary with optional arguments such as the target_update_interval.\n3. We create the environment to match the game requirements using the make_vec_env function from stable_baselines3.common.env_util.\n4. The loaded model can be used for evaluating the AI\'s capability to play the game effectively by running simulations and calculating mean rewards and standard deviation using the evaluate_policy function.\n\n<<<code>>>: from huggingface_sb3 import load_from_hub\nfrom stable_baselines3 import DQN\nfrom stable_baselines3.common.env_util import make_vec_env\nfrom stable_baselines3.common.evaluation import evaluate_policy\n\ncheckpoint = load_from_hub(\'araffin/dqn-LunarLander-v2\', \'dqn-LunarLander-v2.zip\')\nkwargs = dict(target_update_interval=30)\nmodel = DQN.load(checkpoint, **kwargs)\nenv = make_vec_env(\'LunarLander-v2\', n_envs=1)\n\nmean_reward, std_reward = evaluate_policy(model, env, n_eval_episodes=20, deterministic=True)\nprint(f"Mean reward = {mean_reward:.2f} +/- {std_reward:.2f}")', 'api_call': "DQN.load(load_from_hub('araffin/dqn-LunarLander-v2', 'dqn-LunarLander-v2.zip'), **kwargs)", 'provider': 'Stable-Baselines3', 'api_data': {'domain': 'Reinforcement Learning', 'framework': 'Stable-Baselines3', 'functionality': 'LunarLander-v2', 'api_name': 'araffin/dqn-LunarLander-v2', 'api_call': "DQN.load(load_from_hub('araffin/dqn-LunarLander-v2', 'dqn-LunarLander-v2.zip'), **kwargs)", 'api_arguments': {'checkpoint': 'araffin/dqn-LunarLander-v2', 'kwargs': {'target_update_interval': 30}}, 'python_environment_requirements': ['huggingface_sb3', 'stable_baselines3'], 'example_code': {'load_model': 'from huggingface_sb3 import load_from_hub\nfrom stable_baselines3 import DQN\nfrom stable_baselines3.common.env_util import make_vec_env\nfrom stable_baselines3.common.evaluation import evaluate_policy\n\ncheckpoint = load_from_hub(araffin/dqn-LunarLander-v2, dqn-LunarLander-v2.zip)\n\nkwargs = dict(target_update_interval=30)\n\nmodel = DQN.load(checkpoint, **kwargs)\nenv = make_vec_env(LunarLander-v2, n_envs=1)', 'evaluate': 'mean_reward, std_reward = evaluate_policy(\n model,\n env,\n n_eval_episodes=20,\n deterministic=True,\n)\nprint(fMean reward = {mean_reward:.2f} +/- {std_reward:.2f})'}, 'performance': {'dataset': 'LunarLander-v2', 'accuracy': '280.22 +/- 13.03'}, 'description': 'This is a trained model of a DQN agent playing LunarLander-v2 using the stable-baselines3 library.'}}

