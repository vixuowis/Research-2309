{'code': '###Instruction: My company has a large data table of employees, containing their names, titles, departments, and hire dates. We need a tool that can find all employees with the title of "Software Engineer" hired in 2020.\n###Output: <<<domain>>>: Natural Language Processing Table Question Answering\n<<<api_call>>>: BartForConditionalGeneration.from_pretrained(\'microsoft/tapex-large-sql-execution\')\n<<<api_provider>>>: Hugging Face Transformers\n<<<explanation>>>: 1. Import the required libraries: TapexTokenizer and BartForConditionalGeneration from Hugging Face Transformers, and pandas for data manipulation.\n2. Create a tokenizer and model using the \'microsoft/tapex-large-sql-execution\' model.\n3. Prepare the data table (your company\'s employee table).\n4. Write a SQL query to find all employees with the title of "Software Engineer" hired in 2020 (\'SELECT * FROM table WHERE title = "Software Engineer" AND hire_date >= "2020-01-01" AND hire_date <= "2020-12-31"\').\n5. Encode the table and query using the tokenizer.\n6. Generate the output using the model and decode the result using the tokenizer to obtain the answer.\n<<<code>>>: from transformers import TapexTokenizer, BartForConditionalGeneration\nimport pandas as pd\n\ntokenizer = TapexTokenizer.from_pretrained(\'microsoft/tapex-large-sql-execution\')\nmodel = BartForConditionalGeneration.from_pretrained(\'microsoft/tapex-large-sql-execution\')\n\nemployee_data = {\n    # Your company\'s employee data table\n}\ntable = pd.DataFrame.from_dict(employee_data)\n\nquery = \'SELECT * FROM table WHERE title = "Software Engineer" AND hire_date >= "2020-01-01" AND hire_date <= "2020-12-31"\'\n\nencoding = tokenizer(table=table, query=query, return_tensors=\'pt\')\noutputs = model.generate(**encoding)\n\nresults = tokenizer.batch_decode(outputs, skip_special_tokens=True)\n', 'api_call': "BartForConditionalGeneration.from_pretrained('microsoft/tapex-large-sql-execution')", 'provider': 'Hugging Face Transformers', 'api_data': {'domain': 'Natural Language Processing Table Question Answering', 'framework': 'Hugging Face Transformers', 'functionality': 'Transformers', 'api_name': 'microsoft/tapex-large-sql-execution', 'api_call': "BartForConditionalGeneration.from_pretrained('microsoft/tapex-large-sql-execution')", 'api_arguments': {'table': 'pd.DataFrame', 'query': 'str'}, 'python_environment_requirements': ['transformers', 'pandas'], 'example_code': 'from transformers import TapexTokenizer, BartForConditionalGeneration\nimport pandas as pd\ntokenizer = TapexTokenizer.from_pretrained(microsoft/tapex-large-sql-execution)\nmodel = BartForConditionalGeneration.from_pretrained(microsoft/tapex-large-sql-execution)\ndata = {\n year: [1896, 1900, 1904, 2004, 2008, 2012],\n city: [athens, paris, st. louis, athens, beijing, london]\n}\ntable = pd.DataFrame.from_dict(data)\nquery = select year where city = beijing\nencoding = tokenizer(table=table, query=query, return_tensors=pt)\noutputs = model.generate(**encoding)\nprint(tokenizer.batch_decode(outputs, skip_special_tokens=True))', 'performance': {'dataset': 'synthetic corpus', 'accuracy': 'not specified'}, 'description': 'TAPEX (Table Pre-training via Execution) is a conceptually simple and empirically powerful pre-training approach to empower existing models with table reasoning skills. TAPEX realizes table pre-training by learning a neural SQL executor over a synthetic corpus, which is obtained by automatically synthesizing executable SQL queries. TAPEX is based on the BART architecture, the transformer encoder-encoder (seq2seq) model with a bidirectional (BERT-like) encoder and an autoregressive (GPT-like) decoder.'}}

