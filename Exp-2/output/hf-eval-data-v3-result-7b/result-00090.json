{"path": "output/hf-eval-data-v3-valid/f00385_identify_company_names.py", "content": "# function_import --------------------\n\nimport torch\nfrom transformers import AutoModelForTokenClassification, AutoTokenizer\n\n# function_code --------------------\n\ndef identify_company_names(text):\n    \"\"\"\n    Identify company names from a given text using a pre-trained model from Hugging Face Transformers.\n\n    Args:\n        text (str): The input text from which company names are to be identified.\n\n    Returns:\n        outputs (torch.Tensor): The model outputs, which include the predicted token classifications.\n\n    Raises:\n        ValueError: If the input text is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise ValueError('Input text must be a string.')\n\n    model = AutoModelForTokenClassification.from_pretrained('ismail-lucifer011/autotrain-company_all-903429548')\n    tokenizer = AutoTokenizer.from_pretrained('ismail-lucifer011/autotrain-company_all-903429548')\n\n    inputs = tokenizer(text, return_tensors='pt')\n    outputs = model(**inputs)\n\n    return outputs\n\n# test_function_code --------------------\n\ndef test_identify_company_names():\n    \"\"\"\n    Test the identify_company_names function with various test cases.\n    \"\"\"\n    # Test with a simple text\n    text = 'Apple Inc. is an American multinational technology company.'\n    outputs = identify_company_names(text)\n    assert outputs is not None, 'The output should not be None.'\n\n    # Test with a text that does not contain any company names\n    text = 'This is a test sentence without any company names.'\n    outputs = identify_company_names(text)\n    assert outputs is not None, 'The output should not be None.'\n\n    # Test with a text that contains multiple company names\n    text = 'Apple and Microsoft are two of the biggest technology companies in the world.'\n    outputs = identify_company_names(text)\n    assert outputs is not None, 'The output should not be None.'\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_identify_company_names()", "function_import": "# function_import --------------------\n\nimport torch\nfrom transformers import AutoModelForTokenClassification, AutoTokenizer\n\n", "function_code": "# function_code --------------------\n\ndef identify_company_names(text):\n    \"\"\"\n    Identify company names from a given text using a pre-trained model from Hugging Face Transformers.\n\n    Args:\n        text (str): The input text from which company names are to be identified.\n\n    Returns:\n        outputs (torch.Tensor): The model outputs, which include the predicted token classifications.\n\n    Raises:\n        ValueError: If the input text is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise ValueError('Input text must be a string.')\n\n    model = AutoModelForTokenClassification.from_pretrained('ismail-lucifer011/autotrain-company_all-903429548')\n    tokenizer = AutoTokenizer.from_pretrained('ismail-lucifer011/autotrain-company_all-903429548')\n\n    inputs = tokenizer(text, return_tensors='pt')\n    outputs = model(**inputs)\n\n    return outputs\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_identify_company_names():\n    \"\"\"\n    Test the identify_company_names function with various test cases.\n    \"\"\"\n    # Test with a simple text\n    text = 'Apple Inc. is an American multinational technology company.'\n    outputs = identify_company_names(text)\n    assert outputs is not None, 'The output should not be None.'\n\n    # Test with a text that does not contain any company names\n    text = 'This is a test sentence without any company names.'\n    outputs = identify_company_names(text)\n    assert outputs is not None, 'The output should not be None.'\n\n    # Test with a text that contains multiple company names\n    text = 'Apple and Microsoft are two of the biggest technology companies in the world.'\n    outputs = identify_company_names(text)\n    assert outputs is not None, 'The output should not be None.'\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_identify_company_names()", "instruct": "# function_import --------------------\n\nimport torch\nfrom transformers import AutoModelForTokenClassification, AutoTokenizer\n\n# function_code --------------------\n\ndef identify_company_names(text):\n    \"\"\"\n    Identify company names from a given text using a pre-trained model from Hugging Face Transformers.\n\n    Args:\n        text (str): The input text from which company names are to be identified.\n\n    Returns:\n        outputs (torch.Tensor): The model outputs, which include the predicted token classifications.\n\n    Raises:\n        ValueError: If the input text is not a string.\n    \"\"\"", "answer": "\n    if not isinstance(text, str):\n        raise ValueError('Input text must be a string.')\n\n    model = AutoModelForTokenClassification.from_pretrained('ismail-lucifer011/autotrain-company_all-903429548')\n    tokenizer = AutoTokenizer.from_pretrained('ismail-lucifer011/autotrain-company_all-903429548')\n\n    inputs = tokenizer(text, return_tensors='pt')\n    outputs = model(**inputs)\n\n    return outputs\n\n", "prediction": "\n    \n    # check if text is of correct type and return error message if not\n    if type(text) != str:\n        raise TypeError(\"Text needs to be provided as a string.\")\n        \n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    \n    pretrained_model = 'dslim/bert-base-NER' # load the pretrained model from Hugging Face Transformers\n    tokenizer = AutoTokenizer.from_pretrained(pretrained_model)\n    pretrained_weights = torch.load('models/bert-ner.pt', map_location=device)\n    \n    tokens = tokenizer.tokenize(text) # split text into tokens\n    inputs = tokenizer(text, return_tensors='pt')  # add special tokens takes care of all the preprocessing\n    outputs = model(**inputs) # get predictions\n    \n    return outputs[0] # return the predicted classes"}