{"path": "output/hf-eval-data-v3-valid/f00563_classify_image.py", "content": "# function_import --------------------\n\nfrom transformers import AutoImageProcessor, AutoModelForImageClassification\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef classify_image(image_url):\n    \"\"\"\n    Classify the image using the pretrained model 'google/mobilenet_v1_0.75_192'.\n\n    Args:\n        image_url (str): The url of the image to be classified.\n\n    Returns:\n        str: The predicted class of the image.\n    \"\"\"\n    image = Image.open(requests.get(image_url, stream=True).raw)\n    preprocessor = AutoImageProcessor.from_pretrained('google/mobilenet_v1_0.75_192')\n    model = AutoModelForImageClassification.from_pretrained('google/mobilenet_v1_0.75_192')\n    inputs = preprocessor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    logits = outputs.logits\n    predicted_class_idx = logits.argmax(-1).item()\n    return model.config.id2label[predicted_class_idx]\n\n# test_function_code --------------------\n\ndef test_classify_image():\n    \"\"\"\n    Test the function classify_image.\n    \"\"\"\n    assert classify_image('http://images.cocodataset.org/val2017/000000039769.jpg') is not None\n    assert classify_image('https://placekitten.com/200/300') is not None\n    assert classify_image('https://placekitten.com/400/600') is not None\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_classify_image()", "function_import": "# function_import --------------------\n\nfrom transformers import AutoImageProcessor, AutoModelForImageClassification\nfrom PIL import Image\nimport requests\n\n", "function_code": "# function_code --------------------\n\ndef classify_image(image_url):\n    \"\"\"\n    Classify the image using the pretrained model 'google/mobilenet_v1_0.75_192'.\n\n    Args:\n        image_url (str): The url of the image to be classified.\n\n    Returns:\n        str: The predicted class of the image.\n    \"\"\"\n    image = Image.open(requests.get(image_url, stream=True).raw)\n    preprocessor = AutoImageProcessor.from_pretrained('google/mobilenet_v1_0.75_192')\n    model = AutoModelForImageClassification.from_pretrained('google/mobilenet_v1_0.75_192')\n    inputs = preprocessor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    logits = outputs.logits\n    predicted_class_idx = logits.argmax(-1).item()\n    return model.config.id2label[predicted_class_idx]\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_classify_image():\n    \"\"\"\n    Test the function classify_image.\n    \"\"\"\n    assert classify_image('http://images.cocodataset.org/val2017/000000039769.jpg') is not None\n    assert classify_image('https://placekitten.com/200/300') is not None\n    assert classify_image('https://placekitten.com/400/600') is not None\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_classify_image()", "instruct": "# function_import --------------------\n\nfrom transformers import AutoImageProcessor, AutoModelForImageClassification\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef classify_image(image_url):\n    \"\"\"\n    Classify the image using the pretrained model 'google/mobilenet_v1_0.75_192'.\n\n    Args:\n        image_url (str): The url of the image to be classified.\n\n    Returns:\n        str: The predicted class of the image.\n    \"\"\"", "answer": "\n    image = Image.open(requests.get(image_url, stream=True).raw)\n    preprocessor = AutoImageProcessor.from_pretrained('google/mobilenet_v1_0.75_192')\n    model = AutoModelForImageClassification.from_pretrained('google/mobilenet_v1_0.75_192')\n    inputs = preprocessor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    logits = outputs.logits\n    predicted_class_idx = logits.argmax(-1).item()\n    return model.config.id2label[predicted_class_idx]\n\n", "prediction": "\n\n    # Load the model\n    processor = AutoImageProcessor.from_pretrained('google/mobilenet_v1_0.75_192')\n    model = AutoModelForImageClassification.from_pretrained('google/mobilenet_v1_0.75_192', num_labels=5,\n                                                            label2id={'cute': 0, 'likeable': 1, 'good': 2,\n                                                                      'beautiful': 3, 'none': 4})\n    # Load the image from url\n    response = requests.get(image_url)\n    img = Image.open(Image.io.BytesIO(response.content))\n    \n    # Classify it\n    preds = processor(images=img, return_tensors=\"pt\")\n    outputs = model(preds[\"pixel_values\"])[0].tolist()\n    predicted_class_idx = int(outputs.index(max(outputs)))\n    \n    # Return the predicted class\n    if predicted_class_idx == 4: return \"none\"\n    elif predicted_class_idx <= 2: return 'good'\n    else: return {0:'cute',1:'likeable',2:'beautiful'}[predicted_class_idx%3]"}