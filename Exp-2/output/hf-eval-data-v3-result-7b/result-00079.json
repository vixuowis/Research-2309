{"path": "output/hf-eval-data-v3-valid/f00333_predict_carbon_emissions.py", "content": "# function_import --------------------\n\nimport json\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n# function_code --------------------\n\ndef predict_carbon_emissions(data_file):\n    \"\"\"\n    Load a pre-trained machine learning model and use it to predict carbon emissions.\n\n    Args:\n        data_file (str): The path to the CSV file containing the historical data.\n\n    Returns:\n        numpy.ndarray: The predicted carbon emissions.\n\n    Raises:\n        FileNotFoundError: If the model or data file does not exist.\n    \"\"\"\n    model = joblib.load('model.joblib')\n    config = json.load(open('config.json'))\n    features = config['features']\n    data = pd.read_csv(data_file)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n    return model.predict(data)\n\n# test_function_code --------------------\n\ndef test_predict_carbon_emissions():\n    \"\"\"\n    Test the predict_carbon_emissions function.\n    \"\"\"\n    # Test with a valid data file\n    try:\n        predictions = predict_carbon_emissions('test_data.csv')\n        assert isinstance(predictions, np.ndarray)\n    except FileNotFoundError:\n        print('Test data file not found.')\n\n    # Test with a non-existent data file\n    try:\n        predict_carbon_emissions('non_existent.csv')\n    except FileNotFoundError:\n        pass\n    else:\n        assert False, 'Expected a FileNotFoundError.'\n\n    print('All tests passed.')\n\n# call_test_function_code --------------------\n\ntest_predict_carbon_emissions()", "function_import": "# function_import --------------------\n\nimport json\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n", "function_code": "# function_code --------------------\n\ndef predict_carbon_emissions(data_file):\n    \"\"\"\n    Load a pre-trained machine learning model and use it to predict carbon emissions.\n\n    Args:\n        data_file (str): The path to the CSV file containing the historical data.\n\n    Returns:\n        numpy.ndarray: The predicted carbon emissions.\n\n    Raises:\n        FileNotFoundError: If the model or data file does not exist.\n    \"\"\"\n    model = joblib.load('model.joblib')\n    config = json.load(open('config.json'))\n    features = config['features']\n    data = pd.read_csv(data_file)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n    return model.predict(data)\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_predict_carbon_emissions():\n    \"\"\"\n    Test the predict_carbon_emissions function.\n    \"\"\"\n    # Test with a valid data file\n    try:\n        predictions = predict_carbon_emissions('test_data.csv')\n        assert isinstance(predictions, np.ndarray)\n    except FileNotFoundError:\n        print('Test data file not found.')\n\n    # Test with a non-existent data file\n    try:\n        predict_carbon_emissions('non_existent.csv')\n    except FileNotFoundError:\n        pass\n    else:\n        assert False, 'Expected a FileNotFoundError.'\n\n    print('All tests passed.')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_predict_carbon_emissions()", "instruct": "# function_import --------------------\n\nimport json\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n# function_code --------------------\n\ndef predict_carbon_emissions(data_file):\n    \"\"\"\n    Load a pre-trained machine learning model and use it to predict carbon emissions.\n\n    Args:\n        data_file (str): The path to the CSV file containing the historical data.\n\n    Returns:\n        numpy.ndarray: The predicted carbon emissions.\n\n    Raises:\n        FileNotFoundError: If the model or data file does not exist.\n    \"\"\"", "answer": "\n    model = joblib.load('model.joblib')\n    config = json.load(open('config.json'))\n    features = config['features']\n    data = pd.read_csv(data_file)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n    return model.predict(data)\n\n", "prediction": "\n    \n    # Load data ----------------------\n    \n    try:\n        historical_data = pd.read_csv(data_file)\n    except FileNotFoundError as error:\n        print(error)\n        \n    # Extract features and labels -----\n    \n    X = np.asarray(historical_data['CO2'])\n    y = np.asarray(historical_data['NOX']) \n\n    # Load model ----------------------\n    \n    try:\n        model = joblib.load('models/mlp_regression')\n    except FileNotFoundError as error:\n        print(error)\n        \n    # Predict emissions ---------------\n    \n    y_pred = model.predict(X.reshape(-1, 1))\n    \n    return y_pred"}