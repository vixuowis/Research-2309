{"path": "output/hf-eval-data-v3-valid/f00782_german_news_classifier.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef german_news_classifier(sequence: str, candidate_labels: list, hypothesis_template: str = 'In diesem Text geht es um {}.') -> dict:\n    '''\n    Classify German news articles into categories like crime, tragedy, and theft using a zero-shot classification model.\n\n    Args:\n        sequence (str): The German news article to be classified.\n        candidate_labels (list): The list of categories to classify the article into. For example: ['Verbrechen', 'Trag\u00f6die', 'Stehlen']\n        hypothesis_template (str): The template for the classification task. Default is 'In diesem Text geht es um {}.'\n\n    Returns:\n        dict: The classification result.\n    '''\n    classifier = pipeline('zero-shot-classification', model='Sahajtomar/German_Zeroshot')\n    result = classifier(sequence, candidate_labels, hypothesis_template=hypothesis_template)\n    return result\n\n# test_function_code --------------------\n\ndef test_german_news_classifier():\n    '''\n    Test the german_news_classifier function.\n    '''\n    sequence = 'Letzte Woche gab es einen Selbstmord in einer nahe gelegenen Kolonie'\n    candidate_labels = ['Verbrechen', 'Trag\u00f6die', 'Stehlen']\n    result = german_news_classifier(sequence, candidate_labels)\n    assert isinstance(result, dict), 'The result should be a dictionary.'\n    assert 'labels' in result, 'The result dictionary should have a key named labels.'\n    assert 'scores' in result, 'The result dictionary should have a key named scores.'\n    assert len(result['labels']) == len(candidate_labels), 'The number of labels in the result should be equal to the number of candidate labels.'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_german_news_classifier()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef german_news_classifier(sequence: str, candidate_labels: list, hypothesis_template: str = 'In diesem Text geht es um {}.') -> dict:\n    '''\n    Classify German news articles into categories like crime, tragedy, and theft using a zero-shot classification model.\n\n    Args:\n        sequence (str): The German news article to be classified.\n        candidate_labels (list): The list of categories to classify the article into. For example: ['Verbrechen', 'Trag\u00f6die', 'Stehlen']\n        hypothesis_template (str): The template for the classification task. Default is 'In diesem Text geht es um {}.'\n\n    Returns:\n        dict: The classification result.\n    '''\n    classifier = pipeline('zero-shot-classification', model='Sahajtomar/German_Zeroshot')\n    result = classifier(sequence, candidate_labels, hypothesis_template=hypothesis_template)\n    return result\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_german_news_classifier():\n    '''\n    Test the german_news_classifier function.\n    '''\n    sequence = 'Letzte Woche gab es einen Selbstmord in einer nahe gelegenen Kolonie'\n    candidate_labels = ['Verbrechen', 'Trag\u00f6die', 'Stehlen']\n    result = german_news_classifier(sequence, candidate_labels)\n    assert isinstance(result, dict), 'The result should be a dictionary.'\n    assert 'labels' in result, 'The result dictionary should have a key named labels.'\n    assert 'scores' in result, 'The result dictionary should have a key named scores.'\n    assert len(result['labels']) == len(candidate_labels), 'The number of labels in the result should be equal to the number of candidate labels.'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_german_news_classifier()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef german_news_classifier(sequence: str, candidate_labels: list, hypothesis_template: str = 'In diesem Text geht es um {}.') -> dict:\n    '''\n    Classify German news articles into categories like crime, tragedy, and theft using a zero-shot classification model.\n\n    Args:\n        sequence (str): The German news article to be classified.\n        candidate_labels (list): The list of categories to classify the article into. For example: ['Verbrechen', 'Trag\u00f6die', 'Stehlen']\n        hypothesis_template (str): The template for the classification task. Default is 'In diesem Text geht es um {}.'\n\n    Returns:\n        dict: The classification result.\n    '''", "answer": "\n    classifier = pipeline('zero-shot-classification', model='Sahajtomar/German_Zeroshot')\n    result = classifier(sequence, candidate_labels, hypothesis_template=hypothesis_template)\n    return result\n\n", "prediction": "\n    \n    # Define pipeline object to use for zero-shot classification\n    classifier = pipeline(task='zero-shot-classification', device=-1)\n    \n    # Make the prediction using `classifier`\n    return classifier({'sequence': sequence, 'candidate_labels': candidate_labels}, hypothesis_template=hypothesis_template)"}