{"path": "output/hf-eval-data-v3-valid/f00721_predict_wine_quality.py", "content": "# function_import --------------------\n\nfrom huggingface_hub import hf_hub_url, cached_download\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n# function_code --------------------\n\ndef predict_wine_quality():\n    '''\n    This function is used to predict the quality of wine based on its chemical properties.\n    It uses a pre-trained model hosted on Hugging Face hub.\n    \n    Returns:\n        tuple: A tuple containing the predicted labels and the model's score.\n    \n    Raises:\n        Exception: If there is an error in loading the model or the data.\n    '''\n    REPO_ID = 'julien-c/wine-quality'\n    FILENAME = 'sklearn_model.joblib'\n    data_filename = 'winequality-red.csv'\n\n    try:\n        model = joblib.load(cached_download(hf_hub_url(REPO_ID, FILENAME)))\n        data_file = cached_download(hf_hub_url(REPO_ID, data_filename))\n    except Exception as e:\n        raise Exception('Error in loading model or data: ' + str(e))\n\n    wine_df = pd.read_csv(data_file, sep=';')\n    X = wine_df.drop(['quality'], axis=1)\n    Y = wine_df['quality']\n\n    labels = model.predict(X)\n    model_score = model.score(X, Y)\n\n    return labels, model_score\n\n# test_function_code --------------------\n\ndef test_predict_wine_quality():\n    '''\n    This function is used to test the predict_wine_quality function.\n    It checks if the function returns the correct output type and if the model score is within an acceptable range.\n    '''\n    labels, score = predict_wine_quality()\n    assert isinstance(labels, np.ndarray), 'The predicted labels should be a numpy array.'\n    assert isinstance(score, float), 'The model score should be a float.'\n    assert 0 <= score <= 1, 'The model score should be between 0 and 1.'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_predict_wine_quality()", "function_import": "# function_import --------------------\n\nfrom huggingface_hub import hf_hub_url, cached_download\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n", "function_code": "# function_code --------------------\n\ndef predict_wine_quality():\n    '''\n    This function is used to predict the quality of wine based on its chemical properties.\n    It uses a pre-trained model hosted on Hugging Face hub.\n    \n    Returns:\n        tuple: A tuple containing the predicted labels and the model's score.\n    \n    Raises:\n        Exception: If there is an error in loading the model or the data.\n    '''\n    REPO_ID = 'julien-c/wine-quality'\n    FILENAME = 'sklearn_model.joblib'\n    data_filename = 'winequality-red.csv'\n\n    try:\n        model = joblib.load(cached_download(hf_hub_url(REPO_ID, FILENAME)))\n        data_file = cached_download(hf_hub_url(REPO_ID, data_filename))\n    except Exception as e:\n        raise Exception('Error in loading model or data: ' + str(e))\n\n    wine_df = pd.read_csv(data_file, sep=';')\n    X = wine_df.drop(['quality'], axis=1)\n    Y = wine_df['quality']\n\n    labels = model.predict(X)\n    model_score = model.score(X, Y)\n\n    return labels, model_score\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_predict_wine_quality():\n    '''\n    This function is used to test the predict_wine_quality function.\n    It checks if the function returns the correct output type and if the model score is within an acceptable range.\n    '''\n    labels, score = predict_wine_quality()\n    assert isinstance(labels, np.ndarray), 'The predicted labels should be a numpy array.'\n    assert isinstance(score, float), 'The model score should be a float.'\n    assert 0 <= score <= 1, 'The model score should be between 0 and 1.'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_predict_wine_quality()", "instruct": "# function_import --------------------\n\nfrom huggingface_hub import hf_hub_url, cached_download\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n# function_code --------------------\n\ndef predict_wine_quality():\n    '''\n    This function is used to predict the quality of wine based on its chemical properties.\n    It uses a pre-trained model hosted on Hugging Face hub.\n    \n    Returns:\n        tuple: A tuple containing the predicted labels and the model's score.\n    \n    Raises:\n        Exception: If there is an error in loading the model or the data.\n    '''", "answer": "\n    REPO_ID = 'julien-c/wine-quality'\n    FILENAME = 'sklearn_model.joblib'\n    data_filename = 'winequality-red.csv'\n\n    try:\n        model = joblib.load(cached_download(hf_hub_url(REPO_ID, FILENAME)))\n        data_file = cached_download(hf_hub_url(REPO_ID, data_filename))\n    except Exception as e:\n        raise Exception('Error in loading model or data: ' + str(e))\n\n    wine_df = pd.read_csv(data_file, sep=';')\n    X = wine_df.drop(['quality'], axis=1)\n    Y = wine_df['quality']\n\n    labels = model.predict(X)\n    model_score = model.score(X, Y)\n\n    return labels, model_score\n\n", "prediction": "\n    try:\n        # Load the dataset\n        url = hf_hub_url('shivam1402/ml-model', \"winequality.csv\", revision= 'd73e28b695a4566c6725789b681828960223f176')\n        df = pd.read_csv(cached_download(url))\n        \n        # Preprocess the data and get the features\n        X, y, cols = preprocessing(df)\n    \n        # Load the model\n        url = hf_hub_url('shivam1402/ml-model', \"winequality.joblib\", revision= 'd73e28b695a4566c6725789b681828960223f176')\n        clf = joblib.load(cached_download(url))\n        \n        # Predict the labels\n        pred_y, score = clf.predict(X), clf.score(X, y) * 100\n        \n        return (pred_y, round(np.mean(score)))\n    \n    except Exception as e:\n        print(\"Exception occurred in predicting the quality of wine.\")\n        raise\n    \n# function_code --------------------\n"}