{"path": "output/hf-eval-data-v3-valid/f00656_image_segmentation.py", "content": "# function_import --------------------\n\nfrom transformers import OneFormerProcessor, OneFormerForUniversalSegmentation\nfrom PIL import Image\n\n# function_code --------------------\n\ndef image_segmentation(image_path: str) -> dict:\n    \"\"\"\n    This function performs image segmentation using the pre-trained 'shi-labs/oneformer_coco_swin_large' model.\n\n    Args:\n        image_path (str): The path to the image file.\n\n    Returns:\n        dict: The segmented regions of the image.\n\n    Raises:\n        FileNotFoundError: If the image file does not exist.\n    \"\"\"\n    image = Image.open(image_path)\n    processor = OneFormerProcessor.from_pretrained('shi-labs/oneformer_coco_swin_large')\n    model = OneFormerForUniversalSegmentation.from_pretrained('shi-labs/oneformer_coco_swin_large')\n\n    semantic_inputs = processor(images=image, task_inputs=['semantic'], return_tensors='pt')\n    semantic_outputs = model(**semantic_inputs)\n    predicted_semantic_map = processor.post_process_semantic_segmentation(semantic_outputs, target_sizes=[image.size[::-1]])[0]\n\n    return predicted_semantic_map\n\n# test_function_code --------------------\n\ndef test_image_segmentation():\n    \"\"\"\n    This function tests the image_segmentation function with a sample image.\n    \"\"\"\n    image_path = 'https://placekitten.com/200/300'\n    try:\n        segmented_image = image_segmentation(image_path)\n        assert isinstance(segmented_image, dict), 'The output should be a dictionary.'\n    except FileNotFoundError:\n        print('The image file does not exist.')\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_image_segmentation()", "function_import": "# function_import --------------------\n\nfrom transformers import OneFormerProcessor, OneFormerForUniversalSegmentation\nfrom PIL import Image\n\n", "function_code": "# function_code --------------------\n\ndef image_segmentation(image_path: str) -> dict:\n    \"\"\"\n    This function performs image segmentation using the pre-trained 'shi-labs/oneformer_coco_swin_large' model.\n\n    Args:\n        image_path (str): The path to the image file.\n\n    Returns:\n        dict: The segmented regions of the image.\n\n    Raises:\n        FileNotFoundError: If the image file does not exist.\n    \"\"\"\n    image = Image.open(image_path)\n    processor = OneFormerProcessor.from_pretrained('shi-labs/oneformer_coco_swin_large')\n    model = OneFormerForUniversalSegmentation.from_pretrained('shi-labs/oneformer_coco_swin_large')\n\n    semantic_inputs = processor(images=image, task_inputs=['semantic'], return_tensors='pt')\n    semantic_outputs = model(**semantic_inputs)\n    predicted_semantic_map = processor.post_process_semantic_segmentation(semantic_outputs, target_sizes=[image.size[::-1]])[0]\n\n    return predicted_semantic_map\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_image_segmentation():\n    \"\"\"\n    This function tests the image_segmentation function with a sample image.\n    \"\"\"\n    image_path = 'https://placekitten.com/200/300'\n    try:\n        segmented_image = image_segmentation(image_path)\n        assert isinstance(segmented_image, dict), 'The output should be a dictionary.'\n    except FileNotFoundError:\n        print('The image file does not exist.')\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_image_segmentation()", "instruct": "# function_import --------------------\n\nfrom transformers import OneFormerProcessor, OneFormerForUniversalSegmentation\nfrom PIL import Image\n\n# function_code --------------------\n\ndef image_segmentation(image_path: str) -> dict:\n    \"\"\"\n    This function performs image segmentation using the pre-trained 'shi-labs/oneformer_coco_swin_large' model.\n\n    Args:\n        image_path (str): The path to the image file.\n\n    Returns:\n        dict: The segmented regions of the image.\n\n    Raises:\n        FileNotFoundError: If the image file does not exist.\n    \"\"\"", "answer": "\n    image = Image.open(image_path)\n    processor = OneFormerProcessor.from_pretrained('shi-labs/oneformer_coco_swin_large')\n    model = OneFormerForUniversalSegmentation.from_pretrained('shi-labs/oneformer_coco_swin_large')\n\n    semantic_inputs = processor(images=image, task_inputs=['semantic'], return_tensors='pt')\n    semantic_outputs = model(**semantic_inputs)\n    predicted_semantic_map = processor.post_process_semantic_segmentation(semantic_outputs, target_sizes=[image.size[::-1]])[0]\n\n    return predicted_semantic_map\n\n", "prediction": "\n    \n    # Processor.\n    processor = OneFormerProcessor()\n    \n    # Dataset.\n    dataset_test = processor.get_dataset(\"test\", data_files={\"test\": [image_path]})\n    \n    # Tokenizer.\n    tokenizer = processor.feature_extractor\n\n    # Model.\n    model = OneFormerForUniversalSegmentation(pretrained=\"shi-labs/oneformer_coco_swin_large\")\n    \n    # Image Preprocessing.\n    image = Image.open(image_path).convert(\"RGB\").resize((640, 384))\n    inputs = tokenizer(image, return_tensors=\"pt\", add_special_tokens=False)\n\n    # Prediction.\n    with torch.no_grad():\n        outputs = model(**inputs)[1][\"last_hidden_state\"][:,0].argmax(-1).cpu().numpy()\n    \n    return outputs\n"}