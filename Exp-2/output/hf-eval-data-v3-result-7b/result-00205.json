{"path": "output/hf-eval-data-v3-valid/f00793_generate_summary.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef generate_summary(article_text: str, max_length: int = 50, num_return_sequences: int = 1) -> str:\n    \"\"\"\n    Generate a brief summary for a given article using GPT-2 Large model.\n\n    Args:\n        article_text (str): The first few sentences of the news article.\n        max_length (int, optional): The maximum length of the generated summary. Defaults to 50.\n        num_return_sequences (int, optional): The number of return sequences. Defaults to 1.\n\n    Returns:\n        str: The generated summary of the news article.\n    \"\"\"\n    summary_generator = pipeline('text-generation', model='gpt2-large')\n    summary = summary_generator(article_text, max_length=max_length, num_return_sequences=num_return_sequences)[0]['generated_text']\n    return summary\n\n# test_function_code --------------------\n\ndef test_generate_summary():\n    \"\"\"\n    Test the generate_summary function.\n    \"\"\"\n    article_text = \"The first few sentences of the news article go here...\"\n    summary = generate_summary(article_text)\n    assert isinstance(summary, str), 'The result is not a string.'\n    assert len(summary) <= 50, 'The length of the summary is more than 50.'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_generate_summary()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef generate_summary(article_text: str, max_length: int = 50, num_return_sequences: int = 1) -> str:\n    \"\"\"\n    Generate a brief summary for a given article using GPT-2 Large model.\n\n    Args:\n        article_text (str): The first few sentences of the news article.\n        max_length (int, optional): The maximum length of the generated summary. Defaults to 50.\n        num_return_sequences (int, optional): The number of return sequences. Defaults to 1.\n\n    Returns:\n        str: The generated summary of the news article.\n    \"\"\"\n    summary_generator = pipeline('text-generation', model='gpt2-large')\n    summary = summary_generator(article_text, max_length=max_length, num_return_sequences=num_return_sequences)[0]['generated_text']\n    return summary\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_summary():\n    \"\"\"\n    Test the generate_summary function.\n    \"\"\"\n    article_text = \"The first few sentences of the news article go here...\"\n    summary = generate_summary(article_text)\n    assert isinstance(summary, str), 'The result is not a string.'\n    assert len(summary) <= 50, 'The length of the summary is more than 50.'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_generate_summary()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef generate_summary(article_text: str, max_length: int = 50, num_return_sequences: int = 1) -> str:\n    \"\"\"\n    Generate a brief summary for a given article using GPT-2 Large model.\n\n    Args:\n        article_text (str): The first few sentences of the news article.\n        max_length (int, optional): The maximum length of the generated summary. Defaults to 50.\n        num_return_sequences (int, optional): The number of return sequences. Defaults to 1.\n\n    Returns:\n        str: The generated summary of the news article.\n    \"\"\"", "answer": "\n    summary_generator = pipeline('text-generation', model='gpt2-large')\n    summary = summary_generator(article_text, max_length=max_length, num_return_sequences=num_return_sequences)[0]['generated_text']\n    return summary\n\n", "prediction": "\n\n    summarizer = pipeline(\"summarization\")\n    summary_results = summarizer(article_text, max_length=max_length, num_beams=5, num_return_sequences=num_return_sequences)\n    return summary_results[0][\"summary_text\"]"}