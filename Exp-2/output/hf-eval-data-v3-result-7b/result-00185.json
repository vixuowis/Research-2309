{"path": "output/hf-eval-data-v3-valid/f00739_classify_image.py", "content": "# function_import --------------------\n\nimport torch\nfrom transformers import ViTImageProcessor, ViTForImageClassification\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef classify_image(image_url):\n    '''\n    Classify the image using Vision Transformer (ViT).\n\n    Args:\n        image_url (str): The url of the image to be classified.\n\n    Returns:\n        str: The predicted class of the image.\n\n    Raises:\n        OSError: If there is a problem with the network connection or the image file.\n    '''\n    image = Image.open(requests.get(image_url, stream=True).raw)\n    processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224')\n    model = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\n    inputs = processor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    logits = outputs.logits\n    predicted_class_idx = logits.argmax(-1).item()\n    return model.config.id2label[predicted_class_idx]\n\n# test_function_code --------------------\n\ndef test_classify_image():\n    '''\n    Test the classify_image function.\n    '''\n    test_image_url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    predicted_class = classify_image(test_image_url)\n    assert isinstance(predicted_class, str), 'The predicted class should be a string.'\n    print('All Tests Passed')\n\n# call_test_function_code --------------------\n\nif __name__ == '__main__':\n    test_classify_image()", "function_import": "# function_import --------------------\n\nimport torch\nfrom transformers import ViTImageProcessor, ViTForImageClassification\nfrom PIL import Image\nimport requests\n\n", "function_code": "# function_code --------------------\n\ndef classify_image(image_url):\n    '''\n    Classify the image using Vision Transformer (ViT).\n\n    Args:\n        image_url (str): The url of the image to be classified.\n\n    Returns:\n        str: The predicted class of the image.\n\n    Raises:\n        OSError: If there is a problem with the network connection or the image file.\n    '''\n    image = Image.open(requests.get(image_url, stream=True).raw)\n    processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224')\n    model = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\n    inputs = processor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    logits = outputs.logits\n    predicted_class_idx = logits.argmax(-1).item()\n    return model.config.id2label[predicted_class_idx]\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_classify_image():\n    '''\n    Test the classify_image function.\n    '''\n    test_image_url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    predicted_class = classify_image(test_image_url)\n    assert isinstance(predicted_class, str), 'The predicted class should be a string.'\n    print('All Tests Passed')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\nif __name__ == '__main__':\n    test_classify_image()", "instruct": "# function_import --------------------\n\nimport torch\nfrom transformers import ViTImageProcessor, ViTForImageClassification\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef classify_image(image_url):\n    '''\n    Classify the image using Vision Transformer (ViT).\n\n    Args:\n        image_url (str): The url of the image to be classified.\n\n    Returns:\n        str: The predicted class of the image.\n\n    Raises:\n        OSError: If there is a problem with the network connection or the image file.\n    '''", "answer": "\n    image = Image.open(requests.get(image_url, stream=True).raw)\n    processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224')\n    model = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\n    inputs = processor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    logits = outputs.logits\n    predicted_class_idx = logits.argmax(-1).item()\n    return model.config.id2label[predicted_class_idx]\n\n", "prediction": "\n    try:\n        # load processor and model --------------------\n        device = torch.device(\"cuda\") if torch.cuda.is_available() else torch.device(\"cpu\")\n        processor = ViTImageProcessor(feature_extractor=\"google/vit-base-patch16-224\", device=device)\n        model = ViTForImageClassification.from_pretrained('google/vit-large-patch16-224')\n\n        # process image --------------------\n        \n        # download the image from the url\n        response = requests.get(image_url, allow_redirects=True)\n        if response.status_code != 200:\n            raise OSError(\"Image file could not be loaded.\")\n        open('input_img/test.jpg', 'wb').write(response.content) # save the image locally\n        \n        # load the downloaded image to a PIL Image object\n        img = Image.open('input_img/test.jpg') \n        \n        # process the images and prepare for classification\n        img_input, _ = processor(images=img)\n        \n        # classify the image --------------------\n        \n        # move to device before classifying\n        model.to(device)\n        img_input = img_input.to(device)\n\n        # make a prediction\n        pred = model(img_input, labels=None) \n        \n        # get the top predicted class (0 is the first item in the list)\n        preds = torch.nn.functional.softmax(pred[0], dim=0)\n        predicted_class_idx = preds.argsort()[-1].item()\n        predicted_class = model.config.id2label[predicted_class_idx]\n        \n    except OSError:\n        raise OSError(\"Image file could not be loaded.\")\n    \n    return predicted_class\n"}