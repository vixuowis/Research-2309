{"path": "output/hf-eval-data-v3-valid/f00843_detect_csgo_players.py", "content": "# function_import --------------------\n\nfrom ultralyticsplus import YOLO, render_result\n\n# function_code --------------------\n\ndef detect_csgo_players(image_path: str) -> None:\n    '''\n    Detects players in a live game of Counter-Strike: Global Offensive (CS:GO) using a pre-trained YOLO model.\n\n    Args:\n        image_path (str): The path to the game screen image.\n\n    Returns:\n        None. The function prints the bounding boxes of detected players and displays the image with detected players.\n\n    Raises:\n        FileNotFoundError: If the provided image_path does not exist.\n    '''\n    model = YOLO('keremberke/yolov8m-csgo-player-detection')\n    model.overrides['conf'] = 0.25\n    model.overrides['iou'] = 0.45\n    model.overrides['agnostic_nms'] = False\n    model.overrides['max_det'] = 1000\n    results = model.predict(image_path)\n    print(results[0].boxes)\n    render = render_result(model=model, image=image_path, result=results[0])\n    render.show()\n\n# test_function_code --------------------\n\ndef test_detect_csgo_players():\n    '''\n    Tests the detect_csgo_players function with a sample image.\n    '''\n    try:\n        detect_csgo_players('https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg')\n        print('Test Passed')\n    except Exception as e:\n        print('Test Failed')\n        print(e)\n\n# call_test_function_code --------------------\n\ntest_detect_csgo_players()", "function_import": "# function_import --------------------\n\nfrom ultralyticsplus import YOLO, render_result\n\n", "function_code": "# function_code --------------------\n\ndef detect_csgo_players(image_path: str) -> None:\n    '''\n    Detects players in a live game of Counter-Strike: Global Offensive (CS:GO) using a pre-trained YOLO model.\n\n    Args:\n        image_path (str): The path to the game screen image.\n\n    Returns:\n        None. The function prints the bounding boxes of detected players and displays the image with detected players.\n\n    Raises:\n        FileNotFoundError: If the provided image_path does not exist.\n    '''\n    model = YOLO('keremberke/yolov8m-csgo-player-detection')\n    model.overrides['conf'] = 0.25\n    model.overrides['iou'] = 0.45\n    model.overrides['agnostic_nms'] = False\n    model.overrides['max_det'] = 1000\n    results = model.predict(image_path)\n    print(results[0].boxes)\n    render = render_result(model=model, image=image_path, result=results[0])\n    render.show()\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_detect_csgo_players():\n    '''\n    Tests the detect_csgo_players function with a sample image.\n    '''\n    try:\n        detect_csgo_players('https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg')\n        print('Test Passed')\n    except Exception as e:\n        print('Test Failed')\n        print(e)\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_detect_csgo_players()", "instruct": "# function_import --------------------\n\nfrom ultralyticsplus import YOLO, render_result\n\n# function_code --------------------\n\ndef detect_csgo_players(image_path: str) -> None:\n    '''\n    Detects players in a live game of Counter-Strike: Global Offensive (CS:GO) using a pre-trained YOLO model.\n\n    Args:\n        image_path (str): The path to the game screen image.\n\n    Returns:\n        None. The function prints the bounding boxes of detected players and displays the image with detected players.\n\n    Raises:\n        FileNotFoundError: If the provided image_path does not exist.\n    '''", "answer": "\n    model = YOLO('keremberke/yolov8m-csgo-player-detection')\n    model.overrides['conf'] = 0.25\n    model.overrides['iou'] = 0.45\n    model.overrides['agnostic_nms'] = False\n    model.overrides['max_det'] = 1000\n    results = model.predict(image_path)\n    print(results[0].boxes)\n    render = render_result(model=model, image=image_path, result=results[0])\n    render.show()\n\n", "prediction": "    \n    try:\n        img = YOLO(weights='best.pt') # Load best pre-trained weights\n        \n        results = img.detect(image_path) # Detect players with YOLOv5\n\n        render_result(image_path, results) # Render bounding boxes\n    except FileNotFoundError:\n        print(\"The file \" + image_path + ' does not exist')\n        raise "}