{"path": "output/hf-eval-data-v3-valid/f00639_generate_image.py", "content": "# function_import --------------------\n\nfrom diffusers import StableDiffusionPipeline\nimport torch\nimport os\n\n# function_code --------------------\n\ndef generate_image(prompt: str, model_id: str = 'dreamlike-art/dreamlike-photoreal-2.0', device: str = 'cuda') -> None:\n    \"\"\"\n    Generate an image based on the given text prompt using a pre-trained model.\n\n    Args:\n        prompt (str): The text prompt to generate the image from.\n        model_id (str, optional): The ID of the pre-trained model to use. Defaults to 'dreamlike-art/dreamlike-photoreal-2.0'.\n        device (str, optional): The device to run the model on. Defaults to 'cuda'.\n\n    Returns:\n        None. The function saves the generated image as 'result.png' in the current directory.\n    \"\"\"\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe = pipe.to(device)\n    generated_image = pipe(prompt).images[0]\n    generated_image.save('result.png')\n\n# test_function_code --------------------\n\ndef test_generate_image():\n    \"\"\"\n    Test the generate_image function.\n    \"\"\"\n    generate_image('astronaut playing guitar in space')\n    assert os.path.exists('result.png'), 'Image not generated'\n    os.remove('result.png')\n    generate_image('a cat sitting on a tree')\n    assert os.path.exists('result.png'), 'Image not generated'\n    os.remove('result.png')\n    generate_image('a beautiful sunset over the ocean')\n    assert os.path.exists('result.png'), 'Image not generated'\n    os.remove('result.png')\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\nprint(test_generate_image())", "function_import": "# function_import --------------------\n\nfrom diffusers import StableDiffusionPipeline\nimport torch\nimport os\n\n", "function_code": "# function_code --------------------\n\ndef generate_image(prompt: str, model_id: str = 'dreamlike-art/dreamlike-photoreal-2.0', device: str = 'cuda') -> None:\n    \"\"\"\n    Generate an image based on the given text prompt using a pre-trained model.\n\n    Args:\n        prompt (str): The text prompt to generate the image from.\n        model_id (str, optional): The ID of the pre-trained model to use. Defaults to 'dreamlike-art/dreamlike-photoreal-2.0'.\n        device (str, optional): The device to run the model on. Defaults to 'cuda'.\n\n    Returns:\n        None. The function saves the generated image as 'result.png' in the current directory.\n    \"\"\"\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe = pipe.to(device)\n    generated_image = pipe(prompt).images[0]\n    generated_image.save('result.png')\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_image():\n    \"\"\"\n    Test the generate_image function.\n    \"\"\"\n    generate_image('astronaut playing guitar in space')\n    assert os.path.exists('result.png'), 'Image not generated'\n    os.remove('result.png')\n    generate_image('a cat sitting on a tree')\n    assert os.path.exists('result.png'), 'Image not generated'\n    os.remove('result.png')\n    generate_image('a beautiful sunset over the ocean')\n    assert os.path.exists('result.png'), 'Image not generated'\n    os.remove('result.png')\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\nprint(test_generate_image())", "instruct": "# function_import --------------------\n\nfrom diffusers import StableDiffusionPipeline\nimport torch\nimport os\n\n# function_code --------------------\n\ndef generate_image(prompt: str, model_id: str = 'dreamlike-art/dreamlike-photoreal-2.0', device: str = 'cuda') -> None:\n    \"\"\"\n    Generate an image based on the given text prompt using a pre-trained model.\n\n    Args:\n        prompt (str): The text prompt to generate the image from.\n        model_id (str, optional): The ID of the pre-trained model to use. Defaults to 'dreamlike-art/dreamlike-photoreal-2.0'.\n        device (str, optional): The device to run the model on. Defaults to 'cuda'.\n\n    Returns:\n        None. The function saves the generated image as 'result.png' in the current directory.\n    \"\"\"", "answer": "\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe = pipe.to(device)\n    generated_image = pipe(prompt).images[0]\n    generated_image.save('result.png')\n\n", "prediction": "    \n    # load model\n    if os.path.exists(f'{model_id}.ckpt'):\n        \n        # load checkpoint and config from file\n        pipeline = StableDiffusionPipeline.load_from_checkpoint(os.getcwd() + f'/{model_id}.ckpt', model_type=\"openai\")    \n    else:\n        # download model and config\n        pipeline = StableDiffusionPipeline(\"openai\", model_id=model_id)\n        \n        # save checkpoint and config to file\n        pipeline.save_pretrained(os.getcwd())\n    \n    # generate image\n    img, text_enc, clip_img = pipeline._prepare_inputs_for_generation(text=prompt, images=[], return_tensors='pt', \n                                                        template=None, max_target_length=512)\n    \n    # move to device and zero gradients\n    img = img.to(device)\n    text_enc = text_enc.to(device)\n    clip_img = clip_img.to(device)\n\n    with torch.no_grad():\n        generated_images, losses = pipeline._model.generate_images(text_enc=text_enc, clip_img=clip_img, \n                                image_size=(256, 256), num_cutouts=10, cutn=32)\n        \n        generated_image = generated_images[0] / 2 + 0.5\n    \n    torchvision.utils.save_image(generated_image, 'result.png')"}