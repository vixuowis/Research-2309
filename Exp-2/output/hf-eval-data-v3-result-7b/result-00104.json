{"path": "output/hf-eval-data-v3-valid/f00442_predict_carbon_emissions.py", "content": "# function_import --------------------\n\nimport json\nimport joblib\nimport pandas as pd\n\n# function_code --------------------\n\ndef predict_carbon_emissions(model_path: str, config_path: str, data_path: str) -> pd.DataFrame:\n    \"\"\"\n    Predict the carbon emissions of different facilities based on the provided data.\n\n    Args:\n        model_path (str): The path to the pretrained model.\n        config_path (str): The path to the configuration file.\n        data_path (str): The path to the data file.\n\n    Returns:\n        pd.DataFrame: The predicted carbon emissions for each facility.\n    \"\"\"\n    model = joblib.load(model_path)\n    config = json.load(open(config_path))\n    features = config['features']\n\n    data = pd.read_csv(data_path)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n\n    predictions = model.predict(data)\n    return predictions\n\n# test_function_code --------------------\n\ndef test_predict_carbon_emissions():\n    \"\"\"\n    Test the predict_carbon_emissions function.\n    \"\"\"\n    model_path = 'model.joblib'\n    config_path = 'config.json'\n    data_path = 'data.csv'\n\n    try:\n        predictions = predict_carbon_emissions(model_path, config_path, data_path)\n        assert isinstance(predictions, pd.DataFrame), 'The result is not a DataFrame.'\n        assert not predictions.empty, 'The DataFrame is empty.'\n    except FileNotFoundError:\n        print('Test files not found.')\n    except Exception as e:\n        print(f'An error occurred: {e}')\n    else:\n        print('All tests passed.')\n\n# call_test_function_code --------------------\n\ntest_predict_carbon_emissions()", "function_import": "# function_import --------------------\n\nimport json\nimport joblib\nimport pandas as pd\n\n", "function_code": "# function_code --------------------\n\ndef predict_carbon_emissions(model_path: str, config_path: str, data_path: str) -> pd.DataFrame:\n    \"\"\"\n    Predict the carbon emissions of different facilities based on the provided data.\n\n    Args:\n        model_path (str): The path to the pretrained model.\n        config_path (str): The path to the configuration file.\n        data_path (str): The path to the data file.\n\n    Returns:\n        pd.DataFrame: The predicted carbon emissions for each facility.\n    \"\"\"\n    model = joblib.load(model_path)\n    config = json.load(open(config_path))\n    features = config['features']\n\n    data = pd.read_csv(data_path)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n\n    predictions = model.predict(data)\n    return predictions\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_predict_carbon_emissions():\n    \"\"\"\n    Test the predict_carbon_emissions function.\n    \"\"\"\n    model_path = 'model.joblib'\n    config_path = 'config.json'\n    data_path = 'data.csv'\n\n    try:\n        predictions = predict_carbon_emissions(model_path, config_path, data_path)\n        assert isinstance(predictions, pd.DataFrame), 'The result is not a DataFrame.'\n        assert not predictions.empty, 'The DataFrame is empty.'\n    except FileNotFoundError:\n        print('Test files not found.')\n    except Exception as e:\n        print(f'An error occurred: {e}')\n    else:\n        print('All tests passed.')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_predict_carbon_emissions()", "instruct": "# function_import --------------------\n\nimport json\nimport joblib\nimport pandas as pd\n\n# function_code --------------------\n\ndef predict_carbon_emissions(model_path: str, config_path: str, data_path: str) -> pd.DataFrame:\n    \"\"\"\n    Predict the carbon emissions of different facilities based on the provided data.\n\n    Args:\n        model_path (str): The path to the pretrained model.\n        config_path (str): The path to the configuration file.\n        data_path (str): The path to the data file.\n\n    Returns:\n        pd.DataFrame: The predicted carbon emissions for each facility.\n    \"\"\"", "answer": "\n    model = joblib.load(model_path)\n    config = json.load(open(config_path))\n    features = config['features']\n\n    data = pd.read_csv(data_path)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n\n    predictions = model.predict(data)\n    return predictions\n\n", "prediction": "    \n    \n    # Load model and configuration file \n    config = json.load(open(config_path))\n\n    # load data\n    df = pd.read_csv(data_path)\n\n    df['facility']=df['Facility Name'].astype('category').cat.codes\n    \n    df['month'] = pd.Categorical(pd.to_datetime(df['date']).dt.strftime(\"%b\"), categories=config['categories'])\n        .cat.codes\n    df.head()\n    \n    # Predict carbon emissions using model\n    with open(model_path, 'rb') as mdl:\n        \n        model = joblib.load(mdl)\n            \n        predicted_values = model.predict(df[list(config['x'])])\n    \n    return pd.DataFrame({'Facility Name': df['Facility Name'],  'CO2_predicted': predicted_values})"}