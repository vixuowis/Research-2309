{"path": "output/hf-eval-data-v3-valid/f00185_extract_invoice_info.py", "content": "# function_import --------------------\n\nfrom transformers import LayoutLMForQuestionAnswering, pipeline\nfrom PIL import Image\n\n# function_code --------------------\n\ndef extract_invoice_info(image_path: str, question: str) -> str:\n    \"\"\"\n    Extracts information from an invoice image using a question-answering model.\n\n    Args:\n        image_path (str): The path to the invoice image.\n        question (str): The question to be answered based on the invoice image.\n\n    Returns:\n        str: The answer to the question based on the invoice image.\n    \"\"\"\n    nlp = pipeline('question-answering', model=LayoutLMForQuestionAnswering.from_pretrained('microsoft/layoutlm-base-uncased'))\n    result = nlp(question, image_path)\n    return result['answer']\n\n# test_function_code --------------------\n\ndef test_extract_invoice_info():\n    \"\"\"\n    Tests the function 'extract_invoice_info'.\n    \"\"\"\n    # Test case 1\n    image_path = 'https://templates.invoicehome.com/invoice-template-us-neat-750px.png'\n    question = 'What is the invoice number?'\n    assert isinstance(extract_invoice_info(image_path, question), str)\n\n    # Test case 2\n    image_path = 'https://miro.medium.com/max/787/1*iECQRIiOGTmEFLdWkVIH2g.jpeg'\n    question = 'What is the purchase amount?'\n    assert isinstance(extract_invoice_info(image_path, question), str)\n\n    # Test case 3\n    image_path = 'https://www.accountingcoach.com/wp-content/uploads/2013/10/income-statement-example@2x.png'\n    question = 'What are the 2020 net sales?'\n    assert isinstance(extract_invoice_info(image_path, question), str)\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_extract_invoice_info()", "function_import": "# function_import --------------------\n\nfrom transformers import LayoutLMForQuestionAnswering, pipeline\nfrom PIL import Image\n\n", "function_code": "# function_code --------------------\n\ndef extract_invoice_info(image_path: str, question: str) -> str:\n    \"\"\"\n    Extracts information from an invoice image using a question-answering model.\n\n    Args:\n        image_path (str): The path to the invoice image.\n        question (str): The question to be answered based on the invoice image.\n\n    Returns:\n        str: The answer to the question based on the invoice image.\n    \"\"\"\n    nlp = pipeline('question-answering', model=LayoutLMForQuestionAnswering.from_pretrained('microsoft/layoutlm-base-uncased'))\n    result = nlp(question, image_path)\n    return result['answer']\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_extract_invoice_info():\n    \"\"\"\n    Tests the function 'extract_invoice_info'.\n    \"\"\"\n    # Test case 1\n    image_path = 'https://templates.invoicehome.com/invoice-template-us-neat-750px.png'\n    question = 'What is the invoice number?'\n    assert isinstance(extract_invoice_info(image_path, question), str)\n\n    # Test case 2\n    image_path = 'https://miro.medium.com/max/787/1*iECQRIiOGTmEFLdWkVIH2g.jpeg'\n    question = 'What is the purchase amount?'\n    assert isinstance(extract_invoice_info(image_path, question), str)\n\n    # Test case 3\n    image_path = 'https://www.accountingcoach.com/wp-content/uploads/2013/10/income-statement-example@2x.png'\n    question = 'What are the 2020 net sales?'\n    assert isinstance(extract_invoice_info(image_path, question), str)\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_extract_invoice_info()", "instruct": "# function_import --------------------\n\nfrom transformers import LayoutLMForQuestionAnswering, pipeline\nfrom PIL import Image\n\n# function_code --------------------\n\ndef extract_invoice_info(image_path: str, question: str) -> str:\n    \"\"\"\n    Extracts information from an invoice image using a question-answering model.\n\n    Args:\n        image_path (str): The path to the invoice image.\n        question (str): The question to be answered based on the invoice image.\n\n    Returns:\n        str: The answer to the question based on the invoice image.\n    \"\"\"", "answer": "\n    nlp = pipeline('question-answering', model=LayoutLMForQuestionAnswering.from_pretrained('microsoft/layoutlm-base-uncased'))\n    result = nlp(question, image_path)\n    return result['answer']\n\n", "prediction": "\n\n    # Create LayoutLMForQuestionAnswering model ----------------\n    \n    model = LayoutLMForQuestionAnswering.from_pretrained(\"microsoft/layoutlmforquestionanswering\")\n    image = Image.open(image_path) \n    layoutlm_pipeline = pipeline('question-answering', model=model, tokenizer=model)\n    \n    # Run LayoutLMForQuestionAnswering pipeline ---------------------\n    \n    result = layoutlm_pipeline({'image': image}, question)\n\n    return result['answer']"}