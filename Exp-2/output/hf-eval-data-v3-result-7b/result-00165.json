{"path": "output/hf-eval-data-v3-valid/f00675_emotion_classifier.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef emotion_classifier(text):\n    \"\"\"\n    Identify the type of emotion in a movie review.\n\n    Args:\n        text (str): The movie review text.\n\n    Returns:\n        dict: The predicted emotion and its score.\n\n    Raises:\n        OSError: If there is a problem with the disk quota.\n    \"\"\"\n    classifier = pipeline('sentiment-analysis', model='michellejieli/emotion_text_classifier')\n    result = classifier(text)\n    return result\n\n# test_function_code --------------------\n\ndef test_emotion_classifier():\n    \"\"\"\n    Test the emotion_classifier function.\n    \"\"\"\n    test_text = 'What a fantastic movie! It was so captivating.'\n    result = emotion_classifier(test_text)\n    assert isinstance(result, list), 'The result should be a list.'\n    assert 'label' in result[0], 'Each item in the result should have a label.'\n    assert 'score' in result[0], 'Each item in the result should have a score.'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_emotion_classifier()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef emotion_classifier(text):\n    \"\"\"\n    Identify the type of emotion in a movie review.\n\n    Args:\n        text (str): The movie review text.\n\n    Returns:\n        dict: The predicted emotion and its score.\n\n    Raises:\n        OSError: If there is a problem with the disk quota.\n    \"\"\"\n    classifier = pipeline('sentiment-analysis', model='michellejieli/emotion_text_classifier')\n    result = classifier(text)\n    return result\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_emotion_classifier():\n    \"\"\"\n    Test the emotion_classifier function.\n    \"\"\"\n    test_text = 'What a fantastic movie! It was so captivating.'\n    result = emotion_classifier(test_text)\n    assert isinstance(result, list), 'The result should be a list.'\n    assert 'label' in result[0], 'Each item in the result should have a label.'\n    assert 'score' in result[0], 'Each item in the result should have a score.'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_emotion_classifier()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef emotion_classifier(text):\n    \"\"\"\n    Identify the type of emotion in a movie review.\n\n    Args:\n        text (str): The movie review text.\n\n    Returns:\n        dict: The predicted emotion and its score.\n\n    Raises:\n        OSError: If there is a problem with the disk quota.\n    \"\"\"", "answer": "\n    classifier = pipeline('sentiment-analysis', model='michellejieli/emotion_text_classifier')\n    result = classifier(text)\n    return result\n\n", "prediction": " \n    \n    # Load model\n    classifier = pipeline(\"text-classification\", return_all_scores=True)\n\n    # Identify emotion\n    result = classifier(text)\n\n    # Return dictionary of prediction results, including the emotion with the highest score\n    return max(result, key=lambda x: x['score'])"}