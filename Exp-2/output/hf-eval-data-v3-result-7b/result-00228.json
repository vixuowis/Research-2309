{"path": "output/hf-eval-data-v3-valid/f00863_emotion_classification.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef emotion_classification(user_message):\n    \"\"\"\n    This function uses a pre-trained model from Hugging Face Transformers to classify the emotion in a given text.\n\n    Args:\n        user_message (str): The text message from the user.\n\n    Returns:\n        dict: The emotion classification result.\n\n    Raises:\n        OSError: If there is a problem with the disk quota.\n    \"\"\"\n    emotion_classifier = pipeline('sentiment-analysis', model='michellejieli/emotion_text_classifier')\n    emotion_result = emotion_classifier(user_message)\n    return emotion_result\n\n# test_function_code --------------------\n\ndef test_emotion_classification():\n    \"\"\"\n    This function tests the emotion_classification function with different test cases.\n    \"\"\"\n    test_case_1 = 'I am feeling a bit down today.'\n    test_case_2 = 'I am so happy!'\n    test_case_3 = 'I am really angry at you.'\n\n    assert isinstance(emotion_classification(test_case_1), list)\n    assert isinstance(emotion_classification(test_case_2), list)\n    assert isinstance(emotion_classification(test_case_3), list)\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_emotion_classification()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef emotion_classification(user_message):\n    \"\"\"\n    This function uses a pre-trained model from Hugging Face Transformers to classify the emotion in a given text.\n\n    Args:\n        user_message (str): The text message from the user.\n\n    Returns:\n        dict: The emotion classification result.\n\n    Raises:\n        OSError: If there is a problem with the disk quota.\n    \"\"\"\n    emotion_classifier = pipeline('sentiment-analysis', model='michellejieli/emotion_text_classifier')\n    emotion_result = emotion_classifier(user_message)\n    return emotion_result\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_emotion_classification():\n    \"\"\"\n    This function tests the emotion_classification function with different test cases.\n    \"\"\"\n    test_case_1 = 'I am feeling a bit down today.'\n    test_case_2 = 'I am so happy!'\n    test_case_3 = 'I am really angry at you.'\n\n    assert isinstance(emotion_classification(test_case_1), list)\n    assert isinstance(emotion_classification(test_case_2), list)\n    assert isinstance(emotion_classification(test_case_3), list)\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_emotion_classification()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef emotion_classification(user_message):\n    \"\"\"\n    This function uses a pre-trained model from Hugging Face Transformers to classify the emotion in a given text.\n\n    Args:\n        user_message (str): The text message from the user.\n\n    Returns:\n        dict: The emotion classification result.\n\n    Raises:\n        OSError: If there is a problem with the disk quota.\n    \"\"\"", "answer": "\n    emotion_classifier = pipeline('sentiment-analysis', model='michellejieli/emotion_text_classifier')\n    emotion_result = emotion_classifier(user_message)\n    return emotion_result\n\n", "prediction": "\n    \n    # Load pre-trained model tokenizer\n    model_name = 'distilbert-base-uncased'\n    model = pipeline('text-classification', model=model_name)\n\n    result = model(user_message)[0]\n        \n    return {\n        \"label\": result[\"label\"],  # emotion label as a string (e.g., 'sadness')\n        \"confidence\": round(result[\"score\"] * 100, 2)   # confidence of the prediction as a %\n    }"}