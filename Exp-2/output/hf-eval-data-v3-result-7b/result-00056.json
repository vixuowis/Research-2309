{"path": "output/hf-eval-data-v3-valid/f00216_german_text_classification.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef german_text_classification(sequence: str, candidate_labels: list, hypothesis_template: str = 'In deisem geht es um {}.') -> dict:\n    '''\n    Classify a German text into different categories using zero-shot classification.\n\n    Args:\n        sequence (str): The input text in German to be classified.\n        candidate_labels (list): A list of candidate labels in German.\n        hypothesis_template (str): A hypothesis template in German. Default is 'In deisem geht es um {}.'.\n\n    Returns:\n        dict: The classification result.\n    '''\n    classifier = pipeline('zero-shot-classification', model='Sahajtomar/German_Zeroshot')\n    result = classifier(sequence, candidate_labels, hypothesis_template=hypothesis_template)\n    return result\n\n# test_function_code --------------------\n\ndef test_german_text_classification():\n    '''\n    Test the function german_text_classification.\n    '''\n    sequence = 'Letzte Woche gab es einen Selbstmord in einer nahe gelegenen kolonie'\n    candidate_labels = ['Verbrechen', 'Trag\u00f6die', 'Stehlen']\n    result = german_text_classification(sequence, candidate_labels)\n    assert isinstance(result, dict), 'The result should be a dictionary.'\n    assert 'labels' in result, 'The result should contain labels.'\n    assert 'scores' in result, 'The result should contain scores.'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_german_text_classification()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef german_text_classification(sequence: str, candidate_labels: list, hypothesis_template: str = 'In deisem geht es um {}.') -> dict:\n    '''\n    Classify a German text into different categories using zero-shot classification.\n\n    Args:\n        sequence (str): The input text in German to be classified.\n        candidate_labels (list): A list of candidate labels in German.\n        hypothesis_template (str): A hypothesis template in German. Default is 'In deisem geht es um {}.'.\n\n    Returns:\n        dict: The classification result.\n    '''\n    classifier = pipeline('zero-shot-classification', model='Sahajtomar/German_Zeroshot')\n    result = classifier(sequence, candidate_labels, hypothesis_template=hypothesis_template)\n    return result\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_german_text_classification():\n    '''\n    Test the function german_text_classification.\n    '''\n    sequence = 'Letzte Woche gab es einen Selbstmord in einer nahe gelegenen kolonie'\n    candidate_labels = ['Verbrechen', 'Trag\u00f6die', 'Stehlen']\n    result = german_text_classification(sequence, candidate_labels)\n    assert isinstance(result, dict), 'The result should be a dictionary.'\n    assert 'labels' in result, 'The result should contain labels.'\n    assert 'scores' in result, 'The result should contain scores.'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_german_text_classification()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef german_text_classification(sequence: str, candidate_labels: list, hypothesis_template: str = 'In deisem geht es um {}.') -> dict:\n    '''\n    Classify a German text into different categories using zero-shot classification.\n\n    Args:\n        sequence (str): The input text in German to be classified.\n        candidate_labels (list): A list of candidate labels in German.\n        hypothesis_template (str): A hypothesis template in German. Default is 'In deisem geht es um {}.'.\n\n    Returns:\n        dict: The classification result.\n    '''", "answer": "\n    classifier = pipeline('zero-shot-classification', model='Sahajtomar/German_Zeroshot')\n    result = classifier(sequence, candidate_labels, hypothesis_template=hypothesis_template)\n    return result\n\n", "prediction": "\n\n    # Initialize zero-shot text classification pipeline\n    zero_shot_classification_pipeline = pipeline(task='zero-shot-classification', device=-1)\n    \n    # Classify the input text sequence\n    result = zero_shot_classification_pipeline(sequence, candidate_labels=candidate_labels, hypothesis_template=hypothesis_template)\n    \n    return result"}