{"path": "output/hf-eval-data-v3-valid/f00330_classify_movie_reviews.py", "content": "# function_import --------------------\n\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n# function_code --------------------\n\ndef classify_movie_reviews(data_file):\n    \"\"\"\n    Classify movie reviews as positive or negative using a pretrained model.\n\n    Args:\n        data_file (str): Path to the CSV file containing movie reviews.\n\n    Returns:\n        predictions (numpy.ndarray): Predicted classes for each review in the input data.\n\n    Raises:\n        FileNotFoundError: If the model file or the data file does not exist.\n    \"\"\"\n    model = joblib.load('model.joblib')\n    data = pd.read_csv(data_file)\n    predictions = model.predict(data)\n    return predictions\n\n# test_function_code --------------------\n\ndef test_classify_movie_reviews():\n    \"\"\"\n    Test the classify_movie_reviews function with a sample data file.\n    \"\"\"\n    try:\n        predictions = classify_movie_reviews('test_data.csv')\n        assert isinstance(predictions, np.ndarray), 'The output should be a numpy array.'\n        assert len(predictions) > 0, 'The output array should not be empty.'\n    except FileNotFoundError:\n        print('Model file or data file not found.')\n    except Exception as e:\n        print(f'Unexpected error: {e}')\n\n# call_test_function_code --------------------\n\ntest_classify_movie_reviews()", "function_import": "# function_import --------------------\n\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n", "function_code": "# function_code --------------------\n\ndef classify_movie_reviews(data_file):\n    \"\"\"\n    Classify movie reviews as positive or negative using a pretrained model.\n\n    Args:\n        data_file (str): Path to the CSV file containing movie reviews.\n\n    Returns:\n        predictions (numpy.ndarray): Predicted classes for each review in the input data.\n\n    Raises:\n        FileNotFoundError: If the model file or the data file does not exist.\n    \"\"\"\n    model = joblib.load('model.joblib')\n    data = pd.read_csv(data_file)\n    predictions = model.predict(data)\n    return predictions\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_classify_movie_reviews():\n    \"\"\"\n    Test the classify_movie_reviews function with a sample data file.\n    \"\"\"\n    try:\n        predictions = classify_movie_reviews('test_data.csv')\n        assert isinstance(predictions, np.ndarray), 'The output should be a numpy array.'\n        assert len(predictions) > 0, 'The output array should not be empty.'\n    except FileNotFoundError:\n        print('Model file or data file not found.')\n    except Exception as e:\n        print(f'Unexpected error: {e}')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_classify_movie_reviews()", "instruct": "# function_import --------------------\n\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n# function_code --------------------\n\ndef classify_movie_reviews(data_file):\n    \"\"\"\n    Classify movie reviews as positive or negative using a pretrained model.\n\n    Args:\n        data_file (str): Path to the CSV file containing movie reviews.\n\n    Returns:\n        predictions (numpy.ndarray): Predicted classes for each review in the input data.\n\n    Raises:\n        FileNotFoundError: If the model file or the data file does not exist.\n    \"\"\"", "answer": "\n    model = joblib.load('model.joblib')\n    data = pd.read_csv(data_file)\n    predictions = model.predict(data)\n    return predictions\n\n", "prediction": "\n    # load model from disk\n    try:\n        lr = joblib.load('lr_model.pkl')\n    except:\n        raise FileNotFoundError(\"Model file 'lr_model.pkl' was not found in the current directory\")\n\n    # read data\n    df = pd.read_csv(data_file)\n\n    # extract features and target variable\n    X = np.array([df.review])\n    Y = np.array(df.label).reshape(-1, 1)\n\n    print(\"Data loaded...\")\n\n    predictions = lr.predict(X)\n    \n    return predictions"}