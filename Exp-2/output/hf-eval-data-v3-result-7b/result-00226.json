{"path": "output/hf-eval-data-v3-valid/f00861_sentiment_analysis.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef sentiment_analysis(review):\n    \"\"\"\n    This function uses the Hugging Face Transformers library to perform sentiment analysis on a given movie review.\n    The sentiment analysis model used is 'lvwerra/distilbert-imdb', which is trained on the IMDB dataset.\n\n    Args:\n        review (str): The movie review to be analyzed.\n\n    Returns:\n        dict: The sentiment prediction. Contains two keys - 'label' and 'score'. 'label' can be 'POSITIVE' or 'NEGATIVE'.\n        'score' is a float indicating the confidence of the prediction.\n    \"\"\"\n    sentiment_classifier = pipeline('sentiment-analysis', model='lvwerra/distilbert-imdb')\n    sentiment_prediction = sentiment_classifier(review)\n    return sentiment_prediction[0]\n\n# test_function_code --------------------\n\ndef test_sentiment_analysis():\n    \"\"\"\n    This function tests the sentiment_analysis function with some example movie reviews.\n    \"\"\"\n    positive_review = \"I absolutely loved this movie! The acting, the storyline, and the cinematography were all outstanding.\"\n    negative_review = \"I really didn't like this movie. The plot was predictable and the acting was subpar.\"\n\n    positive_prediction = sentiment_analysis(positive_review)\n    negative_prediction = sentiment_analysis(negative_review)\n\n    assert positive_prediction['label'] == 'POSITIVE', f\"Expected 'POSITIVE', but got {positive_prediction['label']}\"\n    assert negative_prediction['label'] == 'NEGATIVE', f\"Expected 'NEGATIVE', but got {negative_prediction['label']}\"\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_sentiment_analysis()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef sentiment_analysis(review):\n    \"\"\"\n    This function uses the Hugging Face Transformers library to perform sentiment analysis on a given movie review.\n    The sentiment analysis model used is 'lvwerra/distilbert-imdb', which is trained on the IMDB dataset.\n\n    Args:\n        review (str): The movie review to be analyzed.\n\n    Returns:\n        dict: The sentiment prediction. Contains two keys - 'label' and 'score'. 'label' can be 'POSITIVE' or 'NEGATIVE'.\n        'score' is a float indicating the confidence of the prediction.\n    \"\"\"\n    sentiment_classifier = pipeline('sentiment-analysis', model='lvwerra/distilbert-imdb')\n    sentiment_prediction = sentiment_classifier(review)\n    return sentiment_prediction[0]\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_sentiment_analysis():\n    \"\"\"\n    This function tests the sentiment_analysis function with some example movie reviews.\n    \"\"\"\n    positive_review = \"I absolutely loved this movie! The acting, the storyline, and the cinematography were all outstanding.\"\n    negative_review = \"I really didn't like this movie. The plot was predictable and the acting was subpar.\"\n\n    positive_prediction = sentiment_analysis(positive_review)\n    negative_prediction = sentiment_analysis(negative_review)\n\n    assert positive_prediction['label'] == 'POSITIVE', f\"Expected 'POSITIVE', but got {positive_prediction['label']}\"\n    assert negative_prediction['label'] == 'NEGATIVE', f\"Expected 'NEGATIVE', but got {negative_prediction['label']}\"\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_sentiment_analysis()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef sentiment_analysis(review):\n    \"\"\"\n    This function uses the Hugging Face Transformers library to perform sentiment analysis on a given movie review.\n    The sentiment analysis model used is 'lvwerra/distilbert-imdb', which is trained on the IMDB dataset.\n\n    Args:\n        review (str): The movie review to be analyzed.\n\n    Returns:\n        dict: The sentiment prediction. Contains two keys - 'label' and 'score'. 'label' can be 'POSITIVE' or 'NEGATIVE'.\n        'score' is a float indicating the confidence of the prediction.\n    \"\"\"", "answer": "\n    sentiment_classifier = pipeline('sentiment-analysis', model='lvwerra/distilbert-imdb')\n    sentiment_prediction = sentiment_classifier(review)\n    return sentiment_prediction[0]\n\n", "prediction": "\n    # create sentiment analysis pipeline\n    sentiment_analysis = pipeline('sentiment-analysis', model='lvwerra/distilbert-imdb')\n    \n    return sentiment_analysis(review)"}