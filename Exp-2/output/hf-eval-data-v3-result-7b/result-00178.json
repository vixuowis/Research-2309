{"path": "output/hf-eval-data-v3-valid/f00725_predict_carbon_emission.py", "content": "# function_import --------------------\n\nimport json\nimport joblib\nimport pandas as pd\n\n# function_code --------------------\n\ndef predict_carbon_emission(data_file):\n    \"\"\"\n    Predicts whether a chemical plant is exceeding carbon emission limits.\n\n    Args:\n        data_file (str): Path to the CSV file containing data collected from the plant.\n\n    Returns:\n        predictions (list): A list of predictions where 1 indicates the plant is exceeding carbon emission limits and 0 otherwise.\n\n    Raises:\n        FileNotFoundError: If the model or configuration file does not exist.\n    \"\"\"\n    model = joblib.load('model.joblib')\n    config = json.load(open('config.json'))\n    features = config['features']\n    data = pd.read_csv(data_file)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n    predictions = model.predict(data)\n    return predictions\n\n# test_function_code --------------------\n\ndef test_predict_carbon_emission():\n    \"\"\"\n    Tests the predict_carbon_emission function.\n    \"\"\"\n    # Test with a sample data file\n    try:\n        predictions = predict_carbon_emission('sample_data.csv')\n        assert isinstance(predictions, list), 'The result is not a list.'\n        assert all(isinstance(i, (int, float)) for i in predictions), 'The list contains non-numeric values.'\n    except FileNotFoundError:\n        print('Test file not found.')\n    # Test with a non-existing file\n    try:\n        predict_carbon_emission('non_existing_file.csv')\n    except FileNotFoundError:\n        pass\n    else:\n        raise AssertionError('The function did not raise FileNotFoundError for a non-existing file.')\n    print('All Tests Passed')\n\n# call_test_function_code --------------------\n\ntest_predict_carbon_emission()", "function_import": "# function_import --------------------\n\nimport json\nimport joblib\nimport pandas as pd\n\n", "function_code": "# function_code --------------------\n\ndef predict_carbon_emission(data_file):\n    \"\"\"\n    Predicts whether a chemical plant is exceeding carbon emission limits.\n\n    Args:\n        data_file (str): Path to the CSV file containing data collected from the plant.\n\n    Returns:\n        predictions (list): A list of predictions where 1 indicates the plant is exceeding carbon emission limits and 0 otherwise.\n\n    Raises:\n        FileNotFoundError: If the model or configuration file does not exist.\n    \"\"\"\n    model = joblib.load('model.joblib')\n    config = json.load(open('config.json'))\n    features = config['features']\n    data = pd.read_csv(data_file)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n    predictions = model.predict(data)\n    return predictions\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_predict_carbon_emission():\n    \"\"\"\n    Tests the predict_carbon_emission function.\n    \"\"\"\n    # Test with a sample data file\n    try:\n        predictions = predict_carbon_emission('sample_data.csv')\n        assert isinstance(predictions, list), 'The result is not a list.'\n        assert all(isinstance(i, (int, float)) for i in predictions), 'The list contains non-numeric values.'\n    except FileNotFoundError:\n        print('Test file not found.')\n    # Test with a non-existing file\n    try:\n        predict_carbon_emission('non_existing_file.csv')\n    except FileNotFoundError:\n        pass\n    else:\n        raise AssertionError('The function did not raise FileNotFoundError for a non-existing file.')\n    print('All Tests Passed')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_predict_carbon_emission()", "instruct": "# function_import --------------------\n\nimport json\nimport joblib\nimport pandas as pd\n\n# function_code --------------------\n\ndef predict_carbon_emission(data_file):\n    \"\"\"\n    Predicts whether a chemical plant is exceeding carbon emission limits.\n\n    Args:\n        data_file (str): Path to the CSV file containing data collected from the plant.\n\n    Returns:\n        predictions (list): A list of predictions where 1 indicates the plant is exceeding carbon emission limits and 0 otherwise.\n\n    Raises:\n        FileNotFoundError: If the model or configuration file does not exist.\n    \"\"\"", "answer": "\n    model = joblib.load('model.joblib')\n    config = json.load(open('config.json'))\n    features = config['features']\n    data = pd.read_csv(data_file)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n    predictions = model.predict(data)\n    return predictions\n\n", "prediction": "\n    \n    # Load model\n    with open('./model/config_regression_rfc.json', 'r') as fp:\n        config = json.load(fp) \n        \n    model = joblib.load(config['file'])\n    \n    # Read CSV file\n    df = pd.read_csv(data_file, sep=',', index_col=0)\n    X = df[config['columns']]\n    \n    predictions = model.predict(X)\n\n    return predictions"}