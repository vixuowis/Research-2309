{"path": "output/hf-eval-data-v3-valid/f00359_classify_computer_parts.py", "content": "# function_import --------------------\n\nfrom transformers import ViTImageProcessor, ViTForImageClassification\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef classify_computer_parts(user_uploaded_image_file_path):\n    '''\n    Classify the computer parts in the image uploaded by the user.\n\n    Args:\n        user_uploaded_image_file_path (str): The file path of the image uploaded by the user.\n\n    Returns:\n        str: The predicted label of the computer part in the image.\n    '''\n    processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224')\n    model = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\n\n    image = Image.open(user_uploaded_image_file_path)\n    inputs = processor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    logits = outputs.logits\n    predicted_class_idx = logits.argmax(-1).item()\n    predicted_label = model.config.id2label[predicted_class_idx]\n\n    return predicted_label\n\n# test_function_code --------------------\n\ndef test_classify_computer_parts():\n    '''\n    Test the function classify_computer_parts.\n    '''\n    url = 'https://placekitten.com/200/300'\n    response = requests.get(url, stream=True)\n    with open('test_image.jpg', 'wb') as f:\n        f.write(response.content)\n\n    predicted_label = classify_computer_parts('test_image.jpg')\n    assert isinstance(predicted_label, str), 'The predicted label should be a string.'\n\n    print('All Tests Passed')\n\n# call_test_function_code --------------------\n\ntest_classify_computer_parts()", "function_import": "# function_import --------------------\n\nfrom transformers import ViTImageProcessor, ViTForImageClassification\nfrom PIL import Image\nimport requests\n\n", "function_code": "# function_code --------------------\n\ndef classify_computer_parts(user_uploaded_image_file_path):\n    '''\n    Classify the computer parts in the image uploaded by the user.\n\n    Args:\n        user_uploaded_image_file_path (str): The file path of the image uploaded by the user.\n\n    Returns:\n        str: The predicted label of the computer part in the image.\n    '''\n    processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224')\n    model = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\n\n    image = Image.open(user_uploaded_image_file_path)\n    inputs = processor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    logits = outputs.logits\n    predicted_class_idx = logits.argmax(-1).item()\n    predicted_label = model.config.id2label[predicted_class_idx]\n\n    return predicted_label\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_classify_computer_parts():\n    '''\n    Test the function classify_computer_parts.\n    '''\n    url = 'https://placekitten.com/200/300'\n    response = requests.get(url, stream=True)\n    with open('test_image.jpg', 'wb') as f:\n        f.write(response.content)\n\n    predicted_label = classify_computer_parts('test_image.jpg')\n    assert isinstance(predicted_label, str), 'The predicted label should be a string.'\n\n    print('All Tests Passed')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_classify_computer_parts()", "instruct": "# function_import --------------------\n\nfrom transformers import ViTImageProcessor, ViTForImageClassification\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef classify_computer_parts(user_uploaded_image_file_path):\n    '''\n    Classify the computer parts in the image uploaded by the user.\n\n    Args:\n        user_uploaded_image_file_path (str): The file path of the image uploaded by the user.\n\n    Returns:\n        str: The predicted label of the computer part in the image.\n    '''", "answer": "\n    processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224')\n    model = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\n\n    image = Image.open(user_uploaded_image_file_path)\n    inputs = processor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    logits = outputs.logits\n    predicted_class_idx = logits.argmax(-1).item()\n    predicted_label = model.config.id2label[predicted_class_idx]\n\n    return predicted_label\n\n", "prediction": "\n\n    # Load pre-trained model and tokenizer for ViT for image classification. \n    # For more details, please refer to https://huggingface.co/google/vit-base-patch16-224-in21k .\n    processor = ViTImageProcessor(feature_extractor=\"google/vit-base-patch16-224-in21k\",\n                                  return_tensors='pt')\n    \n    model = ViTForImageClassification.from_pretrained(\"google/vit-base-patch16-224-in21k\")\n\n    # Load image and convert into the feature tensors using the pre-trained processor. \n    image = Image.open(user_uploaded_image_file_path)\n    \n    encoding = processor(images=image, return_tensors=\"pt\", padding=True)\n    \n    # Predict labels for the image uploaded by user.\n    outputs = model(**encoding['pixel_values']) \n\n    # Print out the predicted label and confidence score in percentage.\n    logits = outputs.logits\n    predicted_class_idx = logits.argmax(-1).item()\n    predicted_class_probability = logits.softmax(-1)[0, predicted_class_idx] * 100\n    print('Predicted class:', model.config.id2label[predicted_class_idx])\n    print(f'Probability: {predicted_class_probability:.2f}%')\n    \n# main --------------------\n\nif __name__ == '__main__':\n    # Download sample image from the internet for testing purpose.\n    response = requests.get('https://raw.githubusercontent.com/prasadp51/vit-pytorch/master/images/sample_image.png') \n    file_path = 'tempfile'\n    open(f'{file_path}.jpg', 'wb').write(response.content)\n    \n    # Call function for predicting the computer part in sample image.  \n    classify_computer_parts(user_upload"}