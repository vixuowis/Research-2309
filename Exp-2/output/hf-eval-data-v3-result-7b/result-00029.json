{"path": "output/hf-eval-data-v3-valid/f00135_get_game_day.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef get_game_day(context: str, question: str) -> str:\n    \"\"\"\n    This function uses the Hugging Face Transformers pipeline for question answering to extract the day of the game from the given context.\n\n    Args:\n        context (str): The context in which the game was played.\n        question (str): The question to be answered.\n\n    Returns:\n        str: The day on which the game was played.\n    \"\"\"\n    qa_pipeline = pipeline('question-answering', model='csarron/bert-base-uncased-squad-v1', tokenizer='csarron/bert-base-uncased-squad-v1')\n    predictions = qa_pipeline({'context': context, 'question': question})\n    return predictions['answer']\n\n# test_function_code --------------------\n\ndef test_get_game_day():\n    assert get_game_day(\"The game was played on February 7, 2016 at Levi's Stadium in the San Francisco Bay Area at Santa Clara, California.\", \"What day was the game played on?\") == 'February 7, 2016'\n    assert get_game_day(\"The match took place on March 3, 2020 at the National Stadium.\", \"When was the match?\") == 'March 3, 2020'\n    assert get_game_day(\"The event occurred on December 25, 2019 at the Madison Square Garden.\", \"When did the event occur?\") == 'December 25, 2019'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_get_game_day()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef get_game_day(context: str, question: str) -> str:\n    \"\"\"\n    This function uses the Hugging Face Transformers pipeline for question answering to extract the day of the game from the given context.\n\n    Args:\n        context (str): The context in which the game was played.\n        question (str): The question to be answered.\n\n    Returns:\n        str: The day on which the game was played.\n    \"\"\"\n    qa_pipeline = pipeline('question-answering', model='csarron/bert-base-uncased-squad-v1', tokenizer='csarron/bert-base-uncased-squad-v1')\n    predictions = qa_pipeline({'context': context, 'question': question})\n    return predictions['answer']\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_get_game_day():\n    assert get_game_day(\"The game was played on February 7, 2016 at Levi's Stadium in the San Francisco Bay Area at Santa Clara, California.\", \"What day was the game played on?\") == 'February 7, 2016'\n    assert get_game_day(\"The match took place on March 3, 2020 at the National Stadium.\", \"When was the match?\") == 'March 3, 2020'\n    assert get_game_day(\"The event occurred on December 25, 2019 at the Madison Square Garden.\", \"When did the event occur?\") == 'December 25, 2019'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_get_game_day()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef get_game_day(context: str, question: str) -> str:\n    \"\"\"\n    This function uses the Hugging Face Transformers pipeline for question answering to extract the day of the game from the given context.\n\n    Args:\n        context (str): The context in which the game was played.\n        question (str): The question to be answered.\n\n    Returns:\n        str: The day on which the game was played.\n    \"\"\"", "answer": "\n    qa_pipeline = pipeline('question-answering', model='csarron/bert-base-uncased-squad-v1', tokenizer='csarron/bert-base-uncased-squad-v1')\n    predictions = qa_pipeline({'context': context, 'question': question})\n    return predictions['answer']\n\n", "prediction": "\n    \n    # Initialize pipeline\n    pipeline()\n\n    answerer = pipeline(\"question-answering\")\n    result = answerer(context=context, \n                      question=question)\n    \n    # Extract the answer\n    return result[\"answer\"]"}