{"path": "output/hf-eval-data-v3-valid/f00875_classify_article.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef classify_article(sequence_to_classify: str, candidate_labels: list) -> dict:\n    \"\"\"\n    Classify a given sequence into one of the candidate categories using a zero-shot classification model.\n\n    Args:\n        sequence_to_classify (str): The sequence to be classified.\n        candidate_labels (list): The list of candidate categories.\n\n    Returns:\n        dict: The classification output which includes the label scores.\n    \"\"\"\n    zero_shot_classifier = pipeline('zero-shot-classification', model='MoritzLaurer/mDeBERTa-v3-base-xnli-multilingual-nli-2mil7')\n    classification_output = zero_shot_classifier(sequence_to_classify, candidate_labels, multi_label=False)\n    return classification_output\n\n# test_function_code --------------------\n\ndef test_classify_article():\n    \"\"\"Test the classify_article function.\"\"\"\n    sequence_to_classify = 'Angela Merkel ist eine Politikerin in Deutschland und Vorsitzende der CDU'\n    candidate_labels = ['politics', 'economy', 'entertainment', 'environment']\n    classification_output = classify_article(sequence_to_classify, candidate_labels)\n    assert isinstance(classification_output, dict)\n    assert 'scores' in classification_output\n    assert 'labels' in classification_output\n    assert len(classification_output['scores']) == len(candidate_labels)\n    assert len(classification_output['labels']) == len(candidate_labels)\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_classify_article()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef classify_article(sequence_to_classify: str, candidate_labels: list) -> dict:\n    \"\"\"\n    Classify a given sequence into one of the candidate categories using a zero-shot classification model.\n\n    Args:\n        sequence_to_classify (str): The sequence to be classified.\n        candidate_labels (list): The list of candidate categories.\n\n    Returns:\n        dict: The classification output which includes the label scores.\n    \"\"\"\n    zero_shot_classifier = pipeline('zero-shot-classification', model='MoritzLaurer/mDeBERTa-v3-base-xnli-multilingual-nli-2mil7')\n    classification_output = zero_shot_classifier(sequence_to_classify, candidate_labels, multi_label=False)\n    return classification_output\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_classify_article():\n    \"\"\"Test the classify_article function.\"\"\"\n    sequence_to_classify = 'Angela Merkel ist eine Politikerin in Deutschland und Vorsitzende der CDU'\n    candidate_labels = ['politics', 'economy', 'entertainment', 'environment']\n    classification_output = classify_article(sequence_to_classify, candidate_labels)\n    assert isinstance(classification_output, dict)\n    assert 'scores' in classification_output\n    assert 'labels' in classification_output\n    assert len(classification_output['scores']) == len(candidate_labels)\n    assert len(classification_output['labels']) == len(candidate_labels)\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_classify_article()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef classify_article(sequence_to_classify: str, candidate_labels: list) -> dict:\n    \"\"\"\n    Classify a given sequence into one of the candidate categories using a zero-shot classification model.\n\n    Args:\n        sequence_to_classify (str): The sequence to be classified.\n        candidate_labels (list): The list of candidate categories.\n\n    Returns:\n        dict: The classification output which includes the label scores.\n    \"\"\"", "answer": "\n    zero_shot_classifier = pipeline('zero-shot-classification', model='MoritzLaurer/mDeBERTa-v3-base-xnli-multilingual-nli-2mil7')\n    classification_output = zero_shot_classifier(sequence_to_classify, candidate_labels, multi_label=False)\n    return classification_output\n\n", "prediction": "\n    \n    # Instantiate model\n    cls_pipeline = pipeline('zero-shot-classification', return_all_scores=True)\n    \n    # Classify\n    classification_output = cls_pipeline(sequence_to_classify, candidate_labels)\n        \n    return classification_output\n"}