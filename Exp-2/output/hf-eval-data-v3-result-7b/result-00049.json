{"path": "output/hf-eval-data-v3-valid/f00199_generate_cat_image.py", "content": "# function_import --------------------\n\nimport os\nfrom diffusers import DDPMPipeline\n\n# function_code --------------------\n\ndef generate_cat_image(model_id: str = 'google/ddpm-ema-cat-256') -> None:\n    \"\"\"\n    Generate a cat image using a pre-trained model from Hugging Face Transformers.\n\n    Args:\n        model_id (str): The ID of the pre-trained model. Default is 'google/ddpm-ema-cat-256'.\n\n    Returns:\n        None. The function saves the generated image to the current directory.\n\n    Raises:\n        ModuleNotFoundError: If the diffusers package is not installed.\n    \"\"\"\n    ddpm = DDPMPipeline.from_pretrained(model_id)\n    generated_image = ddpm().images[0]\n    generated_image.save('ddpm_generated_cat_image.png')\n\n# test_function_code --------------------\n\ndef test_generate_cat_image():\n    \"\"\"\n    Test the generate_cat_image function.\n\n    Returns:\n        str: 'All Tests Passed' if all assertions pass.\n    \"\"\"\n    generate_cat_image()\n    assert os.path.exists('ddpm_generated_cat_image.png'), 'Image not generated'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\nprint(test_generate_cat_image())", "function_import": "# function_import --------------------\n\nimport os\nfrom diffusers import DDPMPipeline\n\n", "function_code": "# function_code --------------------\n\ndef generate_cat_image(model_id: str = 'google/ddpm-ema-cat-256') -> None:\n    \"\"\"\n    Generate a cat image using a pre-trained model from Hugging Face Transformers.\n\n    Args:\n        model_id (str): The ID of the pre-trained model. Default is 'google/ddpm-ema-cat-256'.\n\n    Returns:\n        None. The function saves the generated image to the current directory.\n\n    Raises:\n        ModuleNotFoundError: If the diffusers package is not installed.\n    \"\"\"\n    ddpm = DDPMPipeline.from_pretrained(model_id)\n    generated_image = ddpm().images[0]\n    generated_image.save('ddpm_generated_cat_image.png')\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_cat_image():\n    \"\"\"\n    Test the generate_cat_image function.\n\n    Returns:\n        str: 'All Tests Passed' if all assertions pass.\n    \"\"\"\n    generate_cat_image()\n    assert os.path.exists('ddpm_generated_cat_image.png'), 'Image not generated'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\nprint(test_generate_cat_image())", "instruct": "# function_import --------------------\n\nimport os\nfrom diffusers import DDPMPipeline\n\n# function_code --------------------\n\ndef generate_cat_image(model_id: str = 'google/ddpm-ema-cat-256') -> None:\n    \"\"\"\n    Generate a cat image using a pre-trained model from Hugging Face Transformers.\n\n    Args:\n        model_id (str): The ID of the pre-trained model. Default is 'google/ddpm-ema-cat-256'.\n\n    Returns:\n        None. The function saves the generated image to the current directory.\n\n    Raises:\n        ModuleNotFoundError: If the diffusers package is not installed.\n    \"\"\"", "answer": "\n    ddpm = DDPMPipeline.from_pretrained(model_id)\n    generated_image = ddpm().images[0]\n    generated_image.save('ddpm_generated_cat_image.png')\n\n", "prediction": "\n    if not os.path.exists('./diffusers'):\n        raise ModuleNotFoundError(\"You must install 'diffuser' before you can call this function\")\n    \n    # Load a pre-trained model from Hugging Face Transformers\n    # This example uses the EMA (Exponential Moving Average) model trained with 10M steps.\n    diffuser = DDPMPipeline.from_pretrained(model_id).to('cuda')\n    \n    # Generate an image\n    img = diffuser.generate()[0]\n    img = (img + 1) / 2\n\n    # Save the generated image to the current directory\n    filename = os.path.join(os.getcwd(), \"generated_cat_image.png\")\n    pil_img = Image.fromarray((img * 255).astype(np.uint8))\n    pil_img.save('generated_cat_image.png')"}