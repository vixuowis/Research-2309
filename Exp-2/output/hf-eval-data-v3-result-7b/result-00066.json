{"path": "output/hf-eval-data-v3-valid/f00249_predict_house_prices.py", "content": "# function_import --------------------\n\nimport joblib\nimport pandas as pd\nimport json\n\n# function_code --------------------\n\ndef predict_house_prices(data_file: str, model_file: str = 'model.joblib', config_file: str = 'config.json') -> pd.DataFrame:\n    \"\"\"\n    Predicts house prices based on the given data file using a pre-trained model.\n\n    Args:\n        data_file (str): The path to the data file in CSV format.\n        model_file (str, optional): The path to the pre-trained model file. Defaults to 'model.joblib'.\n        config_file (str, optional): The path to the configuration file. Defaults to 'config.json'.\n\n    Returns:\n        pd.DataFrame: The predicted house prices.\n\n    Raises:\n        FileNotFoundError: If the model file or the data file does not exist.\n    \"\"\"\n    model = joblib.load(model_file)\n    config = json.load(open(config_file))\n    features = config['features']\n\n    data = pd.read_csv(data_file)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n\n    predictions = model.predict(data)\n    return predictions\n\n# test_function_code --------------------\n\ndef test_predict_house_prices():\n    \"\"\"Tests the predict_house_prices function.\"\"\"\n    test_data_file = 'test_data.csv'\n    test_model_file = 'test_model.joblib'\n    test_config_file = 'test_config.json'\n\n    try:\n        predictions = predict_house_prices(test_data_file, test_model_file, test_config_file)\n        assert isinstance(predictions, pd.DataFrame), 'The result is not a DataFrame.'\n    except FileNotFoundError:\n        print('Test files not found.')\n    except Exception as e:\n        print(f'An error occurred: {e}')\n    else:\n        print('All tests passed.')\n\n# call_test_function_code --------------------\n\ntest_predict_house_prices()", "function_import": "# function_import --------------------\n\nimport joblib\nimport pandas as pd\nimport json\n\n", "function_code": "# function_code --------------------\n\ndef predict_house_prices(data_file: str, model_file: str = 'model.joblib', config_file: str = 'config.json') -> pd.DataFrame:\n    \"\"\"\n    Predicts house prices based on the given data file using a pre-trained model.\n\n    Args:\n        data_file (str): The path to the data file in CSV format.\n        model_file (str, optional): The path to the pre-trained model file. Defaults to 'model.joblib'.\n        config_file (str, optional): The path to the configuration file. Defaults to 'config.json'.\n\n    Returns:\n        pd.DataFrame: The predicted house prices.\n\n    Raises:\n        FileNotFoundError: If the model file or the data file does not exist.\n    \"\"\"\n    model = joblib.load(model_file)\n    config = json.load(open(config_file))\n    features = config['features']\n\n    data = pd.read_csv(data_file)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n\n    predictions = model.predict(data)\n    return predictions\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_predict_house_prices():\n    \"\"\"Tests the predict_house_prices function.\"\"\"\n    test_data_file = 'test_data.csv'\n    test_model_file = 'test_model.joblib'\n    test_config_file = 'test_config.json'\n\n    try:\n        predictions = predict_house_prices(test_data_file, test_model_file, test_config_file)\n        assert isinstance(predictions, pd.DataFrame), 'The result is not a DataFrame.'\n    except FileNotFoundError:\n        print('Test files not found.')\n    except Exception as e:\n        print(f'An error occurred: {e}')\n    else:\n        print('All tests passed.')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_predict_house_prices()", "instruct": "# function_import --------------------\n\nimport joblib\nimport pandas as pd\nimport json\n\n# function_code --------------------\n\ndef predict_house_prices(data_file: str, model_file: str = 'model.joblib', config_file: str = 'config.json') -> pd.DataFrame:\n    \"\"\"\n    Predicts house prices based on the given data file using a pre-trained model.\n\n    Args:\n        data_file (str): The path to the data file in CSV format.\n        model_file (str, optional): The path to the pre-trained model file. Defaults to 'model.joblib'.\n        config_file (str, optional): The path to the configuration file. Defaults to 'config.json'.\n\n    Returns:\n        pd.DataFrame: The predicted house prices.\n\n    Raises:\n        FileNotFoundError: If the model file or the data file does not exist.\n    \"\"\"", "answer": "\n    model = joblib.load(model_file)\n    config = json.load(open(config_file))\n    features = config['features']\n\n    data = pd.read_csv(data_file)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n\n    predictions = model.predict(data)\n    return predictions\n\n", "prediction": "\n    \n    # Read config\n    with open(config_file) as fp:\n        config = json.load(fp)['feature-engineering']\n        \n        # Read in preprocessor\n        preprocess_pipeline = joblib.load(config['preprocessing']['model']) \n    \n    try:\n        # Read in data\n        X = pd.read_csv(data_file, sep=',')\n        y = None\n        \n        # Feature Engineering\n        if config['feature-engineering']['target'] is not None:\n            X = pd.concat([X.drop(columns=[config['feature-engineering']['target']]), \n                           pd.get_dummies(data=pd.read_csv(config['feature-engineering']['data'], sep=';').set_index('id'),\n                           columns=config['feature-engineering']['categorical-columns'])], axis=1)\n            \n            # Read in target\n            y = pd.read_csv(config['feature-engineering']['target'], header=None, names=[config['feature-engineering']['target']])[config['feature-engineering']['target']]\n        \n        else:\n            X = pd.concat([X, \n                           pd.get_dummies(data=pd.read_csv(config['feature-engineering']['data'], sep=';').set_index('id'),\n                           columns=config['feature-engineering']['categorical-columns'])], axis=1)\n        \n        # Preprocess data\n        X = preprocess_pipeline.transform(X)\n        if y is not None:\n            return pd.DataFrame({'predicted': joblib.load(model_file).predict(X), 'target': y})\n        \n        else:\n            return pd.DataFrame({'predicted': joblib.load(model_file).predict(X)})\n    \n    except FileNotFoundError as fnfe:\n        raise FileNotFoundError(\"The data file or model file does not exist.\")"}