{"path": "output/hf-eval-data-v3-valid/f00489_analyze_stock_forum_sentiment.py", "content": "# function_import --------------------\n\nfrom transformers import RobertaForSequenceClassification, RobertaTokenizer, pipeline\nimport pandas as pd\n\n# function_code --------------------\n\ndef analyze_stock_forum_sentiment(forum_posts):\n    \"\"\"\n    Analyze the sentiment of a stock forum using a pre-trained model.\n\n    Args:\n        forum_posts (pd.Series): A pandas Series of forum posts.\n\n    Returns:\n        list: A list of sentiment analysis results for each post.\n    \"\"\"\n    tokenizer_loaded = RobertaTokenizer.from_pretrained('zhayunduo/roberta-base-stocktwits-finetuned')\n    model_loaded = RobertaForSequenceClassification.from_pretrained('zhayunduo/roberta-base-stocktwits-finetuned')\n    nlp = pipeline('text-classification', model=model_loaded, tokenizer=tokenizer_loaded)\n    results = nlp(list(forum_posts))\n    return results\n\n# test_function_code --------------------\n\ndef test_analyze_stock_forum_sentiment():\n    \"\"\"\n    Test the analyze_stock_forum_sentiment function.\n    \"\"\"\n    forum_posts = pd.Series([\"Stock X is going up!\", \"I'm selling my shares.\", \"Buy now before it's too late!\"])\n    results = analyze_stock_forum_sentiment(forum_posts)\n    assert isinstance(results, list), 'The result should be a list.'\n    assert len(results) == len(forum_posts), 'The length of the result should be equal to the length of the input.'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_analyze_stock_forum_sentiment()", "function_import": "# function_import --------------------\n\nfrom transformers import RobertaForSequenceClassification, RobertaTokenizer, pipeline\nimport pandas as pd\n\n", "function_code": "# function_code --------------------\n\ndef analyze_stock_forum_sentiment(forum_posts):\n    \"\"\"\n    Analyze the sentiment of a stock forum using a pre-trained model.\n\n    Args:\n        forum_posts (pd.Series): A pandas Series of forum posts.\n\n    Returns:\n        list: A list of sentiment analysis results for each post.\n    \"\"\"\n    tokenizer_loaded = RobertaTokenizer.from_pretrained('zhayunduo/roberta-base-stocktwits-finetuned')\n    model_loaded = RobertaForSequenceClassification.from_pretrained('zhayunduo/roberta-base-stocktwits-finetuned')\n    nlp = pipeline('text-classification', model=model_loaded, tokenizer=tokenizer_loaded)\n    results = nlp(list(forum_posts))\n    return results\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_analyze_stock_forum_sentiment():\n    \"\"\"\n    Test the analyze_stock_forum_sentiment function.\n    \"\"\"\n    forum_posts = pd.Series([\"Stock X is going up!\", \"I'm selling my shares.\", \"Buy now before it's too late!\"])\n    results = analyze_stock_forum_sentiment(forum_posts)\n    assert isinstance(results, list), 'The result should be a list.'\n    assert len(results) == len(forum_posts), 'The length of the result should be equal to the length of the input.'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_analyze_stock_forum_sentiment()", "instruct": "# function_import --------------------\n\nfrom transformers import RobertaForSequenceClassification, RobertaTokenizer, pipeline\nimport pandas as pd\n\n# function_code --------------------\n\ndef analyze_stock_forum_sentiment(forum_posts):\n    \"\"\"\n    Analyze the sentiment of a stock forum using a pre-trained model.\n\n    Args:\n        forum_posts (pd.Series): A pandas Series of forum posts.\n\n    Returns:\n        list: A list of sentiment analysis results for each post.\n    \"\"\"", "answer": "\n    tokenizer_loaded = RobertaTokenizer.from_pretrained('zhayunduo/roberta-base-stocktwits-finetuned')\n    model_loaded = RobertaForSequenceClassification.from_pretrained('zhayunduo/roberta-base-stocktwits-finetuned')\n    nlp = pipeline('text-classification', model=model_loaded, tokenizer=tokenizer_loaded)\n    results = nlp(list(forum_posts))\n    return results\n\n", "prediction": "\n\n    # Initialize tokenizer and classifier.\n    tokenizer = RobertaTokenizer.from_pretrained('roberta-base')\n    model = RobertaForSequenceClassification.from_pretrained('./sentiment/', return_dict=True)\n\n    # Pre-process text for classification.\n    classifier = pipeline('sentiment-analysis')\n    forum_posts = [classifier(x, truncation=True)[0]['label'] for x in forum_posts]\n\n    results = []\n    for i in range(len(forum_posts)):\n        # Tokenize the text and prepare it as a tensor.\n        input_ids = tokenizer.encode(forum_posts[i], return_tensors=\"pt\") \n        \n        # Get the model prediction.\n        result = model(input_ids)[0]\n\n        if 'negative' in str(result):\n            results.append('negative')\n        else:\n            results.append('positive')\n            \n    return results"}