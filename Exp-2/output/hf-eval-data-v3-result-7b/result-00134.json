{"path": "output/hf-eval-data-v3-valid/f00566_image_segmentation.py", "content": "# function_import --------------------\n\nfrom transformers import MaskFormerFeatureExtractor, MaskFormerForInstanceSegmentation\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef image_segmentation(image_url):\n    '''\n    Recognize the objects in a given image and draw a boundary around them using MaskFormer model.\n    \n    Args:\n        image_url (str): The url of the image to be processed.\n    \n    Returns:\n        dict: A dictionary containing the predicted panoptic map with recognized objects and their boundaries.\n    '''\n    feature_extractor = MaskFormerFeatureExtractor.from_pretrained('facebook/maskformer-swin-tiny-coco')\n    model = MaskFormerForInstanceSegmentation.from_pretrained('facebook/maskformer-swin-tiny-coco')\n    image = Image.open(requests.get(image_url, stream=True).raw)\n    inputs = feature_extractor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    result = feature_extractor.post_process_panoptic_segmentation(outputs, target_sizes=[image.size[::-1]])[0]\n    return result\n\n# test_function_code --------------------\n\ndef test_image_segmentation():\n    '''\n    Test the image_segmentation function with different test cases.\n    '''\n    test_image_url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    result = image_segmentation(test_image_url)\n    assert 'segmentation' in result, 'Test Case 1 Failed'\n    \n    test_image_url = 'https://placekitten.com/200/300'\n    result = image_segmentation(test_image_url)\n    assert 'segmentation' in result, 'Test Case 2 Failed'\n    \n    print('All Tests Passed')\n\n# call_test_function_code --------------------\n\ntest_image_segmentation()", "function_import": "# function_import --------------------\n\nfrom transformers import MaskFormerFeatureExtractor, MaskFormerForInstanceSegmentation\nfrom PIL import Image\nimport requests\n\n", "function_code": "# function_code --------------------\n\ndef image_segmentation(image_url):\n    '''\n    Recognize the objects in a given image and draw a boundary around them using MaskFormer model.\n    \n    Args:\n        image_url (str): The url of the image to be processed.\n    \n    Returns:\n        dict: A dictionary containing the predicted panoptic map with recognized objects and their boundaries.\n    '''\n    feature_extractor = MaskFormerFeatureExtractor.from_pretrained('facebook/maskformer-swin-tiny-coco')\n    model = MaskFormerForInstanceSegmentation.from_pretrained('facebook/maskformer-swin-tiny-coco')\n    image = Image.open(requests.get(image_url, stream=True).raw)\n    inputs = feature_extractor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    result = feature_extractor.post_process_panoptic_segmentation(outputs, target_sizes=[image.size[::-1]])[0]\n    return result\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_image_segmentation():\n    '''\n    Test the image_segmentation function with different test cases.\n    '''\n    test_image_url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    result = image_segmentation(test_image_url)\n    assert 'segmentation' in result, 'Test Case 1 Failed'\n    \n    test_image_url = 'https://placekitten.com/200/300'\n    result = image_segmentation(test_image_url)\n    assert 'segmentation' in result, 'Test Case 2 Failed'\n    \n    print('All Tests Passed')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_image_segmentation()", "instruct": "# function_import --------------------\n\nfrom transformers import MaskFormerFeatureExtractor, MaskFormerForInstanceSegmentation\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef image_segmentation(image_url):\n    '''\n    Recognize the objects in a given image and draw a boundary around them using MaskFormer model.\n    \n    Args:\n        image_url (str): The url of the image to be processed.\n    \n    Returns:\n        dict: A dictionary containing the predicted panoptic map with recognized objects and their boundaries.\n    '''", "answer": "\n    feature_extractor = MaskFormerFeatureExtractor.from_pretrained('facebook/maskformer-swin-tiny-coco')\n    model = MaskFormerForInstanceSegmentation.from_pretrained('facebook/maskformer-swin-tiny-coco')\n    image = Image.open(requests.get(image_url, stream=True).raw)\n    inputs = feature_extractor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    result = feature_extractor.post_process_panoptic_segmentation(outputs, target_sizes=[image.size[::-1]])[0]\n    return result\n\n", "prediction": "\n    \n    try:\n        \n        # load the MaskFormer model\n        feature_extractor = MaskFormerFeatureExtractor.from_pretrained(\"facebook/maskformer-swin-base-ade\")\n        model = MaskFormerForInstanceSegmentation.from_pretrained(\"facebook/maskformer-swin-base-ade\")\n        \n        # download image from the given url\n        res = requests.get(image_url)  \n        img = Image.open(BytesIO(res.content)) \n         \n        # get the segmentation map and draw bounding boxes around recognized objects using MaskFormer model\n        segmentator = FeatureExtractorSegmentator(feature_extractor, model)\n        \n        panoptic_seg = segmentator.segment(img)    \n        output_dict = {}\n        output_dict['segmap'] = panoptic_seg['panoptic_seg']\n        \n    except Exception as e:\n                \n        print('Failed to generate the segmentation map for ', image_url, ' due to an internal error.')  \n        return None\n    \n    finally:\n        del feature_extractor, model, img, segmentator\n            \n    return output_dict\n"}