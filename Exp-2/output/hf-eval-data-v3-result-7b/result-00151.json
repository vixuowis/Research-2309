{"path": "output/hf-eval-data-v3-valid/f00612_generate_audio_announcement.py", "content": "# function_import --------------------\n\nfrom transformers import SpeechT5Processor, SpeechT5ForTextToSpeech, SpeechT5HifiGan\nfrom datasets import load_dataset\nimport torch\nimport soundfile as sf\n\n# function_code --------------------\n\ndef generate_audio_announcement(text):\n    '''\n    Generate an audio announcement from a given text using the SpeechT5 model.\n    \n    Args:\n        text (str): The text to be converted to speech.\n    \n    Returns:\n        None. The function writes the output audio to a .wav file.\n    \n    Raises:\n        Exception: If there is an error in generating the audio.\n    '''\n    processor = SpeechT5Processor.from_pretrained('microsoft/speecht5_tts')\n    model = SpeechT5ForTextToSpeech.from_pretrained('microsoft/speecht5_tts')\n    vocoder = SpeechT5HifiGan.from_pretrained('microsoft/speecht5_hifigan')\n    inputs = processor(text=text, return_tensors='pt')\n    embeddings_dataset = load_dataset('Matthijs/cmu-arctic-xvectors', split='validation')\n    speaker_embeddings = torch.tensor(embeddings_dataset[7306]['xvector']).unsqueeze(0)\n    speech = model.generate_speech(inputs['input_ids'], speaker_embeddings, vocoder=vocoder)\n    sf.write('speech.wav', speech.numpy(), samplerate=16000)\n\n# test_function_code --------------------\n\ndef test_generate_audio_announcement():\n    '''\n    Test the generate_audio_announcement function.\n    '''\n    try:\n        generate_audio_announcement('This is a test announcement.')\n        print('Test passed.')\n    except Exception as e:\n        print('Test failed. Error: ', e)\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_generate_audio_announcement()", "function_import": "# function_import --------------------\n\nfrom transformers import SpeechT5Processor, SpeechT5ForTextToSpeech, SpeechT5HifiGan\nfrom datasets import load_dataset\nimport torch\nimport soundfile as sf\n\n", "function_code": "# function_code --------------------\n\ndef generate_audio_announcement(text):\n    '''\n    Generate an audio announcement from a given text using the SpeechT5 model.\n    \n    Args:\n        text (str): The text to be converted to speech.\n    \n    Returns:\n        None. The function writes the output audio to a .wav file.\n    \n    Raises:\n        Exception: If there is an error in generating the audio.\n    '''\n    processor = SpeechT5Processor.from_pretrained('microsoft/speecht5_tts')\n    model = SpeechT5ForTextToSpeech.from_pretrained('microsoft/speecht5_tts')\n    vocoder = SpeechT5HifiGan.from_pretrained('microsoft/speecht5_hifigan')\n    inputs = processor(text=text, return_tensors='pt')\n    embeddings_dataset = load_dataset('Matthijs/cmu-arctic-xvectors', split='validation')\n    speaker_embeddings = torch.tensor(embeddings_dataset[7306]['xvector']).unsqueeze(0)\n    speech = model.generate_speech(inputs['input_ids'], speaker_embeddings, vocoder=vocoder)\n    sf.write('speech.wav', speech.numpy(), samplerate=16000)\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_audio_announcement():\n    '''\n    Test the generate_audio_announcement function.\n    '''\n    try:\n        generate_audio_announcement('This is a test announcement.')\n        print('Test passed.')\n    except Exception as e:\n        print('Test failed. Error: ', e)\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_generate_audio_announcement()", "instruct": "# function_import --------------------\n\nfrom transformers import SpeechT5Processor, SpeechT5ForTextToSpeech, SpeechT5HifiGan\nfrom datasets import load_dataset\nimport torch\nimport soundfile as sf\n\n# function_code --------------------\n\ndef generate_audio_announcement(text):\n    '''\n    Generate an audio announcement from a given text using the SpeechT5 model.\n    \n    Args:\n        text (str): The text to be converted to speech.\n    \n    Returns:\n        None. The function writes the output audio to a .wav file.\n    \n    Raises:\n        Exception: If there is an error in generating the audio.\n    '''", "answer": "\n    processor = SpeechT5Processor.from_pretrained('microsoft/speecht5_tts')\n    model = SpeechT5ForTextToSpeech.from_pretrained('microsoft/speecht5_tts')\n    vocoder = SpeechT5HifiGan.from_pretrained('microsoft/speecht5_hifigan')\n    inputs = processor(text=text, return_tensors='pt')\n    embeddings_dataset = load_dataset('Matthijs/cmu-arctic-xvectors', split='validation')\n    speaker_embeddings = torch.tensor(embeddings_dataset[7306]['xvector']).unsqueeze(0)\n    speech = model.generate_speech(inputs['input_ids'], speaker_embeddings, vocoder=vocoder)\n    sf.write('speech.wav', speech.numpy(), samplerate=16000)\n\n", "prediction": "\n    try:\n        \n        # Create the SpeechT5Processor and model.\n        processor = SpeechT5Processor.from_pretrained(\"facebook/speech-t5-small\")\n        model = SpeechT5ForTextToSpeech.from_pretrained(\n            \"facebook/speech-t5-small\", \n            device=torch.device('cuda:0') if torch.cuda.is_available() else torch.device('cpu'),\n        )\n        \n        # Load and preprocess the text input using SpeechT5Processor\n        inputs = processor(text, return_tensors=\"pt\", padding=\"longest\")\n    \n        # Generate audio from the text input using SpeechT5ForTextToSpeech model.\n        audio_tensor = model(**inputs).audio \n        \n        # Save the audio as .wav file.\n        sf.write('announcement.wav', audio_tensor[0].numpy(), processor.feature_extractor._sample_rate)\n        \n    except Exception as e:\n        print(e)\n\n# main_code --------------------\n\n# Load a test dataset to generate an announcement using the SpeechT5 model.\ntest_dataset = load_dataset(\"common_voice\", \"en\")[\"train\"][0]\nprint(\"\\nOriginal text:\\t\", test_dataset['sentence'])  # Print original text.\n\ntext = ''.join(e if e.isalnum() else ' ' for e in test_dataset['sentence'])  # Preprocess text by removing punctuation and special characters\n# Remove leading/trailing spaces from the preprocessed text, and convert to lowercase.\ntext = text.strip().lower()\nprint(\"\\nPreprocessed text:\\t\", text)  # Print preprocessed text.\n    \ngenerate_audio_announcement(text)  # Generate audio announcement using preprocessed text."}