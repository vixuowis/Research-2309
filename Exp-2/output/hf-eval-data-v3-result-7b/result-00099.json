{"path": "output/hf-eval-data-v3-valid/f00433_identify_speaker.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef identify_speaker(audio_file_path: str) -> dict:\n    \"\"\"\n    Identify the speaker in an audio file using Hugging Face's pre-trained model.\n\n    Args:\n        audio_file_path (str): The path to the audio file.\n\n    Returns:\n        dict: The top 5 predicted speakers and their probabilities.\n\n    Raises:\n        FileNotFoundError: If the audio file does not exist.\n    \"\"\"\n    sid_classifier = pipeline('audio-classification', model='superb/wav2vec2-base-superb-sid')\n    speaker_identification = sid_classifier(audio_file_path, top_k=5)\n    return speaker_identification\n\n# test_function_code --------------------\n\ndef test_identify_speaker():\n    \"\"\"\n    Test the identify_speaker function.\n    \"\"\"\n    test_audio_file_path = 'test_audio.wav'\n    try:\n        speaker_identification = identify_speaker(test_audio_file_path)\n        assert isinstance(speaker_identification, dict)\n        assert len(speaker_identification) == 5\n    except FileNotFoundError:\n        print('Test audio file not found.')\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_identify_speaker()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef identify_speaker(audio_file_path: str) -> dict:\n    \"\"\"\n    Identify the speaker in an audio file using Hugging Face's pre-trained model.\n\n    Args:\n        audio_file_path (str): The path to the audio file.\n\n    Returns:\n        dict: The top 5 predicted speakers and their probabilities.\n\n    Raises:\n        FileNotFoundError: If the audio file does not exist.\n    \"\"\"\n    sid_classifier = pipeline('audio-classification', model='superb/wav2vec2-base-superb-sid')\n    speaker_identification = sid_classifier(audio_file_path, top_k=5)\n    return speaker_identification\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_identify_speaker():\n    \"\"\"\n    Test the identify_speaker function.\n    \"\"\"\n    test_audio_file_path = 'test_audio.wav'\n    try:\n        speaker_identification = identify_speaker(test_audio_file_path)\n        assert isinstance(speaker_identification, dict)\n        assert len(speaker_identification) == 5\n    except FileNotFoundError:\n        print('Test audio file not found.')\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_identify_speaker()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef identify_speaker(audio_file_path: str) -> dict:\n    \"\"\"\n    Identify the speaker in an audio file using Hugging Face's pre-trained model.\n\n    Args:\n        audio_file_path (str): The path to the audio file.\n\n    Returns:\n        dict: The top 5 predicted speakers and their probabilities.\n\n    Raises:\n        FileNotFoundError: If the audio file does not exist.\n    \"\"\"", "answer": "\n    sid_classifier = pipeline('audio-classification', model='superb/wav2vec2-base-superb-sid')\n    speaker_identification = sid_classifier(audio_file_path, top_k=5)\n    return speaker_identification\n\n", "prediction": "\n    \n    # Check if audio_file_path exists\n    assert os.path.exists(audio_file_path), f\"Audio file {audio_file_path} doesn't exist.\" \n\n    speaker_recognition = pipeline(\"speaker-identification\")\n    result = speaker_recognition(audio_file_path)\n    \n    return dict(result[0])"}