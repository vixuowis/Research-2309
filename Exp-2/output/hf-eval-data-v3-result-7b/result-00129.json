{"path": "output/hf-eval-data-v3-valid/f00548_generate_image_from_text.py", "content": "# function_import --------------------\n\nimport torch\nfrom diffusers import StableDiffusionPipeline\nimport os\n\n# function_code --------------------\n\ndef generate_image_from_text(prompt: str, model_id: str = 'CompVis/stable-diffusion-v1-4', save_path: str = 'generated_image.png'):\n    \"\"\"\n    Generate an image from a text description using the StableDiffusionPipeline from Hugging Face.\n\n    Args:\n        prompt (str): The text description of the image to generate.\n        model_id (str, optional): The model id of the pretrained model to use. Defaults to 'CompVis/stable-diffusion-v1-4'.\n        save_path (str, optional): The path to save the generated image. Defaults to 'generated_image.png'.\n\n    Returns:\n        None\n    \"\"\"\n    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe = pipe.to(device)\n    image = pipe(prompt).images[0]\n    image.save(save_path)\n\n# test_function_code --------------------\n\ndef test_generate_image_from_text():\n    \"\"\"\n    Test the function generate_image_from_text.\n    \"\"\"\n    generate_image_from_text('a serene lake at sunset', save_path='serene_lake_sunset.png')\n    assert os.path.exists('serene_lake_sunset.png'), 'Image not generated!'\n    os.remove('serene_lake_sunset.png')\n    generate_image_from_text('an astronaut riding a horse on mars', save_path='astronaut_rides_horse.png')\n    assert os.path.exists('astronaut_rides_horse.png'), 'Image not generated!'\n    os.remove('astronaut_rides_horse.png')\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_generate_image_from_text()", "function_import": "# function_import --------------------\n\nimport torch\nfrom diffusers import StableDiffusionPipeline\nimport os\n\n", "function_code": "# function_code --------------------\n\ndef generate_image_from_text(prompt: str, model_id: str = 'CompVis/stable-diffusion-v1-4', save_path: str = 'generated_image.png'):\n    \"\"\"\n    Generate an image from a text description using the StableDiffusionPipeline from Hugging Face.\n\n    Args:\n        prompt (str): The text description of the image to generate.\n        model_id (str, optional): The model id of the pretrained model to use. Defaults to 'CompVis/stable-diffusion-v1-4'.\n        save_path (str, optional): The path to save the generated image. Defaults to 'generated_image.png'.\n\n    Returns:\n        None\n    \"\"\"\n    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe = pipe.to(device)\n    image = pipe(prompt).images[0]\n    image.save(save_path)\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_image_from_text():\n    \"\"\"\n    Test the function generate_image_from_text.\n    \"\"\"\n    generate_image_from_text('a serene lake at sunset', save_path='serene_lake_sunset.png')\n    assert os.path.exists('serene_lake_sunset.png'), 'Image not generated!'\n    os.remove('serene_lake_sunset.png')\n    generate_image_from_text('an astronaut riding a horse on mars', save_path='astronaut_rides_horse.png')\n    assert os.path.exists('astronaut_rides_horse.png'), 'Image not generated!'\n    os.remove('astronaut_rides_horse.png')\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_generate_image_from_text()", "instruct": "# function_import --------------------\n\nimport torch\nfrom diffusers import StableDiffusionPipeline\nimport os\n\n# function_code --------------------\n\ndef generate_image_from_text(prompt: str, model_id: str = 'CompVis/stable-diffusion-v1-4', save_path: str = 'generated_image.png'):\n    \"\"\"\n    Generate an image from a text description using the StableDiffusionPipeline from Hugging Face.\n\n    Args:\n        prompt (str): The text description of the image to generate.\n        model_id (str, optional): The model id of the pretrained model to use. Defaults to 'CompVis/stable-diffusion-v1-4'.\n        save_path (str, optional): The path to save the generated image. Defaults to 'generated_image.png'.\n\n    Returns:\n        None\n    \"\"\"", "answer": "\n    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe = pipe.to(device)\n    image = pipe(prompt).images[0]\n    image.save(save_path)\n\n", "prediction": "\n    \n    # Instantiate a StableDiffusionPipeline with the model id.\n    pipe = StableDiffusionPipeline(model_id)\n    \n    # Generate an image.\n    img, = pipe.generate([prompt]) \n    \n    # Save the image to disk at save_path.\n    if os.path.exists(save_path):\n        print('Warning: {} already exists!'.format(save_path))\n    else: \n        torchvision.transforms.functional.to_pil_image(img).save(save_path)"}