{"path": "output/hf-eval-data-v3-valid/f00469_segment_clothes.py", "content": "# function_import --------------------\n\nfrom transformers import AutoFeatureExtractor, SegformerForSemanticSegmentation\nfrom PIL import Image\nimport requests\nimport torch.nn as nn\nimport torch\n\n# function_code --------------------\n\ndef segment_clothes(image_url):\n    \"\"\"\n    This function takes an image URL, loads the image, preprocesses it, and uses a pretrained Segformer model\n    to segment the clothes in the image.\n\n    Args:\n        image_url (str): The URL of the image to be segmented.\n\n    Returns:\n        pred_seg (torch.Tensor): The segmented image.\n\n    Raises:\n        PIL.UnidentifiedImageError: If the image cannot be identified and opened.\n    \"\"\"\n    extractor = AutoFeatureExtractor.from_pretrained('mattmdjaga/segformer_b2_clothes')\n    model = SegformerForSemanticSegmentation.from_pretrained('mattmdjaga/segformer_b2_clothes')\n    image = Image.open(requests.get(image_url, stream=True).raw)\n    inputs = extractor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    logits = outputs.logits.cpu()\n    upsampled_logits = nn.functional.interpolate(logits, size=image.size[::-1], mode='bilinear', align_corners=False)\n    pred_seg = upsampled_logits.argmax(dim=1)[0]\n    return pred_seg\n\n# test_function_code --------------------\n\ndef test_segment_clothes():\n    \"\"\"\n    This function tests the segment_clothes function with a few test cases.\n    \"\"\"\n    test_image_url = 'https://placekitten.com/200/300'\n    try:\n        segmented_image = segment_clothes(test_image_url)\n        assert segmented_image is not None\n        assert isinstance(segmented_image, torch.Tensor)\n    except PIL.UnidentifiedImageError:\n        print('Test image could not be identified and opened.')\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_segment_clothes()", "function_import": "# function_import --------------------\n\nfrom transformers import AutoFeatureExtractor, SegformerForSemanticSegmentation\nfrom PIL import Image\nimport requests\nimport torch.nn as nn\nimport torch\n\n", "function_code": "# function_code --------------------\n\ndef segment_clothes(image_url):\n    \"\"\"\n    This function takes an image URL, loads the image, preprocesses it, and uses a pretrained Segformer model\n    to segment the clothes in the image.\n\n    Args:\n        image_url (str): The URL of the image to be segmented.\n\n    Returns:\n        pred_seg (torch.Tensor): The segmented image.\n\n    Raises:\n        PIL.UnidentifiedImageError: If the image cannot be identified and opened.\n    \"\"\"\n    extractor = AutoFeatureExtractor.from_pretrained('mattmdjaga/segformer_b2_clothes')\n    model = SegformerForSemanticSegmentation.from_pretrained('mattmdjaga/segformer_b2_clothes')\n    image = Image.open(requests.get(image_url, stream=True).raw)\n    inputs = extractor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    logits = outputs.logits.cpu()\n    upsampled_logits = nn.functional.interpolate(logits, size=image.size[::-1], mode='bilinear', align_corners=False)\n    pred_seg = upsampled_logits.argmax(dim=1)[0]\n    return pred_seg\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_segment_clothes():\n    \"\"\"\n    This function tests the segment_clothes function with a few test cases.\n    \"\"\"\n    test_image_url = 'https://placekitten.com/200/300'\n    try:\n        segmented_image = segment_clothes(test_image_url)\n        assert segmented_image is not None\n        assert isinstance(segmented_image, torch.Tensor)\n    except PIL.UnidentifiedImageError:\n        print('Test image could not be identified and opened.')\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_segment_clothes()", "instruct": "# function_import --------------------\n\nfrom transformers import AutoFeatureExtractor, SegformerForSemanticSegmentation\nfrom PIL import Image\nimport requests\nimport torch.nn as nn\nimport torch\n\n# function_code --------------------\n\ndef segment_clothes(image_url):\n    \"\"\"\n    This function takes an image URL, loads the image, preprocesses it, and uses a pretrained Segformer model\n    to segment the clothes in the image.\n\n    Args:\n        image_url (str): The URL of the image to be segmented.\n\n    Returns:\n        pred_seg (torch.Tensor): The segmented image.\n\n    Raises:\n        PIL.UnidentifiedImageError: If the image cannot be identified and opened.\n    \"\"\"", "answer": "\n    extractor = AutoFeatureExtractor.from_pretrained('mattmdjaga/segformer_b2_clothes')\n    model = SegformerForSemanticSegmentation.from_pretrained('mattmdjaga/segformer_b2_clothes')\n    image = Image.open(requests.get(image_url, stream=True).raw)\n    inputs = extractor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n    logits = outputs.logits.cpu()\n    upsampled_logits = nn.functional.interpolate(logits, size=image.size[::-1], mode='bilinear', align_corners=False)\n    pred_seg = upsampled_logits.argmax(dim=1)[0]\n    return pred_seg\n\n", "prediction": "    \n    # load model --------------------\n    feature_extractor = AutoFeatureExtractor.from_pretrained(\"nandang/segformer-bisenetv2-ade\")\n    model = SegformerForSemanticSegmentation.from_pretrained(\"nandang/segformer-bisenetv2-ade\").eval()    \n\n    # load image --------------------\n    response = requests.get(image_url)\n    img = Image.open(Image.io.BytesIO(response.content)).convert('RGB')\n\n    # preprocess image --------------\n    inputs = feature_extractor(images=img, return_tensors=\"pt\")\n    \n    # segment clothes ---------------\n    outputs = model({**inputs})[0][\"logits\"]    \n    pred_seg = torch.argmax(outputs, dim=1)[:3].unsqueeze(dim=-1)\n\n    return pred_seg"}