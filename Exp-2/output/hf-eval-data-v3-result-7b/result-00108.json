{"path": "output/hf-eval-data-v3-valid/f00468_segment_image.py", "content": "# function_import --------------------\n\nfrom transformers import SegformerFeatureExtractor, SegformerForSemanticSegmentation\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef segment_image(image_url):\n    \"\"\"\n    Analyze an image of an urban scene to identify and separate regions with different semantics.\n\n    Args:\n        image_url (str): URL of the image to be analyzed.\n\n    Returns:\n        torch.Tensor: The output logits from the semantic segmentation model.\n\n    Raises:\n        Exception: If the image cannot be opened.\n    \"\"\"\n    feature_extractor = SegformerFeatureExtractor.from_pretrained('nvidia/segformer-b2-finetuned-cityscapes-1024-1024')\n    model = SegformerForSemanticSegmentation.from_pretrained('nvidia/segformer-b2-finetuned-cityscapes-1024-1024')\n\n    try:\n        image = Image.open(requests.get(image_url, stream=True).raw)\n    except Exception as e:\n        raise Exception('Unable to open image.') from e\n\n    inputs = feature_extractor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n\n    return outputs.logits\n\n# test_function_code --------------------\n\ndef test_segment_image():\n    \"\"\"\n    Test the segment_image function.\n    \"\"\"\n    test_image_url = 'https://placekitten.com/200/300'\n    try:\n        output = segment_image(test_image_url)\n        assert output is not None, 'Output is None.'\n        assert output.shape[0] == 1, 'Output shape is incorrect.'\n    except Exception as e:\n        print(f'Test failed with error: {e}')\n    else:\n        print('All tests passed.')\n\n# call_test_function_code --------------------\n\ntest_segment_image()", "function_import": "# function_import --------------------\n\nfrom transformers import SegformerFeatureExtractor, SegformerForSemanticSegmentation\nfrom PIL import Image\nimport requests\n\n", "function_code": "# function_code --------------------\n\ndef segment_image(image_url):\n    \"\"\"\n    Analyze an image of an urban scene to identify and separate regions with different semantics.\n\n    Args:\n        image_url (str): URL of the image to be analyzed.\n\n    Returns:\n        torch.Tensor: The output logits from the semantic segmentation model.\n\n    Raises:\n        Exception: If the image cannot be opened.\n    \"\"\"\n    feature_extractor = SegformerFeatureExtractor.from_pretrained('nvidia/segformer-b2-finetuned-cityscapes-1024-1024')\n    model = SegformerForSemanticSegmentation.from_pretrained('nvidia/segformer-b2-finetuned-cityscapes-1024-1024')\n\n    try:\n        image = Image.open(requests.get(image_url, stream=True).raw)\n    except Exception as e:\n        raise Exception('Unable to open image.') from e\n\n    inputs = feature_extractor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n\n    return outputs.logits\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_segment_image():\n    \"\"\"\n    Test the segment_image function.\n    \"\"\"\n    test_image_url = 'https://placekitten.com/200/300'\n    try:\n        output = segment_image(test_image_url)\n        assert output is not None, 'Output is None.'\n        assert output.shape[0] == 1, 'Output shape is incorrect.'\n    except Exception as e:\n        print(f'Test failed with error: {e}')\n    else:\n        print('All tests passed.')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_segment_image()", "instruct": "# function_import --------------------\n\nfrom transformers import SegformerFeatureExtractor, SegformerForSemanticSegmentation\nfrom PIL import Image\nimport requests\n\n# function_code --------------------\n\ndef segment_image(image_url):\n    \"\"\"\n    Analyze an image of an urban scene to identify and separate regions with different semantics.\n\n    Args:\n        image_url (str): URL of the image to be analyzed.\n\n    Returns:\n        torch.Tensor: The output logits from the semantic segmentation model.\n\n    Raises:\n        Exception: If the image cannot be opened.\n    \"\"\"", "answer": "\n    feature_extractor = SegformerFeatureExtractor.from_pretrained('nvidia/segformer-b2-finetuned-cityscapes-1024-1024')\n    model = SegformerForSemanticSegmentation.from_pretrained('nvidia/segformer-b2-finetuned-cityscapes-1024-1024')\n\n    try:\n        image = Image.open(requests.get(image_url, stream=True).raw)\n    except Exception as e:\n        raise Exception('Unable to open image.') from e\n\n    inputs = feature_extractor(images=image, return_tensors='pt')\n    outputs = model(**inputs)\n\n    return outputs.logits\n\n", "prediction": "\n\n    # Initialize a feature extractor for the SegFormer model.\n\n    feature_extractor = SegformerFeatureExtractor()\n    \n    # Create a Segmentation pipeline using the Semantic Segmentation head of the SegFormer model.\n    \n    segmenter = SegformerForSemanticSegmentation(feature_extractor, 1209)\n    \n    try:\n        # Open the image from a URL.\n        \n        pil_image = Image.open(requests.get(image_url, stream=True).raw)\n    except Exception as e:\n        print(\"Could not open\", image_url,\"Exception:\",e)\n    \n    # Resize the image to 512 x 512 pixels and convert it to a tensor.\n        \n    image = feature_extractor(pil_image, return_tensors=\"pt\")[\"pixel_values\"].unsqueeze(0)\n    \n    # Run inference on the image with SegFormer model to produce segmentation logits.\n    \n    outputs = segmenter(images=image)\n    \n    # Get a softmax probability of the pixel-wise labels from the output logits.\n        \n    probabilities = outputs.logits.softmax(-1)[0] \n\n    return probabilities"}