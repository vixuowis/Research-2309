{"path": "output/hf-eval-data-v3-valid/f00678_tokenize_chinese_text.py", "content": "# function_import --------------------\n\nfrom transformers import BertTokenizerFast, AutoModel\n\n# function_code --------------------\n\ndef tokenize_chinese_text(text):\n    \"\"\"\n    Tokenizes Chinese text using the 'ckiplab/bert-base-chinese-ws' pretrained model.\n\n    Args:\n        text (str): The Chinese text to be tokenized.\n\n    Returns:\n        List[str]: The tokenized text.\n    \"\"\"\n    tokenizer = BertTokenizerFast.from_pretrained('bert-base-chinese')\n    model = AutoModel.from_pretrained('ckiplab/bert-base-chinese-ws')\n    tokens = tokenizer.tokenize(text)\n    return tokens\n\n# test_function_code --------------------\n\ndef test_tokenize_chinese_text():\n    \"\"\"\n    Tests the tokenize_chinese_text function with some sample Chinese text.\n    \"\"\"\n    sample_text = '\u6211\u7231\u81ea\u7136\u8bed\u8a00\u5904\u7406'\n    tokens = tokenize_chinese_text(sample_text)\n    assert isinstance(tokens, list)\n    assert all(isinstance(token, str) for token in tokens)\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_tokenize_chinese_text()", "function_import": "# function_import --------------------\n\nfrom transformers import BertTokenizerFast, AutoModel\n\n", "function_code": "# function_code --------------------\n\ndef tokenize_chinese_text(text):\n    \"\"\"\n    Tokenizes Chinese text using the 'ckiplab/bert-base-chinese-ws' pretrained model.\n\n    Args:\n        text (str): The Chinese text to be tokenized.\n\n    Returns:\n        List[str]: The tokenized text.\n    \"\"\"\n    tokenizer = BertTokenizerFast.from_pretrained('bert-base-chinese')\n    model = AutoModel.from_pretrained('ckiplab/bert-base-chinese-ws')\n    tokens = tokenizer.tokenize(text)\n    return tokens\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_tokenize_chinese_text():\n    \"\"\"\n    Tests the tokenize_chinese_text function with some sample Chinese text.\n    \"\"\"\n    sample_text = '\u6211\u7231\u81ea\u7136\u8bed\u8a00\u5904\u7406'\n    tokens = tokenize_chinese_text(sample_text)\n    assert isinstance(tokens, list)\n    assert all(isinstance(token, str) for token in tokens)\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_tokenize_chinese_text()", "instruct": "# function_import --------------------\n\nfrom transformers import BertTokenizerFast, AutoModel\n\n# function_code --------------------\n\ndef tokenize_chinese_text(text):\n    \"\"\"\n    Tokenizes Chinese text using the 'ckiplab/bert-base-chinese-ws' pretrained model.\n\n    Args:\n        text (str): The Chinese text to be tokenized.\n\n    Returns:\n        List[str]: The tokenized text.\n    \"\"\"", "answer": "\n    tokenizer = BertTokenizerFast.from_pretrained('bert-base-chinese')\n    model = AutoModel.from_pretrained('ckiplab/bert-base-chinese-ws')\n    tokens = tokenizer.tokenize(text)\n    return tokens\n\n", "prediction": "\n    \n    # Load the 'ckiplab/bert-base-chinese-ws' pretrained model\n    bert_tokenizer = BertTokenizerFast.from_pretrained(\"ckiplab/bert-base-chinese-ws\")\n    \n    # Tokenize the text\n    return bert_tokenizer(text)[\"input_ids\"]\n    "}