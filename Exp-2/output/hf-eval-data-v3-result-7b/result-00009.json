{"path": "output/hf-eval-data-v3-valid/f00053_news_category_detection.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef news_category_detection(text: str) -> str:\n    \"\"\"\n    Detects the category of a given piece of news using zero-shot-classification.\n\n    Args:\n        text (str): The news text to be classified.\n\n    Returns:\n        str: The category of the news ('technology', 'sports', or 'politics').\n    \"\"\"\n    candidate_labels = ['technology', 'sports', 'politics']\n    classifier = pipeline('zero-shot-classification', model='cross-encoder/nli-roberta-base')\n    result = classifier(text, candidate_labels)\n    return result['labels'][0]\n\n# test_function_code --------------------\n\ndef test_news_category_detection():\n    assert news_category_detection('Apple just announced the newest iPhone X') == 'technology'\n    assert news_category_detection('The Lakers won their last game') == 'sports'\n    assert news_category_detection('The president will give a speech tomorrow') == 'politics'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_news_category_detection()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef news_category_detection(text: str) -> str:\n    \"\"\"\n    Detects the category of a given piece of news using zero-shot-classification.\n\n    Args:\n        text (str): The news text to be classified.\n\n    Returns:\n        str: The category of the news ('technology', 'sports', or 'politics').\n    \"\"\"\n    candidate_labels = ['technology', 'sports', 'politics']\n    classifier = pipeline('zero-shot-classification', model='cross-encoder/nli-roberta-base')\n    result = classifier(text, candidate_labels)\n    return result['labels'][0]\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_news_category_detection():\n    assert news_category_detection('Apple just announced the newest iPhone X') == 'technology'\n    assert news_category_detection('The Lakers won their last game') == 'sports'\n    assert news_category_detection('The president will give a speech tomorrow') == 'politics'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_news_category_detection()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef news_category_detection(text: str) -> str:\n    \"\"\"\n    Detects the category of a given piece of news using zero-shot-classification.\n\n    Args:\n        text (str): The news text to be classified.\n\n    Returns:\n        str: The category of the news ('technology', 'sports', or 'politics').\n    \"\"\"", "answer": "\n    candidate_labels = ['technology', 'sports', 'politics']\n    classifier = pipeline('zero-shot-classification', model='cross-encoder/nli-roberta-base')\n    result = classifier(text, candidate_labels)\n    return result['labels'][0]\n\n", "prediction": "\n    \n    # Load model\n    model_name = \"BSC/newscategories_bert\"\n    cat_model = pipeline(task=\"zero-shot-classification\", model=model_name)\n\n    # Classify the news text in one of 3 categories.\n    results = cat_model(text, [\"technology\", \"politics\", \"sports\"])\n    \n    if 'category' not in results[0]: return ''\n    \n    return results[0]['category']"}