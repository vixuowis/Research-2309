{"path": "output/hf-eval-data-v3-valid/f00518_generate_code_summary.py", "content": "# function_import --------------------\n\nfrom transformers import RobertaTokenizer, T5ForConditionalGeneration\n\n# function_code --------------------\n\ndef generate_code_summary(code_snippet):\n    \"\"\"\n    Generate a short summary of the provided code snippet using the Salesforce/codet5-base model.\n\n    Args:\n        code_snippet (str): The code snippet to summarize.\n\n    Returns:\n        str: The generated summary of the code snippet.\n    \"\"\"\n    tokenizer = RobertaTokenizer.from_pretrained('Salesforce/codet5-base')\n    model = T5ForConditionalGeneration.from_pretrained('Salesforce/codet5-base')\n    input_ids = tokenizer(code_snippet, return_tensors='pt').input_ids\n    generated_ids = model.generate(input_ids, max_length=25)\n    summary = tokenizer.decode(generated_ids[0], skip_special_tokens=True)\n    return summary\n\n# test_function_code --------------------\n\ndef test_generate_code_summary():\n    \"\"\"\n    Test the generate_code_summary function.\n    \"\"\"\n    code_snippet1 = 'def greet(user): print(f\\'Hello, {user}!\\')'\n    code_snippet2 = 'def add(a, b): return a + b'\n    code_snippet3 = 'class MyClass: def __init__(self): pass'\n    assert isinstance(generate_code_summary(code_snippet1), str)\n    assert isinstance(generate_code_summary(code_snippet2), str)\n    assert isinstance(generate_code_summary(code_snippet3), str)\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_generate_code_summary()", "function_import": "# function_import --------------------\n\nfrom transformers import RobertaTokenizer, T5ForConditionalGeneration\n\n", "function_code": "# function_code --------------------\n\ndef generate_code_summary(code_snippet):\n    \"\"\"\n    Generate a short summary of the provided code snippet using the Salesforce/codet5-base model.\n\n    Args:\n        code_snippet (str): The code snippet to summarize.\n\n    Returns:\n        str: The generated summary of the code snippet.\n    \"\"\"\n    tokenizer = RobertaTokenizer.from_pretrained('Salesforce/codet5-base')\n    model = T5ForConditionalGeneration.from_pretrained('Salesforce/codet5-base')\n    input_ids = tokenizer(code_snippet, return_tensors='pt').input_ids\n    generated_ids = model.generate(input_ids, max_length=25)\n    summary = tokenizer.decode(generated_ids[0], skip_special_tokens=True)\n    return summary\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_code_summary():\n    \"\"\"\n    Test the generate_code_summary function.\n    \"\"\"\n    code_snippet1 = 'def greet(user): print(f\\'Hello, {user}!\\')'\n    code_snippet2 = 'def add(a, b): return a + b'\n    code_snippet3 = 'class MyClass: def __init__(self): pass'\n    assert isinstance(generate_code_summary(code_snippet1), str)\n    assert isinstance(generate_code_summary(code_snippet2), str)\n    assert isinstance(generate_code_summary(code_snippet3), str)\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_generate_code_summary()", "instruct": "# function_import --------------------\n\nfrom transformers import RobertaTokenizer, T5ForConditionalGeneration\n\n# function_code --------------------\n\ndef generate_code_summary(code_snippet):\n    \"\"\"\n    Generate a short summary of the provided code snippet using the Salesforce/codet5-base model.\n\n    Args:\n        code_snippet (str): The code snippet to summarize.\n\n    Returns:\n        str: The generated summary of the code snippet.\n    \"\"\"", "answer": "\n    tokenizer = RobertaTokenizer.from_pretrained('Salesforce/codet5-base')\n    model = T5ForConditionalGeneration.from_pretrained('Salesforce/codet5-base')\n    input_ids = tokenizer(code_snippet, return_tensors='pt').input_ids\n    generated_ids = model.generate(input_ids, max_length=25)\n    summary = tokenizer.decode(generated_ids[0], skip_special_tokens=True)\n    return summary\n\n", "prediction": "\n    \n    # Load tokenizer and model --------------------\n    \n    tokenizer = RobertaTokenizer.from_pretrained(\"roberta-base\")\n    model = T5ForConditionalGeneration.from_pretrained('salesforce/codet5-small') \n    \n    # Preprocess code snippet to be in the right format --------------------\n    \n    # Add <python> tags and newlines\n    code = \"<python>\\n\" + code_snippet + \"\\n</python>\"\n    \n    encoding = tokenizer(code, return_tensors=\"pt\")\n    \n    # Generate summary using the model --------------------\n\n    input_ids = encoding[\"input_ids\"].tolist()[0] \n    outputs = model.generate(input_ids)\n    sampled_output = tokenizer.decode(outputs[0], skip_special_tokens=True)\n    \n    return sampled_output"}