{"path": "output/hf-eval-data-v3-valid/f00060_summarize_text.py", "content": "# function_import --------------------\n\nfrom transformers import BigBirdPegasusForConditionalGeneration, AutoTokenizer\n\n# function_code --------------------\n\ndef summarize_text(text):\n    \"\"\"\n    Summarizes a given long text using BigBird Pegasus model.\n\n    Args:\n        text (str): The long text to be summarized.\n\n    Returns:\n        str: The summarized text.\n    \"\"\"\n    tokenizer = AutoTokenizer.from_pretrained('google/bigbird-pegasus-large-bigpatent')\n    model = BigBirdPegasusForConditionalGeneration.from_pretrained('google/bigbird-pegasus-large-bigpatent')\n    inputs = tokenizer(text, return_tensors='pt')\n    prediction = model.generate(**inputs)\n    summary = tokenizer.batch_decode(prediction)[0]\n    return summary\n\n# test_function_code --------------------\n\ndef test_summarize_text():\n    \"\"\"\n    Tests the summarize_text function with some test cases.\n    \"\"\"\n    test_text1 = 'This is a long text that needs to be summarized. It contains many details that are not necessary for understanding the main idea.'\n    test_text2 = 'Another long text that needs summarization. It also contains many unnecessary details.'\n    assert len(summarize_text(test_text1)) < len(test_text1)\n    assert len(summarize_text(test_text2)) < len(test_text2)\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_summarize_text()", "function_import": "# function_import --------------------\n\nfrom transformers import BigBirdPegasusForConditionalGeneration, AutoTokenizer\n\n", "function_code": "# function_code --------------------\n\ndef summarize_text(text):\n    \"\"\"\n    Summarizes a given long text using BigBird Pegasus model.\n\n    Args:\n        text (str): The long text to be summarized.\n\n    Returns:\n        str: The summarized text.\n    \"\"\"\n    tokenizer = AutoTokenizer.from_pretrained('google/bigbird-pegasus-large-bigpatent')\n    model = BigBirdPegasusForConditionalGeneration.from_pretrained('google/bigbird-pegasus-large-bigpatent')\n    inputs = tokenizer(text, return_tensors='pt')\n    prediction = model.generate(**inputs)\n    summary = tokenizer.batch_decode(prediction)[0]\n    return summary\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_summarize_text():\n    \"\"\"\n    Tests the summarize_text function with some test cases.\n    \"\"\"\n    test_text1 = 'This is a long text that needs to be summarized. It contains many details that are not necessary for understanding the main idea.'\n    test_text2 = 'Another long text that needs summarization. It also contains many unnecessary details.'\n    assert len(summarize_text(test_text1)) < len(test_text1)\n    assert len(summarize_text(test_text2)) < len(test_text2)\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_summarize_text()", "instruct": "# function_import --------------------\n\nfrom transformers import BigBirdPegasusForConditionalGeneration, AutoTokenizer\n\n# function_code --------------------\n\ndef summarize_text(text):\n    \"\"\"\n    Summarizes a given long text using BigBird Pegasus model.\n\n    Args:\n        text (str): The long text to be summarized.\n\n    Returns:\n        str: The summarized text.\n    \"\"\"", "answer": "\n    tokenizer = AutoTokenizer.from_pretrained('google/bigbird-pegasus-large-bigpatent')\n    model = BigBirdPegasusForConditionalGeneration.from_pretrained('google/bigbird-pegasus-large-bigpatent')\n    inputs = tokenizer(text, return_tensors='pt')\n    prediction = model.generate(**inputs)\n    summary = tokenizer.batch_decode(prediction)[0]\n    return summary\n\n", "prediction": "\n    \n    tokenizer = AutoTokenizer.from_pretrained(\"google/bigbird-pegasus-large-arxiv\")\n    model = BigBirdPegasusForConditionalGeneration.from_pretrained('google/bigbird-pegasus-large-arxiv')\n    \n    inputs  = tokenizer([text], max_length=2048, truncation=True)\n    input_ids = inputs[\"input_ids\"]\n    input_mask = [1] * len(input_ids[0])\n    output_ids = model.generate(input_ids, attention_mask=input_mask, num_beams=4, length_penalty=2.0, early_stopping=True, max_length=5)\n    \n    return tokenizer.decode(output_ids[0], skip_special_tokens = True).capitalize()"}