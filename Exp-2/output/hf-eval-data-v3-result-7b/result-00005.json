{"path": "output/hf-eval-data-v3-valid/f00020_classify_image.py", "content": "# function_import --------------------\n\nfrom urllib.request import urlopen\nfrom PIL import Image\nimport timm\nimport torch\n\n# function_code --------------------\n\ndef classify_image(img_url: str) -> int:\n    \"\"\"\n    Classify an image using a pretrained MobileNet-v3 model.\n\n    Args:\n        img_url (str): The URL of the image to classify.\n\n    Returns:\n        int: The predicted class of the image.\n\n    Raises:\n        URLError: If the image cannot be opened from the provided URL.\n        RuntimeError: If there is a problem running the model.\n    \"\"\"\n    img = Image.open(urlopen(img_url))\n    model = timm.create_model('mobilenetv3_large_100.ra_in1k', pretrained=True)\n    model = model.eval()\n\n    data_config = timm.data.resolve_model_data_config(model)\n    transforms = timm.data.create_transform(**data_config, is_training=False)\n    input_tensor = transforms(img).unsqueeze(0)\n    output = model(input_tensor)\n\n    return torch.argmax(output).item()\n\n# test_function_code --------------------\n\ndef test_classify_image():\n    \"\"\"Test the classify_image function.\"\"\"\n    assert isinstance(classify_image('https://placekitten.com/200/300'), int)\n    assert isinstance(classify_image('https://placekitten.com/200/301'), int)\n    assert isinstance(classify_image('https://placekitten.com/200/302'), int)\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_classify_image()", "function_import": "# function_import --------------------\n\nfrom urllib.request import urlopen\nfrom PIL import Image\nimport timm\nimport torch\n\n", "function_code": "# function_code --------------------\n\ndef classify_image(img_url: str) -> int:\n    \"\"\"\n    Classify an image using a pretrained MobileNet-v3 model.\n\n    Args:\n        img_url (str): The URL of the image to classify.\n\n    Returns:\n        int: The predicted class of the image.\n\n    Raises:\n        URLError: If the image cannot be opened from the provided URL.\n        RuntimeError: If there is a problem running the model.\n    \"\"\"\n    img = Image.open(urlopen(img_url))\n    model = timm.create_model('mobilenetv3_large_100.ra_in1k', pretrained=True)\n    model = model.eval()\n\n    data_config = timm.data.resolve_model_data_config(model)\n    transforms = timm.data.create_transform(**data_config, is_training=False)\n    input_tensor = transforms(img).unsqueeze(0)\n    output = model(input_tensor)\n\n    return torch.argmax(output).item()\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_classify_image():\n    \"\"\"Test the classify_image function.\"\"\"\n    assert isinstance(classify_image('https://placekitten.com/200/300'), int)\n    assert isinstance(classify_image('https://placekitten.com/200/301'), int)\n    assert isinstance(classify_image('https://placekitten.com/200/302'), int)\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_classify_image()", "instruct": "# function_import --------------------\n\nfrom urllib.request import urlopen\nfrom PIL import Image\nimport timm\nimport torch\n\n# function_code --------------------\n\ndef classify_image(img_url: str) -> int:\n    \"\"\"\n    Classify an image using a pretrained MobileNet-v3 model.\n\n    Args:\n        img_url (str): The URL of the image to classify.\n\n    Returns:\n        int: The predicted class of the image.\n\n    Raises:\n        URLError: If the image cannot be opened from the provided URL.\n        RuntimeError: If there is a problem running the model.\n    \"\"\"", "answer": "\n    img = Image.open(urlopen(img_url))\n    model = timm.create_model('mobilenetv3_large_100.ra_in1k', pretrained=True)\n    model = model.eval()\n\n    data_config = timm.data.resolve_model_data_config(model)\n    transforms = timm.data.create_transform(**data_config, is_training=False)\n    input_tensor = transforms(img).unsqueeze(0)\n    output = model(input_tensor)\n\n    return torch.argmax(output).item()\n\n", "prediction": "\n    \n    # Download and open image --------------------\n    \n    try:\n        \n        with urlopen(img_url) as url_handle:  # type: BinaryIO\n            img = Image.open(url_handle).convert(\"RGB\")  \n            \n    except URLError:\n        raise RuntimeError(f\"Could not open image at URL {url}\") from None\n    \n    # Run model --------------------\n    \n    try:\n        \n        model = timm.create_model('mobilenetv3_small_100', num_classes=2, in_chans=3)  # type: Module\n        model.load_state_dict(torch.hub.load_state_dict_from_url(\"https://github.com/y-bar/face-mask-ml-app/releases/download/v0.0.1/model_mobilenetv3_small_100.pt\", map_location=\"cpu\"))\n        model.eval()\n        \n        tensor = transforms.ToTensor()(img).unsqueeze_(0)  # type: Tensor\n            \n    except Exception as e:\n        raise RuntimeError(\"An error occured when running the model.\") from e\n    \n    with torch.no_grad():\n        \n        output = model(tensor)  # type: Tensor\n        _, prediction = torch.max(output, dim=1)  # type: Tuple[Tensor, Tensor]\n            \n    return int(prediction)"}