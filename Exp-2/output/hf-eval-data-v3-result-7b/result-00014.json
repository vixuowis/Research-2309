{"path": "output/hf-eval-data-v3-valid/f00071_get_sentence_embedding.py", "content": "# function_import --------------------\n\nfrom sentence_transformers import SentenceTransformer\n\n# function_code --------------------\n\ndef get_sentence_embedding(sentence: str) -> list:\n    '''\n    This function takes a sentence as input and returns its embedding using the SentenceTransformer model.\n\n    Args:\n        sentence (str): The sentence to be encoded.\n\n    Returns:\n        list: The embedding of the input sentence.\n    '''\n    model = SentenceTransformer('sentence-transformers/nli-mpnet-base-v2')\n    encoded_sentence = model.encode(sentence)\n    return encoded_sentence\n\n# test_function_code --------------------\n\ndef test_get_sentence_embedding():\n    '''\n    This function tests the get_sentence_embedding function.\n    '''\n    sentence1 = 'The effects of climate change on biodiversity and ecosystem services in the Arctic.'\n    sentence2 = 'Climate change is a significant threat to biodiversity in the Arctic.'\n    assert len(get_sentence_embedding(sentence1)) == 768\n    assert len(get_sentence_embedding(sentence2)) == 768\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_get_sentence_embedding()", "function_import": "# function_import --------------------\n\nfrom sentence_transformers import SentenceTransformer\n\n", "function_code": "# function_code --------------------\n\ndef get_sentence_embedding(sentence: str) -> list:\n    '''\n    This function takes a sentence as input and returns its embedding using the SentenceTransformer model.\n\n    Args:\n        sentence (str): The sentence to be encoded.\n\n    Returns:\n        list: The embedding of the input sentence.\n    '''\n    model = SentenceTransformer('sentence-transformers/nli-mpnet-base-v2')\n    encoded_sentence = model.encode(sentence)\n    return encoded_sentence\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_get_sentence_embedding():\n    '''\n    This function tests the get_sentence_embedding function.\n    '''\n    sentence1 = 'The effects of climate change on biodiversity and ecosystem services in the Arctic.'\n    sentence2 = 'Climate change is a significant threat to biodiversity in the Arctic.'\n    assert len(get_sentence_embedding(sentence1)) == 768\n    assert len(get_sentence_embedding(sentence2)) == 768\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_get_sentence_embedding()", "instruct": "# function_import --------------------\n\nfrom sentence_transformers import SentenceTransformer\n\n# function_code --------------------\n\ndef get_sentence_embedding(sentence: str) -> list:\n    '''\n    This function takes a sentence as input and returns its embedding using the SentenceTransformer model.\n\n    Args:\n        sentence (str): The sentence to be encoded.\n\n    Returns:\n        list: The embedding of the input sentence.\n    '''", "answer": "\n    model = SentenceTransformer('sentence-transformers/nli-mpnet-base-v2')\n    encoded_sentence = model.encode(sentence)\n    return encoded_sentence\n\n", "prediction": "\n    \n    # Instantiating the model.\n    model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')\n    \n    return model.encode(sentence)"}