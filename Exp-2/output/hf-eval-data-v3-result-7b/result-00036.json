{"path": "output/hf-eval-data-v3-valid/f00160_keyword_spotting.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef keyword_spotting(audio_file_path: str, top_k: int = 5):\n    \"\"\"\n    Determine the keyword spoken in a recorded audio file.\n\n    Args:\n        audio_file_path (str): The path to the audio file.\n        top_k (int, optional): The number of top predictions to return. Defaults to 5.\n\n    Returns:\n        list: The model's predictions for the top keywords in the audio file.\n\n    Raises:\n        FileNotFoundError: If the audio file does not exist.\n    \"\"\"\n    classifier = pipeline('audio-classification', model='superb/hubert-base-superb-ks')\n    keyword_predictions = classifier(audio_file_path, top_k=top_k)\n    return keyword_predictions\n\n# test_function_code --------------------\n\ndef test_keyword_spotting():\n    \"\"\"\n    Test the keyword_spotting function.\n    \"\"\"\n    # Test case: valid audio file\n    audio_file_path = 'sample_audio.wav'\n    try:\n        predictions = keyword_spotting(audio_file_path)\n        assert isinstance(predictions, list), 'The result should be a list.'\n    except FileNotFoundError:\n        print('Test case passed: FileNotFoundError raised for non-existent audio file.')\n    except Exception as e:\n        print(f'Test case failed: {e}')\n    # Test case: invalid audio file\n    audio_file_path = 'non_existent_file.wav'\n    try:\n        predictions = keyword_spotting(audio_file_path)\n        assert False, 'FileNotFoundError should have been raised.'\n    except FileNotFoundError:\n        print('Test case passed: FileNotFoundError raised for non-existent audio file.')\n    except Exception as e:\n        print(f'Test case failed: {e}')\n    print('All tests passed.')\n\n# call_test_function_code --------------------\n\ntest_keyword_spotting()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef keyword_spotting(audio_file_path: str, top_k: int = 5):\n    \"\"\"\n    Determine the keyword spoken in a recorded audio file.\n\n    Args:\n        audio_file_path (str): The path to the audio file.\n        top_k (int, optional): The number of top predictions to return. Defaults to 5.\n\n    Returns:\n        list: The model's predictions for the top keywords in the audio file.\n\n    Raises:\n        FileNotFoundError: If the audio file does not exist.\n    \"\"\"\n    classifier = pipeline('audio-classification', model='superb/hubert-base-superb-ks')\n    keyword_predictions = classifier(audio_file_path, top_k=top_k)\n    return keyword_predictions\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_keyword_spotting():\n    \"\"\"\n    Test the keyword_spotting function.\n    \"\"\"\n    # Test case: valid audio file\n    audio_file_path = 'sample_audio.wav'\n    try:\n        predictions = keyword_spotting(audio_file_path)\n        assert isinstance(predictions, list), 'The result should be a list.'\n    except FileNotFoundError:\n        print('Test case passed: FileNotFoundError raised for non-existent audio file.')\n    except Exception as e:\n        print(f'Test case failed: {e}')\n    # Test case: invalid audio file\n    audio_file_path = 'non_existent_file.wav'\n    try:\n        predictions = keyword_spotting(audio_file_path)\n        assert False, 'FileNotFoundError should have been raised.'\n    except FileNotFoundError:\n        print('Test case passed: FileNotFoundError raised for non-existent audio file.')\n    except Exception as e:\n        print(f'Test case failed: {e}')\n    print('All tests passed.')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_keyword_spotting()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef keyword_spotting(audio_file_path: str, top_k: int = 5):\n    \"\"\"\n    Determine the keyword spoken in a recorded audio file.\n\n    Args:\n        audio_file_path (str): The path to the audio file.\n        top_k (int, optional): The number of top predictions to return. Defaults to 5.\n\n    Returns:\n        list: The model's predictions for the top keywords in the audio file.\n\n    Raises:\n        FileNotFoundError: If the audio file does not exist.\n    \"\"\"", "answer": "\n    classifier = pipeline('audio-classification', model='superb/hubert-base-superb-ks')\n    keyword_predictions = classifier(audio_file_path, top_k=top_k)\n    return keyword_predictions\n\n", "prediction": "    \n    try:\n        asr = pipeline(\"automatic-speech-recognition\")  # Load ASR pipeline\n        \n        with open(audio_file_path, \"rb\") as f:\n            bytes_obj = f.read()\n            \n        transcript = asr(bytes_obj)[\"text\"]  # Detect speech in the audio file\n        \n        if len(transcript):\n            keyword_spotter = pipeline(\"sentence-transformers/all-MiniLM-L6-v2\")  # Load keyword spotting model\n            \n            predictions = keyword_spotter(transcript, top_k=top_k)[\"labels\"]\n        else:\n            raise ValueError(f\"Could not detect speech in {audio_file_path}\")    \n    except FileNotFoundError as e:\n        raise e   # Raise the error again so we don't mask it.\n        \n    return predictions"}