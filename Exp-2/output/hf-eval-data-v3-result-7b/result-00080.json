{"path": "output/hf-eval-data-v3-valid/f00346_generate_image_from_text.py", "content": "# function_import --------------------\n\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom PIL import Image\nimport os\n\n# function_code --------------------\n\ndef generate_image_from_text(prompt: str, model_id: str = 'stabilityai/stable-diffusion-2-1', save_path: str = 'generated_image.png'):\n    \"\"\"\n    Generate an image based on the given text description using the StableDiffusionPipeline model.\n\n    Args:\n        prompt (str): The text description of the scene.\n        model_id (str, optional): The id of the pre-trained model. Defaults to 'stabilityai/stable-diffusion-2-1'.\n        save_path (str, optional): The path to save the generated image. Defaults to 'generated_image.png'.\n\n    Returns:\n        None\n    \"\"\"\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    generated_image = pipe(prompt).images[0]\n    generated_image.save(save_path)\n\n# test_function_code --------------------\n\ndef test_generate_image_from_text():\n    \"\"\"\n    Test the function generate_image_from_text.\n\n    Returns:\n        str: 'All Tests Passed' if all tests pass, otherwise the error message.\n    \"\"\"\n    try:\n        generate_image_from_text('a scene of a magical forest with fairies and elves')\n        assert os.path.exists('generated_image.png')\n        os.remove('generated_image.png')\n        return 'All Tests Passed'\n    except Exception as e:\n        return str(e)\n\n# call_test_function_code --------------------\n\nprint(test_generate_image_from_text())", "function_import": "# function_import --------------------\n\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom PIL import Image\nimport os\n\n", "function_code": "# function_code --------------------\n\ndef generate_image_from_text(prompt: str, model_id: str = 'stabilityai/stable-diffusion-2-1', save_path: str = 'generated_image.png'):\n    \"\"\"\n    Generate an image based on the given text description using the StableDiffusionPipeline model.\n\n    Args:\n        prompt (str): The text description of the scene.\n        model_id (str, optional): The id of the pre-trained model. Defaults to 'stabilityai/stable-diffusion-2-1'.\n        save_path (str, optional): The path to save the generated image. Defaults to 'generated_image.png'.\n\n    Returns:\n        None\n    \"\"\"\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    generated_image = pipe(prompt).images[0]\n    generated_image.save(save_path)\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_image_from_text():\n    \"\"\"\n    Test the function generate_image_from_text.\n\n    Returns:\n        str: 'All Tests Passed' if all tests pass, otherwise the error message.\n    \"\"\"\n    try:\n        generate_image_from_text('a scene of a magical forest with fairies and elves')\n        assert os.path.exists('generated_image.png')\n        os.remove('generated_image.png')\n        return 'All Tests Passed'\n    except Exception as e:\n        return str(e)\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\nprint(test_generate_image_from_text())", "instruct": "# function_import --------------------\n\nfrom diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\nimport torch\nfrom PIL import Image\nimport os\n\n# function_code --------------------\n\ndef generate_image_from_text(prompt: str, model_id: str = 'stabilityai/stable-diffusion-2-1', save_path: str = 'generated_image.png'):\n    \"\"\"\n    Generate an image based on the given text description using the StableDiffusionPipeline model.\n\n    Args:\n        prompt (str): The text description of the scene.\n        model_id (str, optional): The id of the pre-trained model. Defaults to 'stabilityai/stable-diffusion-2-1'.\n        save_path (str, optional): The path to save the generated image. Defaults to 'generated_image.png'.\n\n    Returns:\n        None\n    \"\"\"", "answer": "\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n    pipe = pipe.to('cuda')\n    generated_image = pipe(prompt).images[0]\n    generated_image.save(save_path)\n\n", "prediction": "\n\n    # Load in the pretrained model from the model id and construct an image diffuser pipeline around it.\n    pipeline = StableDiffusionPipeline.from_pretrained(model_id)\n    \n    # Generate a sample of the image based on the given prompt text.\n    img_sample = pipeline.generate_samples([prompt])[0]\n    \n    # Save out the generated sample to file.\n    save_image_to_file(img_sample, save_path)\n\ndef generate_video_from_texts(prompts: list, model_id: str = 'stabilityai/stable-diffusion-2-1', save_path: str = 'generated_video.mp4'):\n    \"\"\"\n    Generate a video based on the given text descriptions using the StableDiffusionPipeline model.\n\n    Args:\n        prompts (list): The list of texts that describe the scene transitions.\n        model_id (str, optional): The id of the pre-trained model. Defaults to 'stabilityai/stable-diffusion-2-1'.\n        save_path (str, optional): The path to save the generated video. Defaults to 'generated_video.mp4'.\n\n    Returns:\n        None\n    \"\"\"\n    \n    # Load in the pretrained model from the model id and construct an image diffuser pipeline around it.\n    pipeline = StableDiffusionPipeline.from_pretrained(model_id)\n\n    # Construct a scheduler to control how we change from one prompt to another.\n    scheduler = DPMSolverMultistepScheduler(prompts=prompts, solver='dpms', n_iterations=1000)\n    \n    # Generate the video based on the given text descriptions and save it out.\n    pipeline.generate_video(scheduler) \n\ndef generate_image_from_image(base_img: str, model_id: str = 'stabilityai/stable-diffusion-2-1', save_path: str = 'generated_image.png'):\n    \"\"\"\n    Generate an image based on the given text description using the StableDiff"}