{"path": "output/hf-eval-data-v3-valid/f00208_detect_named_entities.py", "content": "# function_import --------------------\n\nfrom transformers import AutoTokenizer, AutoModelForTokenClassification, pipeline\n\n# function_code --------------------\n\ndef detect_named_entities(text):\n    \"\"\"\n    Detect named entities in a given text using a multilingual named entity recognition model.\n\n    Args:\n        text (str): The text in which to detect named entities.\n\n    Returns:\n        list: A list of dictionaries, each containing information about a detected named entity.\n    \"\"\"\n    tokenizer = AutoTokenizer.from_pretrained('Davlan/distilbert-base-multilingual-cased-ner-hrl')\n    model = AutoModelForTokenClassification.from_pretrained('Davlan/distilbert-base-multilingual-cased-ner-hrl')\n    nlp = pipeline('ner', model=model, tokenizer=tokenizer)\n    return nlp(text)\n\n# test_function_code --------------------\n\ndef test_detect_named_entities():\n    \"\"\"\n    Test the detect_named_entities function.\n    \"\"\"\n    test_text_1 = 'Nader Jokhadar had given Syria the lead with a well-struck header in the seventh minute.'\n    test_text_2 = 'Apple Inc. is planning to open a new store in San Francisco.'\n    test_text_3 = 'Angela Merkel met with Emmanuel Macron in Berlin.'\n    assert isinstance(detect_named_entities(test_text_1), list)\n    assert isinstance(detect_named_entities(test_text_2), list)\n    assert isinstance(detect_named_entities(test_text_3), list)\n    print('All Tests Passed')\n\n# call_test_function_code --------------------\n\ntest_detect_named_entities()", "function_import": "# function_import --------------------\n\nfrom transformers import AutoTokenizer, AutoModelForTokenClassification, pipeline\n\n", "function_code": "# function_code --------------------\n\ndef detect_named_entities(text):\n    \"\"\"\n    Detect named entities in a given text using a multilingual named entity recognition model.\n\n    Args:\n        text (str): The text in which to detect named entities.\n\n    Returns:\n        list: A list of dictionaries, each containing information about a detected named entity.\n    \"\"\"\n    tokenizer = AutoTokenizer.from_pretrained('Davlan/distilbert-base-multilingual-cased-ner-hrl')\n    model = AutoModelForTokenClassification.from_pretrained('Davlan/distilbert-base-multilingual-cased-ner-hrl')\n    nlp = pipeline('ner', model=model, tokenizer=tokenizer)\n    return nlp(text)\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_detect_named_entities():\n    \"\"\"\n    Test the detect_named_entities function.\n    \"\"\"\n    test_text_1 = 'Nader Jokhadar had given Syria the lead with a well-struck header in the seventh minute.'\n    test_text_2 = 'Apple Inc. is planning to open a new store in San Francisco.'\n    test_text_3 = 'Angela Merkel met with Emmanuel Macron in Berlin.'\n    assert isinstance(detect_named_entities(test_text_1), list)\n    assert isinstance(detect_named_entities(test_text_2), list)\n    assert isinstance(detect_named_entities(test_text_3), list)\n    print('All Tests Passed')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_detect_named_entities()", "instruct": "# function_import --------------------\n\nfrom transformers import AutoTokenizer, AutoModelForTokenClassification, pipeline\n\n# function_code --------------------\n\ndef detect_named_entities(text):\n    \"\"\"\n    Detect named entities in a given text using a multilingual named entity recognition model.\n\n    Args:\n        text (str): The text in which to detect named entities.\n\n    Returns:\n        list: A list of dictionaries, each containing information about a detected named entity.\n    \"\"\"", "answer": "\n    tokenizer = AutoTokenizer.from_pretrained('Davlan/distilbert-base-multilingual-cased-ner-hrl')\n    model = AutoModelForTokenClassification.from_pretrained('Davlan/distilbert-base-multilingual-cased-ner-hrl')\n    nlp = pipeline('ner', model=model, tokenizer=tokenizer)\n    return nlp(text)\n\n", "prediction": "\n    \n    # Load the tokenizer and model\n    tokenizer = AutoTokenizer.from_pretrained(\"dslim/bert-base-NER\")\n    model = AutoModelForTokenClassification.from_pretrained(\"dslim/bert-base-NER\")\n\n    # Prepare the text for processing by the model\n    input_text = f\"{text}\"\n    encoded_input = tokenizer(input_text, return_tensors=\"pt\", padding=True)\n\n    # Detect named entities and get their corresponding tokens\n    ner = pipeline(\"ner\")\n    output = ner(encoded_input[\"input_ids\"], \n            attention_mask=encoded_input['attention_mask'], \n            token_type_ids=encoded_input['token_type_ids'])\n    \n    # Process the results and get only named entities with confidence >= 0.85\n    results = []\n    for entity in output:\n        if entity[\"score\"] > .85:\n            results.append({\"label\":entity[\"entity\"], \"word\":entity[\"word\"].strip()})\n    \n    return results"}