{"path": "output/hf-eval-data-v3-valid/f00215_classify_news_headlines.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef classify_news_headlines(headline: str, candidate_labels: list) -> dict:\n    \"\"\"\n    Classify news headlines into categories using a zero-shot classifier.\n\n    Args:\n        headline (str): The news headline to classify.\n        candidate_labels (list): The list of categories to classify the headline into.\n\n    Returns:\n        dict: The classification results.\n\n    Raises:\n        ValueError: If the headline is not a string or candidate_labels is not a list.\n    \"\"\"\n    if not isinstance(headline, str):\n        raise ValueError('headline must be a string')\n    if not isinstance(candidate_labels, list):\n        raise ValueError('candidate_labels must be a list')\n\n    headlines_classifier = pipeline('zero-shot-classification', model='cross-encoder/nli-deberta-v3-xsmall')\n    headline_category = headlines_classifier(headline, candidate_labels)\n    return headline_category\n\n# test_function_code --------------------\n\ndef test_classify_news_headlines():\n    \"\"\"Tests for the classify_news_headlines function\"\"\"\n    headline1 = 'Apple just announced the newest iPhone X'\n    candidate_labels1 = ['technology', 'sports', 'politics']\n    result1 = classify_news_headlines(headline1, candidate_labels1)\n    assert isinstance(result1, dict), 'Result must be a dictionary'\n    assert 'labels' in result1, 'Result dictionary must contain labels'\n    assert 'scores' in result1, 'Result dictionary must contain scores'\n\n    headline2 = 'The Lakers won their game last night'\n    candidate_labels2 = ['technology', 'sports', 'politics']\n    result2 = classify_news_headlines(headline2, candidate_labels2)\n    assert isinstance(result2, dict), 'Result must be a dictionary'\n    assert 'labels' in result2, 'Result dictionary must contain labels'\n    assert 'scores' in result2, 'Result dictionary must contain scores'\n\n    print('All Tests Passed')\n\n# call_test_function_code --------------------\n\ntest_classify_news_headlines()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef classify_news_headlines(headline: str, candidate_labels: list) -> dict:\n    \"\"\"\n    Classify news headlines into categories using a zero-shot classifier.\n\n    Args:\n        headline (str): The news headline to classify.\n        candidate_labels (list): The list of categories to classify the headline into.\n\n    Returns:\n        dict: The classification results.\n\n    Raises:\n        ValueError: If the headline is not a string or candidate_labels is not a list.\n    \"\"\"\n    if not isinstance(headline, str):\n        raise ValueError('headline must be a string')\n    if not isinstance(candidate_labels, list):\n        raise ValueError('candidate_labels must be a list')\n\n    headlines_classifier = pipeline('zero-shot-classification', model='cross-encoder/nli-deberta-v3-xsmall')\n    headline_category = headlines_classifier(headline, candidate_labels)\n    return headline_category\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_classify_news_headlines():\n    \"\"\"Tests for the classify_news_headlines function\"\"\"\n    headline1 = 'Apple just announced the newest iPhone X'\n    candidate_labels1 = ['technology', 'sports', 'politics']\n    result1 = classify_news_headlines(headline1, candidate_labels1)\n    assert isinstance(result1, dict), 'Result must be a dictionary'\n    assert 'labels' in result1, 'Result dictionary must contain labels'\n    assert 'scores' in result1, 'Result dictionary must contain scores'\n\n    headline2 = 'The Lakers won their game last night'\n    candidate_labels2 = ['technology', 'sports', 'politics']\n    result2 = classify_news_headlines(headline2, candidate_labels2)\n    assert isinstance(result2, dict), 'Result must be a dictionary'\n    assert 'labels' in result2, 'Result dictionary must contain labels'\n    assert 'scores' in result2, 'Result dictionary must contain scores'\n\n    print('All Tests Passed')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_classify_news_headlines()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef classify_news_headlines(headline: str, candidate_labels: list) -> dict:\n    \"\"\"\n    Classify news headlines into categories using a zero-shot classifier.\n\n    Args:\n        headline (str): The news headline to classify.\n        candidate_labels (list): The list of categories to classify the headline into.\n\n    Returns:\n        dict: The classification results.\n\n    Raises:\n        ValueError: If the headline is not a string or candidate_labels is not a list.\n    \"\"\"", "answer": "\n    if not isinstance(headline, str):\n        raise ValueError('headline must be a string')\n    if not isinstance(candidate_labels, list):\n        raise ValueError('candidate_labels must be a list')\n\n    headlines_classifier = pipeline('zero-shot-classification', model='cross-encoder/nli-deberta-v3-xsmall')\n    headline_category = headlines_classifier(headline, candidate_labels)\n    return headline_category\n\n", "prediction": "\n    \n    if (not isinstance(headline, str) \n        and not isinstance(candidate_labels, list)):\n            raise TypeError(f'The `headline` argument must be of type string, and the `candidate_labels` arg must be a list.')\n            \n    # load zero-shot classification pipeline\n    classifier = pipeline('zero-shot-classification', device=-1)\n    \n    result = {}\n    \n    try:\n        result = classifier(headline, \n                            candidate_labels=candidate_labels,\n                            multi_label=True)\n        \n    except Exception as e:\n        print('There was an error with the classification task.')\n        \n        # log exception message\n        logger.exception(\"An exception occurred in the classify_news_headlines() method.\")\n    \n    return result"}