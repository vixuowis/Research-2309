{"path": "output/hf-eval-data-v3-valid/f00436_predict_wine_quality.py", "content": "# function_import --------------------\n\nfrom huggingface_hub import hf_hub_url, cached_download\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n# function_code --------------------\n\ndef predict_wine_quality():\n    '''\n    This function loads a Scikit-learn model from the Hugging Face Hub and uses it to predict wine quality.\n    \n    Returns:\n        labels (numpy.ndarray): The predicted quality labels for the wines.\n    '''\n    REPO_ID = 'julien-c/wine-quality'\n    FILENAME = 'sklearn_model.joblib'\n    \n    model = joblib.load(cached_download(hf_hub_url(REPO_ID, FILENAME)))\n    data_file = cached_download(hf_hub_url(REPO_ID, 'winequality-red.csv'))\n    wine_df = pd.read_csv(data_file, sep=';')\n    X = wine_df.drop(['quality'], axis=1)\n    \n    labels = model.predict(X)\n    return labels\n\n# test_function_code --------------------\n\ndef test_predict_wine_quality():\n    '''\n    This function tests the predict_wine_quality function by checking the shape and dtype of the output.\n    '''\n    labels = predict_wine_quality()\n    assert isinstance(labels, np.ndarray), 'Output should be a numpy array.'\n    assert labels.shape[0] == 1599, 'Output shape should be (1599,).'\n    assert labels.dtype == np.int64, 'Output dtype should be int64.'\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_predict_wine_quality()", "function_import": "# function_import --------------------\n\nfrom huggingface_hub import hf_hub_url, cached_download\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n", "function_code": "# function_code --------------------\n\ndef predict_wine_quality():\n    '''\n    This function loads a Scikit-learn model from the Hugging Face Hub and uses it to predict wine quality.\n    \n    Returns:\n        labels (numpy.ndarray): The predicted quality labels for the wines.\n    '''\n    REPO_ID = 'julien-c/wine-quality'\n    FILENAME = 'sklearn_model.joblib'\n    \n    model = joblib.load(cached_download(hf_hub_url(REPO_ID, FILENAME)))\n    data_file = cached_download(hf_hub_url(REPO_ID, 'winequality-red.csv'))\n    wine_df = pd.read_csv(data_file, sep=';')\n    X = wine_df.drop(['quality'], axis=1)\n    \n    labels = model.predict(X)\n    return labels\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_predict_wine_quality():\n    '''\n    This function tests the predict_wine_quality function by checking the shape and dtype of the output.\n    '''\n    labels = predict_wine_quality()\n    assert isinstance(labels, np.ndarray), 'Output should be a numpy array.'\n    assert labels.shape[0] == 1599, 'Output shape should be (1599,).'\n    assert labels.dtype == np.int64, 'Output dtype should be int64.'\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_predict_wine_quality()", "instruct": "# function_import --------------------\n\nfrom huggingface_hub import hf_hub_url, cached_download\nimport joblib\nimport pandas as pd\nimport numpy as np\n\n# function_code --------------------\n\ndef predict_wine_quality():\n    '''\n    This function loads a Scikit-learn model from the Hugging Face Hub and uses it to predict wine quality.\n    \n    Returns:\n        labels (numpy.ndarray): The predicted quality labels for the wines.\n    '''", "answer": "\n    REPO_ID = 'julien-c/wine-quality'\n    FILENAME = 'sklearn_model.joblib'\n    \n    model = joblib.load(cached_download(hf_hub_url(REPO_ID, FILENAME)))\n    data_file = cached_download(hf_hub_url(REPO_ID, 'winequality-red.csv'))\n    wine_df = pd.read_csv(data_file, sep=';')\n    X = wine_df.drop(['quality'], axis=1)\n    \n    labels = model.predict(X)\n    return labels\n\n", "prediction": "\n    \n    # Load pre-trained scikitlearn model from huggingface hub if it has not already been downloaded\n    model_path = 'marecchi/wine-quality'\n    model_file = 'model.joblib'\n    cached_download(hf_hub_url(repo_id=model_path, filename=model_file))\n    \n    # Load the scikitlearn model\n    clf = joblib.load('./model.joblib') \n\n    return clf"}