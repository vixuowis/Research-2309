{"path": "output/hf-eval-data-v3-valid/f00541_predict_survival.py", "content": "# function_import --------------------\n\nimport joblib\nimport pandas as pd\nimport json\n\n# function_code --------------------\n\ndef predict_survival(data_file: str, model_file: str = 'model.joblib', config_file: str = 'config.json') -> pd.DataFrame:\n    \"\"\"\n    Predict the survival of passengers on the Titanic based on certain demographics like age, gender, etc.\n\n    Args:\n        data_file (str): Path to the CSV file containing the data.\n        model_file (str, optional): Path to the trained model file. Defaults to 'model.joblib'.\n        config_file (str, optional): Path to the configuration file. Defaults to 'config.json'.\n\n    Returns:\n        pd.DataFrame: DataFrame containing the survival probabilities for each passenger.\n\n    Raises:\n        FileNotFoundError: If the model or configuration file does not exist.\n    \"\"\"\n    model = joblib.load(model_file)\n    config = json.load(open(config_file))\n    features = config['features']\n    data = pd.read_csv(data_file)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n    predictions = model.predict(data)\n    return predictions\n\n# test_function_code --------------------\n\ndef test_predict_survival():\n    \"\"\"Tests the predict_survival function.\"\"\"\n    try:\n        predictions = predict_survival('test_data.csv')\n        assert isinstance(predictions, pd.DataFrame), 'The result is not a DataFrame.'\n        assert not predictions.empty, 'The DataFrame is empty.'\n    except FileNotFoundError:\n        print('Model or configuration file not found.')\n    else:\n        print('All Tests Passed')\n\n# call_test_function_code --------------------\n\ntest_predict_survival()", "function_import": "# function_import --------------------\n\nimport joblib\nimport pandas as pd\nimport json\n\n", "function_code": "# function_code --------------------\n\ndef predict_survival(data_file: str, model_file: str = 'model.joblib', config_file: str = 'config.json') -> pd.DataFrame:\n    \"\"\"\n    Predict the survival of passengers on the Titanic based on certain demographics like age, gender, etc.\n\n    Args:\n        data_file (str): Path to the CSV file containing the data.\n        model_file (str, optional): Path to the trained model file. Defaults to 'model.joblib'.\n        config_file (str, optional): Path to the configuration file. Defaults to 'config.json'.\n\n    Returns:\n        pd.DataFrame: DataFrame containing the survival probabilities for each passenger.\n\n    Raises:\n        FileNotFoundError: If the model or configuration file does not exist.\n    \"\"\"\n    model = joblib.load(model_file)\n    config = json.load(open(config_file))\n    features = config['features']\n    data = pd.read_csv(data_file)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n    predictions = model.predict(data)\n    return predictions\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_predict_survival():\n    \"\"\"Tests the predict_survival function.\"\"\"\n    try:\n        predictions = predict_survival('test_data.csv')\n        assert isinstance(predictions, pd.DataFrame), 'The result is not a DataFrame.'\n        assert not predictions.empty, 'The DataFrame is empty.'\n    except FileNotFoundError:\n        print('Model or configuration file not found.')\n    else:\n        print('All Tests Passed')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_predict_survival()", "instruct": "# function_import --------------------\n\nimport joblib\nimport pandas as pd\nimport json\n\n# function_code --------------------\n\ndef predict_survival(data_file: str, model_file: str = 'model.joblib', config_file: str = 'config.json') -> pd.DataFrame:\n    \"\"\"\n    Predict the survival of passengers on the Titanic based on certain demographics like age, gender, etc.\n\n    Args:\n        data_file (str): Path to the CSV file containing the data.\n        model_file (str, optional): Path to the trained model file. Defaults to 'model.joblib'.\n        config_file (str, optional): Path to the configuration file. Defaults to 'config.json'.\n\n    Returns:\n        pd.DataFrame: DataFrame containing the survival probabilities for each passenger.\n\n    Raises:\n        FileNotFoundError: If the model or configuration file does not exist.\n    \"\"\"", "answer": "\n    model = joblib.load(model_file)\n    config = json.load(open(config_file))\n    features = config['features']\n    data = pd.read_csv(data_file)\n    data = data[features]\n    data.columns = ['feat_' + str(col) for col in data.columns]\n    predictions = model.predict(data)\n    return predictions\n\n", "prediction": "\n    \n    # load config file --------------------\n    with open(config_file, 'r') as fd:\n      config = json.load(fd)\n      \n      target_col = config['target']\n      id_cols = config['IDs']\n      \n    # load model and data --------------------\n    \n    X, y, df = _load_data(data_file)\n    \n    if not len(id_cols):\n        raise ValueError('The IDs cannot be empty.')\n    if not pd.isnull(y).sum() == 0: # no missing values allowed in target column\n      raise ValueError('The target column must not contain null-values!')\n    \n    df['probability'] = _predict_survival(X, y, model_file)\n    \n    return df.reset_index().rename({'index': 'Passenger'}, axis=1)\n  \ndef _load_data(fname: str) -> tuple[pd.DataFrame]:\n  \"\"\"\n  Load the Titanic data set from csv file and split into features (X), labels (y), and DataFrame (df).\n  \n  Args:\n      fname (str): Path to the csv-file containing the dataset.\n      \n  Returns:\n      tuple[pd.DataFrame]: Tuple of X, y, and df\n  \"\"\"\n    \n    # read data --------------------\n    try:\n        df = pd.read_csv(fname)\n        \n    except FileNotFoundError as error:\n        print('Please provide a valid path to the CSV file containing the dataset.')\n        raise error\n      \n    # split features and labels --------------------\n    y = df['Survived'].values\n    \n    X = df[df.columns[~df.columns.isin(['Passenger', 'Name', 'Ticket', 'Cabin', 'Survived'])]].copy().fillna(-1)\n    #X['Age'] = X['Age'].apply(lambda x: round(x, 2))\n      \n    return X, y, df\n  \ndef _predict_survival(X: pd.DataFrame, y: pd.Series,"}