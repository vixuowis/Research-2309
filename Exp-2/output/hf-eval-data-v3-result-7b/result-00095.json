{"path": "output/hf-eval-data-v3-valid/f00414_group_articles_by_topic.py", "content": "# function_import --------------------\n\nfrom sentence_transformers import SentenceTransformer\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\n# function_code --------------------\n\ndef group_articles_by_topic(sentences: list, num_clusters: int) -> dict:\n    '''\n    Groups articles by topic using SentenceTransformer for sentence embeddings and KMeans for clustering.\n\n    Args:\n        sentences (list): A list of sentences from the articles.\n        num_clusters (int): The number of clusters (topics) to form.\n\n    Returns:\n        dict: A dictionary where keys are cluster ids and values are lists of sentences belonging to that cluster.\n\n    Raises:\n        ValueError: If sentences is not a list or num_clusters is not an integer.\n    '''\n    if not isinstance(sentences, list) or not all(isinstance(s, str) for s in sentences):\n        raise ValueError('sentences must be a list of strings')\n    if not isinstance(num_clusters, int):\n        raise ValueError('num_clusters must be an integer')\n\n    model = SentenceTransformer('sentence-transformers/distiluse-base-multilingual-cased-v1')\n    embeddings = model.encode(sentences)\n    kmeans = KMeans(n_clusters=num_clusters)\n    labels = kmeans.fit_predict(embeddings)\n\n    clusters = {i: [] for i in range(num_clusters)}\n    for sentence, label in zip(sentences, labels):\n        clusters[label].append(sentence)\n\n    return clusters\n\n# test_function_code --------------------\n\ndef test_group_articles_by_topic():\n    '''Tests the group_articles_by_topic function.'''\n    sentences = ['This is an example sentence.', 'Each sentence is converted.', 'This is another example.', 'Each example is different.']\n    num_clusters = 2\n\n    clusters = group_articles_by_topic(sentences, num_clusters)\n\n    assert isinstance(clusters, dict), 'Return type must be a dictionary.'\n    assert len(clusters) == num_clusters, 'Number of clusters must be equal to num_clusters.'\n    for cluster in clusters.values():\n        assert all(sentence in sentences for sentence in cluster), 'All sentences in a cluster must be from the input sentences.'\n\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_group_articles_by_topic()", "function_import": "# function_import --------------------\n\nfrom sentence_transformers import SentenceTransformer\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\n", "function_code": "# function_code --------------------\n\ndef group_articles_by_topic(sentences: list, num_clusters: int) -> dict:\n    '''\n    Groups articles by topic using SentenceTransformer for sentence embeddings and KMeans for clustering.\n\n    Args:\n        sentences (list): A list of sentences from the articles.\n        num_clusters (int): The number of clusters (topics) to form.\n\n    Returns:\n        dict: A dictionary where keys are cluster ids and values are lists of sentences belonging to that cluster.\n\n    Raises:\n        ValueError: If sentences is not a list or num_clusters is not an integer.\n    '''\n    if not isinstance(sentences, list) or not all(isinstance(s, str) for s in sentences):\n        raise ValueError('sentences must be a list of strings')\n    if not isinstance(num_clusters, int):\n        raise ValueError('num_clusters must be an integer')\n\n    model = SentenceTransformer('sentence-transformers/distiluse-base-multilingual-cased-v1')\n    embeddings = model.encode(sentences)\n    kmeans = KMeans(n_clusters=num_clusters)\n    labels = kmeans.fit_predict(embeddings)\n\n    clusters = {i: [] for i in range(num_clusters)}\n    for sentence, label in zip(sentences, labels):\n        clusters[label].append(sentence)\n\n    return clusters\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_group_articles_by_topic():\n    '''Tests the group_articles_by_topic function.'''\n    sentences = ['This is an example sentence.', 'Each sentence is converted.', 'This is another example.', 'Each example is different.']\n    num_clusters = 2\n\n    clusters = group_articles_by_topic(sentences, num_clusters)\n\n    assert isinstance(clusters, dict), 'Return type must be a dictionary.'\n    assert len(clusters) == num_clusters, 'Number of clusters must be equal to num_clusters.'\n    for cluster in clusters.values():\n        assert all(sentence in sentences for sentence in cluster), 'All sentences in a cluster must be from the input sentences.'\n\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_group_articles_by_topic()", "instruct": "# function_import --------------------\n\nfrom sentence_transformers import SentenceTransformer\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\n# function_code --------------------\n\ndef group_articles_by_topic(sentences: list, num_clusters: int) -> dict:\n    '''\n    Groups articles by topic using SentenceTransformer for sentence embeddings and KMeans for clustering.\n\n    Args:\n        sentences (list): A list of sentences from the articles.\n        num_clusters (int): The number of clusters (topics) to form.\n\n    Returns:\n        dict: A dictionary where keys are cluster ids and values are lists of sentences belonging to that cluster.\n\n    Raises:\n        ValueError: If sentences is not a list or num_clusters is not an integer.\n    '''", "answer": "\n    if not isinstance(sentences, list) or not all(isinstance(s, str) for s in sentences):\n        raise ValueError('sentences must be a list of strings')\n    if not isinstance(num_clusters, int):\n        raise ValueError('num_clusters must be an integer')\n\n    model = SentenceTransformer('sentence-transformers/distiluse-base-multilingual-cased-v1')\n    embeddings = model.encode(sentences)\n    kmeans = KMeans(n_clusters=num_clusters)\n    labels = kmeans.fit_predict(embeddings)\n\n    clusters = {i: [] for i in range(num_clusters)}\n    for sentence, label in zip(sentences, labels):\n        clusters[label].append(sentence)\n\n    return clusters\n\n", "prediction": "    \n    if not type(sentences) == list:\n        raise TypeError('The parameter \"sentences\" must be of type list.')\n    elif not type(num_clusters) == int:\n        raise TypeError('The parameter \"num_cluster\" must be an integer.')\n    \n    embedder = SentenceTransformer(\"all-MiniLM-L6-v2\") # Using model \"all-MiniLM-L6-v2\".\n    sentence_embeddings = embedder.encode(sentences, show_progress_bar=True)\n    clusters = KMeans(n_clusters=num_clusters).fit(sentence_embeddings).labels  # Generating cluster labels using KMeans.\n    \n    # Creating dictionary of cluster ids and a list of the corresponding sentences.\n    article_dict = {}\n    for i in range(len(clusters)):\n        if clusters[i] not in article_dict:\n            article_dict[clusters[i]] = [sentences[i]]  # Adding the first sentence to a cluster.\n        else:\n            article_dict[clusters[i]].append(sentences[i])  # Appending sentences to clusters.\n    \n    return article_dict\n"}