{"path": "output/hf-eval-data-v3-valid/f00259_generate_image.py", "content": "# function_import --------------------\n\nimport torch\nfrom diffusers import StableDiffusionPipeline\nimport os\n\n# function_code --------------------\n\ndef generate_image(prompt: str, model_id: str = 'CompVis/stable-diffusion-v1-4', device: str = 'cuda') -> None:\n    \"\"\"\n    Generate an image based on the given text prompt using the StableDiffusionPipeline model.\n\n    Args:\n        prompt (str): The text prompt to generate the image from.\n        model_id (str, optional): The model id to use for the image generation. Defaults to 'CompVis/stable-diffusion-v1-4'.\n        device (str, optional): The device to run the model on. Defaults to 'cuda'.\n\n    Returns:\n        None. The function saves the generated image to the current directory.\n    \"\"\"\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe = pipe.to(device)\n    image = pipe(prompt).images[0]\n    image.save(f'{prompt.replace(\" \", \"_\")}.png')\n\n# test_function_code --------------------\n\ndef test_generate_image():\n    \"\"\"\n    Test the generate_image function.\n    \"\"\"\n    generate_image('A futuristic city under the ocean')\n    assert os.path.exists('A_futuristic_city_under_the_ocean.png')\n    os.remove('A_futuristic_city_under_the_ocean.png')\n    generate_image('An astronaut riding a horse on mars')\n    assert os.path.exists('An_astronaut_riding_a_horse_on_mars.png')\n    os.remove('An_astronaut_riding_a_horse_on_mars.png')\n    return 'All Tests Passed'\n\n# call_test_function_code --------------------\n\ntest_generate_image()", "function_import": "# function_import --------------------\n\nimport torch\nfrom diffusers import StableDiffusionPipeline\nimport os\n\n", "function_code": "# function_code --------------------\n\ndef generate_image(prompt: str, model_id: str = 'CompVis/stable-diffusion-v1-4', device: str = 'cuda') -> None:\n    \"\"\"\n    Generate an image based on the given text prompt using the StableDiffusionPipeline model.\n\n    Args:\n        prompt (str): The text prompt to generate the image from.\n        model_id (str, optional): The model id to use for the image generation. Defaults to 'CompVis/stable-diffusion-v1-4'.\n        device (str, optional): The device to run the model on. Defaults to 'cuda'.\n\n    Returns:\n        None. The function saves the generated image to the current directory.\n    \"\"\"\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe = pipe.to(device)\n    image = pipe(prompt).images[0]\n    image.save(f'{prompt.replace(\" \", \"_\")}.png')\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_generate_image():\n    \"\"\"\n    Test the generate_image function.\n    \"\"\"\n    generate_image('A futuristic city under the ocean')\n    assert os.path.exists('A_futuristic_city_under_the_ocean.png')\n    os.remove('A_futuristic_city_under_the_ocean.png')\n    generate_image('An astronaut riding a horse on mars')\n    assert os.path.exists('An_astronaut_riding_a_horse_on_mars.png')\n    os.remove('An_astronaut_riding_a_horse_on_mars.png')\n    return 'All Tests Passed'\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_generate_image()", "instruct": "# function_import --------------------\n\nimport torch\nfrom diffusers import StableDiffusionPipeline\nimport os\n\n# function_code --------------------\n\ndef generate_image(prompt: str, model_id: str = 'CompVis/stable-diffusion-v1-4', device: str = 'cuda') -> None:\n    \"\"\"\n    Generate an image based on the given text prompt using the StableDiffusionPipeline model.\n\n    Args:\n        prompt (str): The text prompt to generate the image from.\n        model_id (str, optional): The model id to use for the image generation. Defaults to 'CompVis/stable-diffusion-v1-4'.\n        device (str, optional): The device to run the model on. Defaults to 'cuda'.\n\n    Returns:\n        None. The function saves the generated image to the current directory.\n    \"\"\"", "answer": "\n    pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\n    pipe = pipe.to(device)\n    image = pipe(prompt).images[0]\n    image.save(f'{prompt.replace(\" \", \"_\")}.png')\n\n", "prediction": "\n    \n    pipeline = StableDiffusionPipeline(model_id=model_id, device=device)\n    img = pipeline.generate_from_prompt(text=prompt)\n\n    # Save the image to the working directory\n    os.makedirs('output', exist_ok=True)\n    torchvision.io.write_image(img, 'output/generated_image.png')\n\n# function_call --------------------\n\nif __name__ == '__main__':\n    \n    device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\n    prompt = 'A bright red apple.'\n    generate_image(prompt=prompt, device=device)\n"}