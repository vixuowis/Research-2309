{"path": "output/hf-eval-data-v3-valid/f00781_classify_news_article.py", "content": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef classify_news_article(news_article):\n    \"\"\"\n    Classify a news article into categories like Politics, Sports, Technology, Business, and Entertainment.\n\n    Args:\n        news_article (str): The news article to be classified.\n\n    Returns:\n        dict: A dictionary with the classification scores for each category.\n\n    Raises:\n        OSError: If there is a problem with the model loading due to disk quota exceeded.\n    \"\"\"\n    classifier = pipeline('zero-shot-classification', model='typeform/squeezebert-mnli')\n    candidate_labels = ['Politics', 'Sports', 'Technology', 'Business', 'Entertainment']\n    result = classifier(news_article, candidate_labels)\n    return result\n\n# test_function_code --------------------\n\ndef test_classify_news_article():\n    \"\"\"\n    Test the classify_news_article function with some example news articles.\n    \"\"\"\n    news_article1 = 'The government passed a new law today'\n    news_article2 = 'The local team won the championship'\n    news_article3 = 'Apple released a new product'\n    result1 = classify_news_article(news_article1)\n    result2 = classify_news_article(news_article2)\n    result3 = classify_news_article(news_article3)\n    assert isinstance(result1, dict), 'The result should be a dictionary.'\n    assert isinstance(result2, dict), 'The result should be a dictionary.'\n    assert isinstance(result3, dict), 'The result should be a dictionary.'\n    print('All Tests Passed')\n\n# call_test_function_code --------------------\n\ntest_classify_news_article()", "function_import": "# function_import --------------------\n\nfrom transformers import pipeline\n\n", "function_code": "# function_code --------------------\n\ndef classify_news_article(news_article):\n    \"\"\"\n    Classify a news article into categories like Politics, Sports, Technology, Business, and Entertainment.\n\n    Args:\n        news_article (str): The news article to be classified.\n\n    Returns:\n        dict: A dictionary with the classification scores for each category.\n\n    Raises:\n        OSError: If there is a problem with the model loading due to disk quota exceeded.\n    \"\"\"\n    classifier = pipeline('zero-shot-classification', model='typeform/squeezebert-mnli')\n    candidate_labels = ['Politics', 'Sports', 'Technology', 'Business', 'Entertainment']\n    result = classifier(news_article, candidate_labels)\n    return result\n\n", "test_function_code": "# test_function_code --------------------\n\ndef test_classify_news_article():\n    \"\"\"\n    Test the classify_news_article function with some example news articles.\n    \"\"\"\n    news_article1 = 'The government passed a new law today'\n    news_article2 = 'The local team won the championship'\n    news_article3 = 'Apple released a new product'\n    result1 = classify_news_article(news_article1)\n    result2 = classify_news_article(news_article2)\n    result3 = classify_news_article(news_article3)\n    assert isinstance(result1, dict), 'The result should be a dictionary.'\n    assert isinstance(result2, dict), 'The result should be a dictionary.'\n    assert isinstance(result3, dict), 'The result should be a dictionary.'\n    print('All Tests Passed')\n\n", "call_test_function_code": "# call_test_function_code --------------------\n\ntest_classify_news_article()", "instruct": "# function_import --------------------\n\nfrom transformers import pipeline\n\n# function_code --------------------\n\ndef classify_news_article(news_article):\n    \"\"\"\n    Classify a news article into categories like Politics, Sports, Technology, Business, and Entertainment.\n\n    Args:\n        news_article (str): The news article to be classified.\n\n    Returns:\n        dict: A dictionary with the classification scores for each category.\n\n    Raises:\n        OSError: If there is a problem with the model loading due to disk quota exceeded.\n    \"\"\"", "answer": "\n    classifier = pipeline('zero-shot-classification', model='typeform/squeezebert-mnli')\n    candidate_labels = ['Politics', 'Sports', 'Technology', 'Business', 'Entertainment']\n    result = classifier(news_article, candidate_labels)\n    return result\n\n", "prediction": "\n    \n    # Instantiate classifier pipeline\n    classifier = pipeline(\"zero-shot-classification\", device=0)\n    \n    # Run prediction\n    try:\n        results = classifier(news_article, candidate_labels=[\"Politics\", \"Sports\", \"Technology\", \\\n                            \"Business\", \"Entertainment\"], multi_label=False)\n        \n    except OSError as e:\n        print(\"Disk quota exceeded\")\n        raise(e)\n    \n    # Return results in a dictionary format\n    return results"}