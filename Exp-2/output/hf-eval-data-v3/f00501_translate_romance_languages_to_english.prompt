{'code': "###Instruction: We have a list of documents written in multiple Romance languages, including texts in French, Spanish, and Italian. We want to make these texts accessible to our English-speaking audience by translating them.\n###Output: <<<domain>>>: Natural Language Processing Translation\n<<<api_call>>>: pipeline('translation', model='Helsinki-NLP/opus-mt-ROMANCE-en')\n<<<api_provider>>>: Hugging Face Transformers\n<<<explanation>>>:1. Import the pipeline function from the transformers library provided by Hugging Face.\n2. Use the pipeline() function to create a translation model, which will be able to translate texts from multiple Romance languages to English.\n3. Specify the model 'Helsinki-NLP/opus-mt-ROMANCE-en' to be loaded. This model is trained to translate from Romance languages such as French, Spanish, Portuguese, Italian, and Romanian, among others, to English.\n4. Once the model is loaded, provide the input text in one of the supported Romance languages, and the model will return the translated English text as output.\n<<<code>>>: from transformers import pipeline\ntranslate_model = pipeline('translation', model='Helsinki-NLP/opus-mt-ROMANCE-en')\ntranslated_texts = [translate_model(document) for document in romance_languages_documents]\n", 'api_call': "MarianMTModel.from_pretrained('Helsinki-NLP/opus-mt-ROMANCE-en')", 'provider': 'Hugging Face Transformers', 'api_data': {'domain': 'Natural Language Processing Translation', 'framework': 'Hugging Face Transformers', 'functionality': 'Translation', 'api_name': 'opus-mt-ROMANCE-en', 'api_call': "MarianMTModel.from_pretrained('Helsinki-NLP/opus-mt-ROMANCE-en')", 'api_arguments': ['source languages', 'target languages'], 'python_environment_requirements': ['transformers', 'torch'], 'example_code': '', 'performance': {'dataset': 'opus', 'accuracy': {'BLEU': 62.2, 'chr-F': 0.75}}, 'description': 'A model for translating Romance languages to English, trained on the OPUS dataset. It supports multiple source languages such as French, Spanish, Portuguese, Italian, and Romanian, among others. The model is based on the transformer architecture and uses normalization and SentencePiece for pre-processing.'}}








/root/miniconda3/envs/py38/lib/python3.8/site-packages/transformers/models/marian/tokenization_marian.py:194: UserWarning: Recommended: pip install sacremoses.
  warnings.warn("Recommended: pip install sacremoses.")
