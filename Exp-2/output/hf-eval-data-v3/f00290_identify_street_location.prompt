{'code': "###Instruction: Organizing a special event and want to identify the place where street pictures were taken for invitations.\n###Output: <<<domain>>>: Multimodal Zero-Shot Image Classification\n<<<api_call>>>: CLIPModel.from_pretrained('geolocal/StreetCLIP')\n<<<api_provider>>>: Hugging Face Transformers\n<<<explanation>>>: 1. Import the necessary libraries, which are CLIPModel, CLIPProcessor, Image, and requests.\n2. Instantiate the model and processor by using the 'from_pretrained' method on the CLIPModel and CLIPProcessor classes. Specify 'geolocal/StreetCLIP' as the pre-trained model.\n3. Load the street-level image that we want to identify the place by opening it using the Image class from PIL library.\n4. Provide the model with a list of choices (cities or locations) and use the processor to convert the choices and image into tensors.\n5. Execute the model on the inputs and get the logits_per_image tensor. Convert this tensor to probabilities.\n6. Analyze the probabilities to find the location with the highest probability.\n<<<code>>>: from transformers import CLIPModel, CLIPProcessor\nfrom PIL import Image\nimport requests\n\nmodel = CLIPModel.from_pretrained('geolocal/StreetCLIP')\nprocessor = CLIPProcessor.from_pretrained('geolocal/StreetCLIP')\n\nimage_url = 'https://example.com/path-to-image.jpg'\nimage = Image.open(requests.get(image_url, stream=True).raw)\n\nchoices = ['San Jose', 'San Diego', 'Los Angeles', 'Las Vegas', 'San Francisco']\ninputs = processor(text=choices, images=image, return_tensors='pt', padding=True)\n\noutputs = model(**inputs)\nlogits_per_image = outputs.logits_per_image\nprobs = logits_per_image.softmax(dim=1)", 'api_call': "CLIPModel.from_pretrained('geolocal/StreetCLIP')", 'provider': 'Hugging Face Transformers', 'api_data': {'domain': 'Multimodal Zero-Shot Image Classification', 'framework': 'Hugging Face Transformers', 'functionality': 'Image Geolocalization', 'api_name': 'geolocal/StreetCLIP', 'api_call': "CLIPModel.from_pretrained('geolocal/StreetCLIP')", 'api_arguments': {'pretrained_model_name_or_path': 'geolocal/StreetCLIP'}, 'python_environment_requirements': ['transformers', 'PIL', 'requests'], 'example_code': 'from PIL import Image\nimport requests\nfrom transformers import CLIPProcessor, CLIPModel\nmodel = CLIPModel.from_pretrained(geolocal/StreetCLIP)\nprocessor = CLIPProcessor.from_pretrained(geolocal/StreetCLIP)\nurl = https://huggingface.co/geolocal/StreetCLIP/resolve/main/sanfrancisco.jpeg\nimage = Image.open(requests.get(url, stream=True).raw)\nchoices = [San Jose, San Diego, Los Angeles, Las Vegas, San Francisco]\ninputs = processor(text=choices, images=image, return_tensors=pt, padding=True)\noutputs = model(**inputs)\nlogits_per_image = outputs.logits_per_image\nprobs = logits_per_image.softmax(dim=1)', 'performance': {'dataset': [{'name': 'IM2GPS', 'accuracy': {'25km': 28.3, '200km': 45.1, '750km': 74.7, '2500km': 88.2}}, {'name': 'IM2GPS3K', 'accuracy': {'25km': 22.4, '200km': 37.4, '750km': 61.3, '2500km': 80.4}}]}, 'description': 'StreetCLIP is a robust foundation model for open-domain image geolocalization and other geographic and climate-related tasks. Trained on an original dataset of 1.1 million street-level urban and rural geo-tagged images, it achieves state-of-the-art performance on multiple open-domain image geolocalization benchmarks in zero-shot, outperforming supervised models trained on millions of images.'}}

`text_config_dict` is provided which will be used to initialize `CLIPTextConfig`. The value `text_config["id2label"]` will be overriden.
`text_config_dict` is provided which will be used to initialize `CLIPTextConfig`. The value `text_config["bos_token_id"]` will be overriden.
`text_config_dict` is provided which will be used to initialize `CLIPTextConfig`. The value `text_config["eos_token_id"]` will be overriden.
