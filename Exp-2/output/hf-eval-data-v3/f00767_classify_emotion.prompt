{'code': "###Instruction: I wish to automatically classify a given text's emotion. What Transformers model should I use?\n###Output: <<<domain>>>: Natural Language Processing Text Classification\n<<<api_call>>>: pipeline('text-classification', model='joeddav/distilbert-base-uncased-go-emotions-student')\n<<<api_provider>>>: Transformers\n<<<explanation>>>:1. You can use the 'joeddav/distilbert-base-uncased-go-emotions-student' model, which is designed specifically for emotion classification in text.\n2. We first import 'pipeline' from the transformers library.\n3. We create a text classification pipeline using the 'text-classification' task and the 'joeddav/distilbert-base-uncased-go-emotions-student' model.\n4. Once the pipeline is created, you can feed the text to the classifier and get the emotion classification as the output.\n<<<code>>>: from transformers import pipeline\nnlp = pipeline('text-classification', model='joeddav/distilbert-base-uncased-go-emotions-student')\nresult = nlp('I am so happy today!')\n", 'api_call': "pipeline('text-classification', model='joeddav/distilbert-base-uncased-go-emotions-student')", 'provider': 'Transformers', 'api_data': {'domain': 'Natural Language Processing Text Classification', 'framework': 'Transformers', 'functionality': 'Text Classification', 'api_name': 'joeddav/distilbert-base-uncased-go-emotions-student', 'api_call': "pipeline('text-classification', model='joeddav/distilbert-base-uncased-go-emotions-student')", 'api_arguments': 'text', 'python_environment_requirements': ['transformers', 'torch', 'tensorflow'], 'example_code': "from transformers import pipeline\nnlp = pipeline('text-classification', model='joeddav/distilbert-base-uncased-go-emotions-student')\nresult = nlp('I am so happy today!')", 'performance': {'dataset': 'go_emotions'}, 'description': 'This model is distilled from the zero-shot classification pipeline on the unlabeled GoEmotions dataset. It is primarily intended as a demo of how an expensive NLI-based zero-shot model can be distilled to a more efficient student, allowing a classifier to be trained with only unlabeled data.'}}

