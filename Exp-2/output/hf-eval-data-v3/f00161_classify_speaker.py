# function_import --------------------

import torchaudio
from speechbrain.pretrained import EncoderClassifier

# function_code --------------------

def classify_speaker(audio_file_path):
    """
    Classify the speaker in an audio file using a pre-trained model.

    Args:
        audio_file_path (str): The path to the audio file to be analyzed.

    Returns:
        numpy.ndarray: The speaker embeddings generated by the model.

    Raises:
        FileNotFoundError: If the audio file does not exist.
        RuntimeError: If there is an error loading the audio file or running the model.
    """
    classifier = EncoderClassifier.from_hparams(source='speechbrain/spkrec-xvect-voxceleb', savedir='pretrained_models/spkrec-xvect-voxceleb')
    signal, fs = torchaudio.load(audio_file_path)
    embeddings = classifier.encode_batch(signal)
    return embeddings

# test_function_code --------------------

def test_classify_speaker():
    """Tests for the `classify_speaker` function."""
    # Test with a valid audio file
    embeddings = classify_speaker('tests/samples/ASR/spk1_snt1.wav')
    assert embeddings is not None
    assert embeddings.shape[0] > 0

    # Test with a non-existent file
    try:
        classify_speaker('non_existent_file.wav')
    except FileNotFoundError:
        pass
    else:
        assert False, 'Expected a FileNotFoundError.'

    # Test with an invalid file
    try:
        classify_speaker('tests/samples/invalid_file.wav')
    except RuntimeError:
        pass
    else:
        assert False, 'Expected a RuntimeError.'

    return 'All Tests Passed'

# call_test_function_code --------------------

test_classify_speaker()