{'code': "###Instruction: To track our sales data, we need to find total sales of a specific product based on a table containing sales information per week.\n###Output: <<<domain>>>: Natural Language Processing Table Question Answering\n<<<api_call>>>: TapasForQuestionAnswering.from_pretrained('lysandre/tapas-temporary-repo')\n<<<api_provider>>>: Hugging Face Transformers\n<<<explanation>>>: 1. Import the required TapasTokenizer and TapasForQuestionAnswering classes from transformers.\n2. Use the from_pretrained method of the TapasTokenizer class to load the pre-trained tokenizer 'lysandre/tapas-temporary-repo'.\n3. Use the from_pretrained method of the TapasForQuestionAnswering class to load the pre-trained model 'lysandre/tapas-temporary-repo'.\n4. Use the tokenizer to create input tensors for the given question and sales data table.\n5. Pass the input tensors to the model to receive the predicted answer coordinates and aggregation indices.\n6. Finally, extract the sum of sales for the desired product from the table using the predicted answer coordinates and aggregation indices.\n<<<code>>>: from transformers import TapasTokenizer, TapasForQuestionAnswering\ntokenizer = TapasTokenizer.from_pretrained('lysandre/tapas-temporary-repo')\nmodel = TapasForQuestionAnswering.from_pretrained('lysandre/tapas-temporary-repo')\ninputs = tokenizer(table=sales_data_table, queries=question, return_tensors='pt')\noutputs = model(**inputs)\npredicted_answer_coordinates, predicted_aggregation_indices = tokenizer.convert_logits_to_predictions(inputs, outputs.logits.detach(), outputs.logits_aggregation.detach())\n", 'api_call': "TapasForQuestionAnswering.from_pretrained('lysandre/tapas-temporary-repo')", 'provider': 'Hugging Face Transformers', 'api_data': {'domain': 'Natural Language Processing Table Question Answering', 'framework': 'Hugging Face Transformers', 'functionality': 'Table Question Answering', 'api_name': 'lysandre/tapas-temporary-repo', 'api_call': "TapasForQuestionAnswering.from_pretrained('lysandre/tapas-temporary-repo')", 'api_arguments': ['model_name', 'question', 'table'], 'python_environment_requirements': ['transformers'], 'example_code': "tokenizer = TapasTokenizer.from_pretrained('lysandre/tapas-temporary-repo')\nmodel = TapasForQuestionAnswering.from_pretrained('lysandre/tapas-temporary-repo')\ninputs = tokenizer(table=table, queries=question, return_tensors='pt')\noutputs = model(**inputs)\npredicted_answer_coordinates, predicted_aggregation_indices = tokenizer.convert_logits_to_predictions(inputs, outputs.logits.detach(), outputs.logits_aggregation.detach())", 'performance': {'dataset': 'SQA', 'accuracy': 'Not provided'}, 'description': 'TAPAS base model fine-tuned on Sequential Question Answering (SQA). This model is pretrained on a large corpus of English data from Wikipedia in a self-supervised fashion and can be used for answering questions related to a table in a conversational set-up.'}}

