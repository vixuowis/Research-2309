{'code': "###Instruction: I want to generate images from text descriptions and use the scribble images as control inputs for my project.\n###Output: <<<domain>>>: Computer Vision Image-to-Image\n<<<api_call>>>: ControlNetModel.from_pretrained('lllyasviel/control_v11p_sd15_scribble')\n<<<api_provider>>>: Diffusers\n<<<explanation>>>: 1. Import the required libraries and modules, such as torch, load_image, HEDdetector, ControlNetModel, StableDiffusionControlNetPipeline, and UniPCMultistepScheduler.\n2. Load the controlnet pretrained model using the model checkpoint provided and specify the torch_dtype as torch.float16 for faster processing.\n3. Load the input scribble image and set a text prompt for the desired output image.\n4. Instantiate the HEDdetector with the 'lllyasviel/Annotators' model and process the input image to generate a control image.\n5. Create a pipeline using the pretrained StableDiffusionControlNetPipeline and the loaded controlnet model, configure the scheduler, and offload the model to CPU.\n6. Generate the output image by providing the text prompt, image, and other required settings to the pipeline.\n7. Save the generated output image.\n<<<code>>>: import torch\nfrom diffusers.utils import load_image\nfrom PIL import Image\nfrom controlnet_aux import HEDdetector\nfrom diffusers import ControlNetModel, StableDiffusionControlNetPipeline, UniPCMultistepScheduler\ncheckpoint = 'lllyasviel/control_v11p_sd15_scribble'\nprompt = 'royal chamber with fancy bed'\ncontrol_image_path = './images/control.png'\ncontrolnet = ControlNetModel.from_pretrained(checkpoint, torch_dtype=torch.float16)\npipe = StableDiffusionControlNetPipeline.from_pretrained('runwayml/stable-diffusion-v1-5', controlnet=controlnet, torch_dtype=torch.float16)\npipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\npipe.enable_model_cpu_offload()\ngenerator = torch.manual_seed(0)\nscribble_image = Image.open(control_image_path)\nimage = pipe(prompt, num_inference_steps=30, generator=generator, image=scribble_image).images[0]\nimage.save('images/image_out.png')", 'api_call': "ControlNetModel.from_pretrained('lllyasviel/control_v11p_sd15_scribble')", 'provider': 'Diffusers', 'api_data': {'domain': 'Computer Vision Image-to-Image', 'framework': 'Diffusers', 'functionality': 'Text-to-Image', 'api_name': 'lllyasviel/control_v11p_sd15_scribble', 'api_call': "ControlNetModel.from_pretrained('lllyasviel/control_v11p_sd15_scribble')", 'api_arguments': {'checkpoint': 'lllyasviel/control_v11p_sd15_scribble', 'torch_dtype': 'torch.float16'}, 'python_environment_requirements': ['diffusers', 'transformers', 'accelerate', 'controlnet_aux==0.3.0'], 'example_code': "import torch\nimport os\nfrom huggingface_hub import HfApi\nfrom pathlib import Path\nfrom diffusers.utils import load_image\nfrom PIL import Image\nimport numpy as np\nfrom controlnet_aux import PidiNetDetector, HEDdetector\nfrom diffusers import (\n ControlNetModel,\n StableDiffusionControlNetPipeline,\n UniPCMultistepScheduler,\n)\ncheckpoint = lllyasviel/control_v11p_sd15_scribble\nimage = load_image(\n https://huggingface.co/lllyasviel/control_v11p_sd15_scribble/resolve/main/images/input.png\n)\nprompt = royal chamber with fancy bed\nprocessor = HEDdetector.from_pretrained('lllyasviel/Annotators')\ncontrol_image = processor(image, scribble=True)\ncontrol_image.save(./images/control.png)\ncontrolnet = ControlNetModel.from_pretrained(checkpoint, torch_dtype=torch.float16)\npipe = StableDiffusionControlNetPipeline.from_pretrained(\n runwayml/stable-diffusion-v1-5, controlnet=controlnet, torch_dtype=torch.float16\n)\npipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\npipe.enable_model_cpu_offload()\ngenerator = torch.manual_seed(0)\nimage = pipe(prompt, num_inference_steps=30, generator=generator, image=control_image).images[0]\nimage.save('images/image_out.png')", 'performance': {'dataset': 'Stable Diffusion v1-5', 'accuracy': 'Not specified'}, 'description': 'Controlnet v1.1 is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on Scribble images. It can be used in combination with Stable Diffusion, such as runwayml/stable-diffusion-v1-5.'}}

