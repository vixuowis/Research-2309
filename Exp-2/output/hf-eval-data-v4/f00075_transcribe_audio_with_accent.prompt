{'code': "###Instruction: Our company develops smart speaker devices that involve interaction with the user. We need to transcribe the input from the users with the maintained accent or language.\n###Output: <<<domain>>>: Audio Automatic Speech Recognition\n<<<api_call>>>: WhisperForConditionalGeneration.from_pretrained('openai/whisper-tiny')\n<<<api_provider>>>: Hugging Face Transformers\n<<<explanation>>>: 1. To solve this task, we will use the openai/whisper-tiny model, which is a pre-trained model for automatic speech recognition.\n2. First, import the necessary libraries, including WhisperProcessor and WhisperForConditionalGeneration from the transformers package.\n3. Load WhispertProcessor from_pretrained() to preprocess the input audio features.\n4. Load the whisper-tiny model using the from_pretrained() method of the WhisperForConditionalGeneration class.\n5. Process the raw audio data using the loaded WhisperProcessor, which converts the waveform or array data into the required format for the model.\n6. Use the openai/whisper-tiny model to generate a transcription of the user's speech.\n7. Decode the transcription, and return the deciphered result.\n<<<code>>>: from transformers import WhisperProcessor, WhisperForConditionalGeneration\nfrom datasets import load_dataset\nprocessor = WhisperProcessor.from_pretrained('openai/whisper-tiny')\nmodel = WhisperForConditionalGeneration.from_pretrained('openai/whisper-tiny')\nds = load_dataset('hf-internal-testing/librispeech_asr_dummy', 'clean', split='validation')\nsample = ds[0]['audio']\ninput_features = processor(sample['array'], sampling_rate=sample['sampling_rate'], return_tensors='pt').input_features\npredicted_ids = model.generate(input_features)\ntranscription = processor.batch_decode(predicted_ids, skip_special_tokens=True)\n", 'api_call': "WhisperForConditionalGeneration.from_pretrained('openai/whisper-tiny')", 'provider': 'Hugging Face Transformers', 'api_data': {'domain': 'Audio Automatic Speech Recognition', 'framework': 'Hugging Face Transformers', 'functionality': 'Transcription and Translation', 'api_name': 'openai/whisper-tiny', 'api_call': "WhisperForConditionalGeneration.from_pretrained('openai/whisper-tiny')", 'api_arguments': {'forced_decoder_ids': "WhisperProcessor.get_decoder_prompt_ids(language='english', task='transcribe')"}, 'python_environment_requirements': ['transformers', 'datasets'], 'example_code': ['from transformers import WhisperProcessor, WhisperForConditionalGeneration', 'from datasets import load_dataset', "processor = WhisperProcessor.from_pretrained('openai/whisper-tiny')", "model = WhisperForConditionalGeneration.from_pretrained('openai/whisper-tiny')", 'model.config.forced_decoder_ids = None', "ds = load_dataset('hf-internal-testing/librispeech_asr_dummy', 'clean', split='validation')", "sample = ds[0]['audio']", "input_features = processor(sample['array'], sampling_rate=sample['sampling_rate'], return_tensors='pt').input_features", 'predicted_ids = model.generate(input_features)', 'transcription = processor.batch_decode(predicted_ids, skip_special_tokens=True)'], 'performance': {'dataset': 'LibriSpeech (clean)', 'accuracy': 7.54}, 'description': 'Whisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours of labelled data, Whisper models demonstrate a strong ability to generalise to many datasets and domains without the need for fine-tuning. It is a Transformer-based encoder-decoder model that can be used for transcription and translation tasks.'}}

