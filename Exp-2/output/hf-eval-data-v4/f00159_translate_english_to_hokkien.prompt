{'code': "###Instruction: I am an English teacher. I have recently met a Hokkien speaker. I am looking to translate a conversational sentence from English to Hokkien to facilitate communication.\n###Output: <<<domain>>>: Audio Audio-to-Audio\n<<<api_call>>>: load_model_ensemble_and_task_from_hf_hub('facebook/xm_transformer_s2ut_en-hk')\n<<<api_provider>>>: Fairseq\n<<<explanation>>>: 1. Import the necessary libraries such as fairseq, huggingface_hub, and torchaudio.\n2. Load the 'facebook/xm_transformer_s2ut_en-hk' model using the function 'load_model_ensemble_and_task_from_hf_hub'.\n3. Load in the English audio file using torchaudio and perform speech-to-speech translation to obtain the Hokkien version.\n4. The resulting Hokkien-translated audio can be saved or played back for communication purposes.\n<<<code>>>: import torchaudio\nfrom fairseq import hub_utils, checkpoint_utils\nfrom fairseq.models.speech_to_text import S2THubInterface\n\ncache_dir = os.getenv('HUGGINGFACE_HUB_CACHE')\nmodels, cfg, task = checkpoint_utils.load_model_ensemble_and_task_from_hf_hub('facebook/xm_transformer_s2ut_en-hk', arg_overrides={'config_yaml': 'config.yaml', 'task': 'speech_to_text'}, cache_dir=cache_dir)\nmodel = models[0].cpu()\ncfg['task'].cpu = True\ngenerator = task.build_generator([model], cfg)\n\nenglish_audio, _ = torchaudio.load('path/to/english/audio/file')\nenglish_sample = S2THubInterface.get_model_input(task, english_audio)\nhokkien_translation = S2THubInterface.get_prediction(task, model, generator, english_sample)\n", 'api_call': "load_model_ensemble_and_task_from_hf_hub('facebook/xm_transformer_s2ut_en-hk')", 'provider': 'Fairseq', 'api_data': {'domain': 'Audio Audio-to-Audio', 'framework': 'Fairseq', 'functionality': 'speech-to-speech-translation', 'api_name': 'xm_transformer_s2ut_en-hk', 'api_call': "load_model_ensemble_and_task_from_hf_hub('facebook/xm_transformer_s2ut_en-hk')", 'api_arguments': {'arg_overrides': {'config_yaml': 'config.yaml', 'task': 'speech_to_text'}, 'cache_dir': 'cache_dir'}, 'python_environment_requirements': ['fairseq', 'huggingface_hub', 'torchaudio'], 'example_code': {'import_modules': ['import json', 'import os', 'from pathlib import Path', 'import IPython.display as ipd', 'from fairseq import hub_utils', 'from fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub', 'from fairseq.models.speech_to_text.hub_interface import S2THubInterface', 'from fairseq.models.text_to_speech import CodeHiFiGANVocoder', 'from fairseq.models.text_to_speech.hub_interface import VocoderHubInterface', 'from huggingface_hub import snapshot_download', 'import torchaudio'], 'load_model': ["cache_dir = os.getenv('HUGGINGFACE_HUB_CACHE')", "models, cfg, task = load_model_ensemble_and_task_from_hf_hub('facebook/xm_transformer_s2ut_en-hk', arg_overrides={'config_yaml': 'config.yaml', 'task': 'speech_to_text'}, cache_dir=cache_dir)", 'model = models[0].cpu()', "cfg['task'].cpu = True"], 'generate_prediction': ['generator = task.build_generator([model], cfg)', "audio, _ = torchaudio.load('/path/to/an/audio/file')", 'sample = S2THubInterface.get_model_input(task, audio)', 'unit = S2THubInterface.get_prediction(task, model, generator, sample)'], 'speech_synthesis': ["library_name = 'fairseq'", "cache_dir = (cache_dir or (Path.home() / '.cache' / library_name).as_posix())", "cache_dir = snapshot_download('facebook/unit_hifigan_HK_layer12.km2500_frame_TAT-TTS', cache_dir=cache_dir, library_name=library_name)", "x = hub_utils.from_pretrained(cache_dir, 'model.pt', '.', archive_map=CodeHiFiGANVocoder.hub_models(), config_yaml='config.json', fp16=False, is_vocoder=True)", "with open(f'{x['args']['data']}/config.json') as f:", '  vocoder_cfg = json.load(f)', "assert (len(x['args']['model_path']) == 1), 'Too many vocoder models in the input'", "vocoder = CodeHiFiGANVocoder(x['args']['model_path'][0], vocoder_cfg)", 'tts_model = VocoderHubInterface(vocoder_cfg, vocoder)', 'tts_sample = tts_model.get_model_input(unit)', 'wav, sr = tts_model.get_prediction(tts_sample)', 'ipd.Audio(wav, rate=sr)']}, 'performance': {'dataset': 'MuST-C', 'accuracy': 'Not specified'}, 'description': 'Speech-to-speech translation model with single-pass decoder (S2UT) from fairseq: English-Hokkien. Trained with supervised data in TED domain, and weakly supervised data in TED and Audiobook domain.'}}

