{'code': "###Instruction: Create a tool that receives a table and a question in natural language, and returns an answer to the question based on the inputted table.\n###Output: <<<domain>>>: Natural Language Processing Table Question Answering\n<<<api_call>>>: TapasForQuestionAnswering.from_pretrained('lysandre/tapas-temporary-repo')\n<<<api_provider>>>: Hugging Face Transformers\n<<<explanation>>>:1. Import the TapasForQuestionAnswering and TapasTokenizer classes from the transformers library provided by Hugging Face.\n2. Load the pretrained Tapas model 'lysandre/tapas-temporary-repo' using TapasForQuestionAnswering.from_pretrained() method.\n3. Instantiate a TapasTokenizer using TapasTokenizer.from_pretrained('lysandre/tapas-temporary-repo').\n4. To predict the answer, call tokenizer with the table and the question. This will return input tensors.\n5. Pass the input tensors through the pretrained Tapas model to obtain the logits for the predicted answer coordinates and aggregation indices.\n6. Convert the logits into readable predictions using the tokenizer.convert_logits_to_predictions() method by passing the inputs, logits, and logits_aggregation.\n7. The predicted answer coordinates can be used to extract the answer from the inputted table.\n<<<code>>>: from transformers import TapasTokenizer, TapasForQuestionAnswering\ntokenizer = TapasTokenizer.from_pretrained('lysandre/tapas-temporary-repo')\nmodel = TapasForQuestionAnswering.from_pretrained('lysandre/tapas-temporary-repo')\ninputs = tokenizer(table=table, queries=question, return_tensors='pt')\noutputs = model(**inputs)\npredicted_answer_coordinates, predicted_aggregation_indices = tokenizer.convert_logits_to_predictions(inputs, outputs.logits.detach(), outputs.logits_aggregation.detach())", 'api_call': "TapasForQuestionAnswering.from_pretrained('lysandre/tapas-temporary-repo')", 'provider': 'Hugging Face Transformers', 'api_data': {'domain': 'Natural Language Processing Table Question Answering', 'framework': 'Hugging Face Transformers', 'functionality': 'Table Question Answering', 'api_name': 'lysandre/tapas-temporary-repo', 'api_call': "TapasForQuestionAnswering.from_pretrained('lysandre/tapas-temporary-repo')", 'api_arguments': ['model_name', 'question', 'table'], 'python_environment_requirements': ['transformers'], 'example_code': "tokenizer = TapasTokenizer.from_pretrained('lysandre/tapas-temporary-repo')\nmodel = TapasForQuestionAnswering.from_pretrained('lysandre/tapas-temporary-repo')\ninputs = tokenizer(table=table, queries=question, return_tensors='pt')\noutputs = model(**inputs)\npredicted_answer_coordinates, predicted_aggregation_indices = tokenizer.convert_logits_to_predictions(inputs, outputs.logits.detach(), outputs.logits_aggregation.detach())", 'performance': {'dataset': 'SQA', 'accuracy': 'Not provided'}, 'description': 'TAPAS base model fine-tuned on Sequential Question Answering (SQA). This model is pretrained on a large corpus of English data from Wikipedia in a self-supervised fashion and can be used for answering questions related to a table in a conversational set-up.'}}

