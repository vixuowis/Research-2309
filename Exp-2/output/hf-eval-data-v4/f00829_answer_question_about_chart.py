# requirements_file --------------------

!pip install -U Pillow transformers

# function_import --------------------

from PIL import Image
from transformers import Pix2StructForConditionalGeneration, T5Tokenizer

# function_code --------------------

def answer_question_about_chart(image_path, question):
    """
    Answer a question about a chart using the Pix2Struct model.

    Parameters:
        image_path (str): The path to the image file of the chart.
        question (str): The question to be answered about the chart.

    Returns:
        str: The answer generated by the Pix2Struct model.
    """
    # Load the pre-trained model and tokenizer
    tokenizer = T5Tokenizer.from_pretrained('google/pix2struct-chartqa-base')
    model = Pix2StructForConditionalGeneration.from_pretrained('google/pix2struct-chartqa-base')

    # Open and process the image
    image = Image.open(image_path)
    inputs = tokenizer(question, return_tensors='pt')
    pixel_values = model.feature_extractor(images=image, return_tensors='pt').pixel_values

    # Generate an answer
    outputs = model.generate(pixel_values=pixel_values, **inputs)
    answer = tokenizer.decode(outputs[0], skip_special_tokens=True)

    return answer

# test_function_code --------------------

def test_answer_question_about_chart():
    print('Testing answer_question_about_chart function.')

    # Example image path and question
    image_path = 'example_chart.png'
    question = 'What is the highest value in the chart?'

    # Expected answer (assuming the example chart's highest value is 100)
    expected_answer = 'The highest value in the chart is 100.'

    # Get the actual answer
    actual_answer = answer_question_about_chart(image_path, question)

    # Test if the actual answer matches the expected answer
    assert actual_answer == expected_answer, f'Test failed: Expected answer was "{expected_answer}", but got "{actual_answer}".'

    print('Testing finished successfully.')

# Run the test function
test_answer_question_about_chart()