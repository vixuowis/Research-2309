{'code': "###Instruction: A researcher needs information about how to use the Whisper ASR model to transcribe and analyze the sentiment of an audio file.\n###Output: <<<domain>>>: Audio Automatic Speech Recognition\n<<<api_call>>>: WhisperForConditionalGeneration.from_pretrained('openai/whisper-large-v2')\n<<<api_provider>>>: Hugging Face Transformers\n<<<explanation>>>:1. Import required classes and functions, e.g., WhisperForConditionalGeneration, WhisperProcessor, and load_dataset, from Hugging Face transformers and datasets libraries.\n2. Instantiate the model and the processor using WhisperForConditionalGeneration.from_pretrained('openai/whisper-large-v2') and WhisperProcessor.from_pretrained('openai/whisper-large-v2'), respectively.\n3. Load the audio sample using the load_dataset method and preprocess it using the WhisperProcessor. The processor sample's array and sampling rate are the required arguments.\n4. Use the Whisper model's generate method to generate predicted IDs for the transcription of the audio.\n5. Decode the predicted_ids using the processor.batch_decode method to obtain the transcription of the audio.\n6. Analyze the sentiment of the transcribed text using a separate sentiment analysis model.\n<<<code>>>: from transformers import WhisperProcessor, WhisperForConditionalGeneration\nfrom datasets import load_dataset\n\nprocessor = WhisperProcessor.from_pretrained('openai/whisper-large-v2')\nmodel = WhisperForConditionalGeneration.from_pretrained('openai/whisper-large-v2')\nds = load_dataset('hf-internal-testing/librispeech_asr_dummy', 'clean', split='validation')\nsample = ds[0]['audio']\n\ninput_features = processor(sample['array'], sampling_rate=sample['sampling_rate'], return_tensors='pt').input_features\npredicted_ids = model.generate(input_features)\ntranscription = processor.batch_decode(predicted_ids, skip_special_tokens=True)\n\n# Analyze sentiment of transcribed text using a separate sentiment analysis model", 'api_call': "WhisperForConditionalGeneration.from_pretrained('openai/whisper-large-v2')", 'provider': 'Hugging Face Transformers', 'api_data': {'domain': 'Audio Automatic Speech Recognition', 'framework': 'Hugging Face Transformers', 'functionality': 'Automatic Speech Recognition and Speech Translation', 'api_name': 'openai/whisper-large-v2', 'api_call': "WhisperForConditionalGeneration.from_pretrained('openai/whisper-large-v2')", 'api_arguments': {'forced_decoder_ids': "WhisperProcessor.get_decoder_prompt_ids(language='english', task='transcribe')"}, 'python_environment_requirements': ['transformers', 'datasets'], 'example_code': ['from transformers import WhisperProcessor, WhisperForConditionalGeneration', 'from datasets import load_dataset', "processor = WhisperProcessor.from_pretrained('openai/whisper-large-v2')", "model = WhisperForConditionalGeneration.from_pretrained('openai/whisper-large-v2')", 'model.config.forced_decoder_ids = None', "ds = load_dataset('hf-internal-testing/librispeech_asr_dummy', 'clean', split='validation')", "sample = ds[0]['audio']", "input_features = processor(sample['array'], sampling_rate=sample['sampling_rate'], return_tensors='pt').input_features", 'predicted_ids = model.generate(input_features)', 'transcription = processor.batch_decode(predicted_ids, skip_special_tokens=True)'], 'performance': {'dataset': 'LibriSpeech test-clean', 'accuracy': 3.0003583080317573}, 'description': 'Whisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours of labelled data, Whisper models demonstrate a strong ability to generalize to many datasets and domains without the need for fine-tuning.'}}

