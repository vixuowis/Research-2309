# function_import --------------------

from transformers import BlipProcessor, BlipForQuestionAnswering
from PIL import Image
import requests
import os

# function_code --------------------

def detect_intruder(image_path: str, question: str = 'Who entered the room?') -> str:
    """
    Detect intruder in a room using a pretrained model from Hugging Face Transformers.

    Args:
        image_path (str): The path to the image file.
        question (str): The question to ask the model. Default is 'Who entered the room?'.

    Returns:
        str: The answer generated by the model.

    Raises:
        OSError: If there is not enough disk space to download the model.
    """

    # Setup --------------------

    if not os.path.exists('models'):
        os.mkdir('models')
    
    if not os.path.isfile(os.path.join('models', 'blip-2-intruder-detector.pt')):
        try:
            url = 'https://github.com/gabrieletiboni/blipp-it-demo/releases/download/v1.0.0/blip-2-intruder-detector.pt'
            response = requests.get(url)
        except OSError:
            raise OSError('Not enough disk space to download the model')
        
        with open(os.path.join('models', 'blip-2-intruder-detector.pt'), 'wb') as f:
            f.write(response.content)
    
    # Load Model --------------------

    blip_model = BlipForQuestionAnswering.from_pretrained('models/blip-2-intruder-detector.pt')
    processor = BlipProcessor.from_pretrained('models/blip-2-intruder-detector.pt')
    
    # Load Image --------------------
    
    img = Image.open(image_path)
    
    # Get Answer --------------------
    
    inputs = processor(text=question, images=img, return_tensors='pt', padding=True, truncation=True)
    answer = blip_model(**inputs).logits.argmax()
    
    return question + ' ' + answer

# test_function_code --------------------

def test_detect_intruder():
    """Test the detect_intruder function."""
    image_url = 'https://placekitten.com/200/300'
    image_path = 'test_image.jpg'
    with open(image_path, 'wb') as f:
        f.write(requests.get(image_url).content)

    try:
        answer = detect_intruder(image_path)
        assert isinstance(answer, str)
    finally:
        os.remove(image_path)

    return 'All Tests Passed'


# call_test_function_code --------------------

test_detect_intruder()